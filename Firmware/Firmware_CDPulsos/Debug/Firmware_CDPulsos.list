
Firmware_CDPulsos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  080089d4  080089d4  000189d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009054  08009054  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08009054  08009054  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009054  08009054  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009054  08009054  00019054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009058  08009058  00019058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800905c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004518  20000098  080090f4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045b0  080090f4  000245b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015215  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003458  00000000  00000000  000352d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00038730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  00039ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b411  00000000  00000000  0003acd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017759  00000000  00000000  000560e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094446  00000000  00000000  0006d842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101c88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056fc  00000000  00000000  00101cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080089bc 	.word	0x080089bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080089bc 	.word	0x080089bc

0800014c <get_pressed_button>:

// TODO: definir os GPIOS que serão utilizados
// nos botões

uint8_t get_pressed_button()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

}
 8000150:	bf00      	nop
 8000152:	4618      	mov	r0, r3
 8000154:	46bd      	mov	sp, r7
 8000156:	bc80      	pop	{r7}
 8000158:	4770      	bx	lr

0800015a <clean>:


#include "AppDataTypes/lcd.h"

void clean()
{
 800015a:	b480      	push	{r7}
 800015c:	af00      	add	r7, sp, #0
	//TODO: Chamar a função da biblioteca do gringo youtuber
}
 800015e:	bf00      	nop
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr

08000166 <init>:

void init()
{
 8000166:	b480      	push	{r7}
 8000168:	af00      	add	r7, sp, #0
	//TODO: Chamar a função da biblioteca do gringo youtuber
}
 800016a:	bf00      	nop
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr

08000172 <print_sensors_menu>:

void print_sensors_menu(uint8_t menu_choice)
{
 8000172:	b480      	push	{r7}
 8000174:	b083      	sub	sp, #12
 8000176:	af00      	add	r7, sp, #0
 8000178:	4603      	mov	r3, r0
 800017a:	71fb      	strb	r3, [r7, #7]
	//TODO: Definir menu principal de seleção dos sensores
}
 800017c:	bf00      	nop
 800017e:	370c      	adds	r7, #12
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
	...

08000188 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	4802      	ldr	r0, [pc, #8]	; (800019c <SELECT+0x14>)
 8000192:	f001 ff83 	bl	800209c <HAL_GPIO_WritePin>
}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010c00 	.word	0x40010c00

080001a0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80001a4:	2201      	movs	r2, #1
 80001a6:	2101      	movs	r1, #1
 80001a8:	4802      	ldr	r0, [pc, #8]	; (80001b4 <DESELECT+0x14>)
 80001aa:	f001 ff77 	bl	800209c <HAL_GPIO_WritePin>
}
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80001c2:	bf00      	nop
 80001c4:	4808      	ldr	r0, [pc, #32]	; (80001e8 <SPI_TxByte+0x30>)
 80001c6:	f002 ffb3 	bl	8003130 <HAL_SPI_GetState>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d1f9      	bne.n	80001c4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80001d0:	1df9      	adds	r1, r7, #7
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	2201      	movs	r2, #1
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <SPI_TxByte+0x30>)
 80001da:	f002 fccb 	bl	8002b74 <HAL_SPI_Transmit>
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20001460 	.word	0x20001460

080001ec <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80001f2:	23ff      	movs	r3, #255	; 0xff
 80001f4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80001fa:	bf00      	nop
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <SPI_RxByte+0x38>)
 80001fe:	f002 ff97 	bl	8003130 <HAL_SPI_GetState>
 8000202:	4603      	mov	r3, r0
 8000204:	2b01      	cmp	r3, #1
 8000206:	d1f9      	bne.n	80001fc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000208:	1dba      	adds	r2, r7, #6
 800020a:	1df9      	adds	r1, r7, #7
 800020c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2301      	movs	r3, #1
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <SPI_RxByte+0x38>)
 8000216:	f002 fde9 	bl	8002dec <HAL_SPI_TransmitReceive>

  return data;
 800021a:	79bb      	ldrb	r3, [r7, #6]
}
 800021c:	4618      	mov	r0, r3
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	20001460 	.word	0x20001460

08000228 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000230:	f7ff ffdc 	bl	80001ec <SPI_RxByte>
 8000234:	4603      	mov	r3, r0
 8000236:	461a      	mov	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	701a      	strb	r2, [r3, #0]
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <SD_ReadyWait+0x34>)
 800024c:	2232      	movs	r2, #50	; 0x32
 800024e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000250:	f7ff ffcc 	bl	80001ec <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000254:	f7ff ffca 	bl	80001ec <SPI_RxByte>
 8000258:	4603      	mov	r3, r0
 800025a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	2bff      	cmp	r3, #255	; 0xff
 8000260:	d004      	beq.n	800026c <SD_ReadyWait+0x28>
 8000262:	4b05      	ldr	r3, [pc, #20]	; (8000278 <SD_ReadyWait+0x34>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	b2db      	uxtb	r3, r3
 8000268:	2b00      	cmp	r3, #0
 800026a:	d1f3      	bne.n	8000254 <SD_ReadyWait+0x10>

  return res;
 800026c:	79fb      	ldrb	r3, [r7, #7]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20002534 	.word	0x20002534

0800027c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000282:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000286:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000288:	f7ff ff8a 	bl	80001a0 <DESELECT>

  for(int i = 0; i < 10; i++)
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]
 8000290:	e005      	b.n	800029e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000292:	20ff      	movs	r0, #255	; 0xff
 8000294:	f7ff ff90 	bl	80001b8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000298:	693b      	ldr	r3, [r7, #16]
 800029a:	3301      	adds	r3, #1
 800029c:	613b      	str	r3, [r7, #16]
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	2b09      	cmp	r3, #9
 80002a2:	ddf6      	ble.n	8000292 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80002a4:	f7ff ff70 	bl	8000188 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80002a8:	2340      	movs	r3, #64	; 0x40
 80002aa:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80002bc:	2395      	movs	r3, #149	; 0x95
 80002be:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	e009      	b.n	80002da <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80002c6:	1d3a      	adds	r2, r7, #4
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	4413      	add	r3, r2
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f7ff ff72 	bl	80001b8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3301      	adds	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	2b05      	cmp	r3, #5
 80002de:	ddf2      	ble.n	80002c6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80002e0:	e002      	b.n	80002e8 <SD_PowerOn+0x6c>
  {
    Count--;
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80002e8:	f7ff ff80 	bl	80001ec <SPI_RxByte>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d002      	beq.n	80002f8 <SD_PowerOn+0x7c>
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d1f4      	bne.n	80002e2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80002f8:	f7ff ff52 	bl	80001a0 <DESELECT>
  SPI_TxByte(0XFF);
 80002fc:	20ff      	movs	r0, #255	; 0xff
 80002fe:	f7ff ff5b 	bl	80001b8 <SPI_TxByte>

  PowerFlag = 1;
 8000302:	4b03      	ldr	r3, [pc, #12]	; (8000310 <SD_PowerOn+0x94>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
}
 8000308:	bf00      	nop
 800030a:	3718      	adds	r7, #24
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	200000b5 	.word	0x200000b5

08000314 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <SD_PowerOff+0x14>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	200000b5 	.word	0x200000b5

0800032c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000330:	4b02      	ldr	r3, [pc, #8]	; (800033c <SD_CheckPower+0x10>)
 8000332:	781b      	ldrb	r3, [r3, #0]
}
 8000334:	4618      	mov	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	200000b5 	.word	0x200000b5

08000340 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <SD_RxDataBlock+0x68>)
 800034c:	220a      	movs	r2, #10
 800034e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000350:	f7ff ff4c 	bl	80001ec <SPI_RxByte>
 8000354:	4603      	mov	r3, r0
 8000356:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000358:	7bfb      	ldrb	r3, [r7, #15]
 800035a:	2bff      	cmp	r3, #255	; 0xff
 800035c:	d104      	bne.n	8000368 <SD_RxDataBlock+0x28>
 800035e:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <SD_RxDataBlock+0x68>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	2b00      	cmp	r3, #0
 8000366:	d1f3      	bne.n	8000350 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	2bfe      	cmp	r3, #254	; 0xfe
 800036c:	d001      	beq.n	8000372 <SD_RxDataBlock+0x32>
    return FALSE;
 800036e:	2300      	movs	r3, #0
 8000370:	e016      	b.n	80003a0 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff55 	bl	8000228 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	1c5a      	adds	r2, r3, #1
 8000382:	607a      	str	r2, [r7, #4]
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff ff4f 	bl	8000228 <SPI_RxBytePtr>
  } while(btr -= 2);
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	3b02      	subs	r3, #2
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d1ed      	bne.n	8000372 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000396:	f7ff ff29 	bl	80001ec <SPI_RxByte>
  SPI_RxByte();
 800039a:	f7ff ff27 	bl	80001ec <SPI_RxByte>

  return TRUE;
 800039e:	2301      	movs	r3, #1
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20002535 	.word	0x20002535

080003ac <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80003bc:	f7ff ff42 	bl	8000244 <SD_ReadyWait>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2bff      	cmp	r3, #255	; 0xff
 80003c4:	d001      	beq.n	80003ca <SD_TxDataBlock+0x1e>
    return FALSE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	e040      	b.n	800044c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80003ca:	78fb      	ldrb	r3, [r7, #3]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff fef3 	bl	80001b8 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	2bfd      	cmp	r3, #253	; 0xfd
 80003d6:	d031      	beq.n	800043c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	1c5a      	adds	r2, r3, #1
 80003e0:	607a      	str	r2, [r7, #4]
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff fee7 	bl	80001b8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	1c5a      	adds	r2, r3, #1
 80003ee:	607a      	str	r2, [r7, #4]
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff fee0 	bl	80001b8 <SPI_TxByte>
    } while (--wc);
 80003f8:	7bbb      	ldrb	r3, [r7, #14]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	73bb      	strb	r3, [r7, #14]
 80003fe:	7bbb      	ldrb	r3, [r7, #14]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1eb      	bne.n	80003dc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000404:	f7ff fef2 	bl	80001ec <SPI_RxByte>
    SPI_RxByte();
 8000408:	f7ff fef0 	bl	80001ec <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 800040c:	e00b      	b.n	8000426 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800040e:	f7ff feed 	bl	80001ec <SPI_RxByte>
 8000412:	4603      	mov	r3, r0
 8000414:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	f003 031f 	and.w	r3, r3, #31
 800041c:	2b05      	cmp	r3, #5
 800041e:	d006      	beq.n	800042e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000420:	7b7b      	ldrb	r3, [r7, #13]
 8000422:	3301      	adds	r3, #1
 8000424:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000426:	7b7b      	ldrb	r3, [r7, #13]
 8000428:	2b40      	cmp	r3, #64	; 0x40
 800042a:	d9f0      	bls.n	800040e <SD_TxDataBlock+0x62>
 800042c:	e000      	b.n	8000430 <SD_TxDataBlock+0x84>
        break;
 800042e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() != 0);
 8000430:	bf00      	nop
 8000432:	f7ff fedb 	bl	80001ec <SPI_RxByte>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1fa      	bne.n	8000432 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	f003 031f 	and.w	r3, r3, #31
 8000442:	2b05      	cmp	r3, #5
 8000444:	d101      	bne.n	800044a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	6039      	str	r1, [r7, #0]
 800045e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000460:	f7ff fef0 	bl	8000244 <SD_ReadyWait>
 8000464:	4603      	mov	r3, r0
 8000466:	2bff      	cmp	r3, #255	; 0xff
 8000468:	d001      	beq.n	800046e <SD_SendCmd+0x1a>
    return 0xFF;
 800046a:	23ff      	movs	r3, #255	; 0xff
 800046c:	e040      	b.n	80004f0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fea1 	bl	80001b8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	0e1b      	lsrs	r3, r3, #24
 800047a:	b2db      	uxtb	r3, r3
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fe9b 	bl	80001b8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	0c1b      	lsrs	r3, r3, #16
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fe95 	bl	80001b8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	0a1b      	lsrs	r3, r3, #8
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff fe8f 	bl	80001b8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe8a 	bl	80001b8 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	2b40      	cmp	r3, #64	; 0x40
 80004ac:	d101      	bne.n	80004b2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80004ae:	2395      	movs	r3, #149	; 0x95
 80004b0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	2b48      	cmp	r3, #72	; 0x48
 80004b6:	d101      	bne.n	80004bc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80004b8:	2387      	movs	r3, #135	; 0x87
 80004ba:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff fe7a 	bl	80001b8 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2b4c      	cmp	r3, #76	; 0x4c
 80004c8:	d101      	bne.n	80004ce <SD_SendCmd+0x7a>
    SPI_RxByte();
 80004ca:	f7ff fe8f 	bl	80001ec <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80004ce:	230a      	movs	r3, #10
 80004d0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80004d2:	f7ff fe8b 	bl	80001ec <SPI_RxByte>
 80004d6:	4603      	mov	r3, r0
 80004d8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80004da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	da05      	bge.n	80004ee <SD_SendCmd+0x9a>
 80004e2:	7bbb      	ldrb	r3, [r7, #14]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	73bb      	strb	r3, [r7, #14]
 80004e8:	7bbb      	ldrb	r3, [r7, #14]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d1f1      	bne.n	80004d2 <SD_SendCmd+0x7e>

  return res;
 80004ee:	7b7b      	ldrb	r3, [r7, #13]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000508:	2301      	movs	r3, #1
 800050a:	e0d5      	b.n	80006b8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800050c:	4b6c      	ldr	r3, [pc, #432]	; (80006c0 <SD_disk_initialize+0x1c8>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	2b00      	cmp	r3, #0
 8000518:	d003      	beq.n	8000522 <SD_disk_initialize+0x2a>
    return Stat;
 800051a:	4b69      	ldr	r3, [pc, #420]	; (80006c0 <SD_disk_initialize+0x1c8>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	e0ca      	b.n	80006b8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000522:	f7ff feab 	bl	800027c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000526:	f7ff fe2f 	bl	8000188 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800052e:	2100      	movs	r1, #0
 8000530:	2040      	movs	r0, #64	; 0x40
 8000532:	f7ff ff8f 	bl	8000454 <SD_SendCmd>
 8000536:	4603      	mov	r3, r0
 8000538:	2b01      	cmp	r3, #1
 800053a:	f040 80a5 	bne.w	8000688 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800053e:	4b61      	ldr	r3, [pc, #388]	; (80006c4 <SD_disk_initialize+0x1cc>)
 8000540:	2264      	movs	r2, #100	; 0x64
 8000542:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000544:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000548:	2048      	movs	r0, #72	; 0x48
 800054a:	f7ff ff83 	bl	8000454 <SD_SendCmd>
 800054e:	4603      	mov	r3, r0
 8000550:	2b01      	cmp	r3, #1
 8000552:	d158      	bne.n	8000606 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	e00c      	b.n	8000574 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800055a:	7bfc      	ldrb	r4, [r7, #15]
 800055c:	f7ff fe46 	bl	80001ec <SPI_RxByte>
 8000560:	4603      	mov	r3, r0
 8000562:	461a      	mov	r2, r3
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4423      	add	r3, r4
 800056a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	3301      	adds	r3, #1
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	2b03      	cmp	r3, #3
 8000578:	d9ef      	bls.n	800055a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800057a:	7abb      	ldrb	r3, [r7, #10]
 800057c:	2b01      	cmp	r3, #1
 800057e:	f040 8083 	bne.w	8000688 <SD_disk_initialize+0x190>
 8000582:	7afb      	ldrb	r3, [r7, #11]
 8000584:	2baa      	cmp	r3, #170	; 0xaa
 8000586:	d17f      	bne.n	8000688 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000588:	2100      	movs	r1, #0
 800058a:	2077      	movs	r0, #119	; 0x77
 800058c:	f7ff ff62 	bl	8000454 <SD_SendCmd>
 8000590:	4603      	mov	r3, r0
 8000592:	2b01      	cmp	r3, #1
 8000594:	d807      	bhi.n	80005a6 <SD_disk_initialize+0xae>
 8000596:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800059a:	2069      	movs	r0, #105	; 0x69
 800059c:	f7ff ff5a 	bl	8000454 <SD_SendCmd>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d005      	beq.n	80005b2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80005a6:	4b47      	ldr	r3, [pc, #284]	; (80006c4 <SD_disk_initialize+0x1cc>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d1eb      	bne.n	8000588 <SD_disk_initialize+0x90>
 80005b0:	e000      	b.n	80005b4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80005b2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80005b4:	4b43      	ldr	r3, [pc, #268]	; (80006c4 <SD_disk_initialize+0x1cc>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d064      	beq.n	8000688 <SD_disk_initialize+0x190>
 80005be:	2100      	movs	r1, #0
 80005c0:	207a      	movs	r0, #122	; 0x7a
 80005c2:	f7ff ff47 	bl	8000454 <SD_SendCmd>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d15d      	bne.n	8000688 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00c      	b.n	80005ec <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80005d2:	7bfc      	ldrb	r4, [r7, #15]
 80005d4:	f7ff fe0a 	bl	80001ec <SPI_RxByte>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4423      	add	r3, r4
 80005e2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	3301      	adds	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d9ef      	bls.n	80005d2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80005f2:	7a3b      	ldrb	r3, [r7, #8]
 80005f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SD_disk_initialize+0x108>
 80005fc:	2306      	movs	r3, #6
 80005fe:	e000      	b.n	8000602 <SD_disk_initialize+0x10a>
 8000600:	2302      	movs	r3, #2
 8000602:	73bb      	strb	r3, [r7, #14]
 8000604:	e040      	b.n	8000688 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000606:	2100      	movs	r1, #0
 8000608:	2077      	movs	r0, #119	; 0x77
 800060a:	f7ff ff23 	bl	8000454 <SD_SendCmd>
 800060e:	4603      	mov	r3, r0
 8000610:	2b01      	cmp	r3, #1
 8000612:	d808      	bhi.n	8000626 <SD_disk_initialize+0x12e>
 8000614:	2100      	movs	r1, #0
 8000616:	2069      	movs	r0, #105	; 0x69
 8000618:	f7ff ff1c 	bl	8000454 <SD_SendCmd>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d801      	bhi.n	8000626 <SD_disk_initialize+0x12e>
 8000622:	2302      	movs	r3, #2
 8000624:	e000      	b.n	8000628 <SD_disk_initialize+0x130>
 8000626:	2301      	movs	r3, #1
 8000628:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d10e      	bne.n	800064e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000630:	2100      	movs	r1, #0
 8000632:	2077      	movs	r0, #119	; 0x77
 8000634:	f7ff ff0e 	bl	8000454 <SD_SendCmd>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d80e      	bhi.n	800065c <SD_disk_initialize+0x164>
 800063e:	2100      	movs	r1, #0
 8000640:	2069      	movs	r0, #105	; 0x69
 8000642:	f7ff ff07 	bl	8000454 <SD_SendCmd>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d107      	bne.n	800065c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800064c:	e00d      	b.n	800066a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800064e:	2100      	movs	r1, #0
 8000650:	2041      	movs	r0, #65	; 0x41
 8000652:	f7ff feff 	bl	8000454 <SD_SendCmd>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d005      	beq.n	8000668 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <SD_disk_initialize+0x1cc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1e1      	bne.n	800062a <SD_disk_initialize+0x132>
 8000666:	e000      	b.n	800066a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000668:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <SD_disk_initialize+0x1cc>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d007      	beq.n	8000684 <SD_disk_initialize+0x18c>
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	2050      	movs	r0, #80	; 0x50
 800067a:	f7ff feeb 	bl	8000454 <SD_SendCmd>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000688:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <SD_disk_initialize+0x1d0>)
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800068e:	f7ff fd87 	bl	80001a0 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000692:	f7ff fdab 	bl	80001ec <SPI_RxByte>

  if (type)
 8000696:	7bbb      	ldrb	r3, [r7, #14]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d008      	beq.n	80006ae <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <SD_disk_initialize+0x1c8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f023 0301 	bic.w	r3, r3, #1
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <SD_disk_initialize+0x1c8>)
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e001      	b.n	80006b2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80006ae:	f7ff fe31 	bl	8000314 <SD_PowerOff>
  }

  return Stat;
 80006b2:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <SD_disk_initialize+0x1c8>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b2db      	uxtb	r3, r3
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	20000010 	.word	0x20000010
 80006c4:	20002535 	.word	0x20002535
 80006c8:	200000b4 	.word	0x200000b4

080006cc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SD_disk_status+0x14>
    return STA_NOINIT;
 80006dc:	2301      	movs	r3, #1
 80006de:	e002      	b.n	80006e6 <SD_disk_status+0x1a>

  return Stat;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <SD_disk_status+0x24>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000010 	.word	0x20000010

080006f4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4603      	mov	r3, r0
 8000702:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d102      	bne.n	8000710 <SD_disk_read+0x1c>
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <SD_disk_read+0x20>
    return RES_PARERR;
 8000710:	2304      	movs	r3, #4
 8000712:	e051      	b.n	80007b8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000714:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <SD_disk_read+0xcc>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000722:	2303      	movs	r3, #3
 8000724:	e048      	b.n	80007b8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <SD_disk_read+0xd0>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	2b00      	cmp	r3, #0
 8000730:	d102      	bne.n	8000738 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	025b      	lsls	r3, r3, #9
 8000736:	607b      	str	r3, [r7, #4]

  SELECT();
 8000738:	f7ff fd26 	bl	8000188 <SELECT>

  if (count == 1)
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d111      	bne.n	8000766 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	2051      	movs	r0, #81	; 0x51
 8000746:	f7ff fe85 	bl	8000454 <SD_SendCmd>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d129      	bne.n	80007a4 <SD_disk_read+0xb0>
 8000750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000754:	68b8      	ldr	r0, [r7, #8]
 8000756:	f7ff fdf3 	bl	8000340 <SD_RxDataBlock>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d021      	beq.n	80007a4 <SD_disk_read+0xb0>
      count = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	e01e      	b.n	80007a4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	2052      	movs	r0, #82	; 0x52
 800076a:	f7ff fe73 	bl	8000454 <SD_SendCmd>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d117      	bne.n	80007a4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000778:	68b8      	ldr	r0, [r7, #8]
 800077a:	f7ff fde1 	bl	8000340 <SD_RxDataBlock>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00a      	beq.n	800079a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800078a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3b01      	subs	r3, #1
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1ed      	bne.n	8000774 <SD_disk_read+0x80>
 8000798:	e000      	b.n	800079c <SD_disk_read+0xa8>
          break;
 800079a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800079c:	2100      	movs	r1, #0
 800079e:	204c      	movs	r0, #76	; 0x4c
 80007a0:	f7ff fe58 	bl	8000454 <SD_SendCmd>
    }
  }

  DESELECT();
 80007a4:	f7ff fcfc 	bl	80001a0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80007a8:	f7ff fd20 	bl	80001ec <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf14      	ite	ne
 80007b2:	2301      	movne	r3, #1
 80007b4:	2300      	moveq	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000010 	.word	0x20000010
 80007c4:	200000b4 	.word	0x200000b4

080007c8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <SD_disk_write+0x1c>
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d101      	bne.n	80007e8 <SD_disk_write+0x20>
    return RES_PARERR;
 80007e4:	2304      	movs	r3, #4
 80007e6:	e06b      	b.n	80008c0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <SD_disk_write+0x100>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SD_disk_write+0x32>
    return RES_NOTRDY;
 80007f6:	2303      	movs	r3, #3
 80007f8:	e062      	b.n	80008c0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <SD_disk_write+0x100>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SD_disk_write+0x44>
    return RES_WRPRT;
 8000808:	2302      	movs	r3, #2
 800080a:	e059      	b.n	80008c0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <SD_disk_write+0x104>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	025b      	lsls	r3, r3, #9
 800081c:	607b      	str	r3, [r7, #4]

  SELECT();
 800081e:	f7ff fcb3 	bl	8000188 <SELECT>

  if (count == 1)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d110      	bne.n	800084a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	2058      	movs	r0, #88	; 0x58
 800082c:	f7ff fe12 	bl	8000454 <SD_SendCmd>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d13a      	bne.n	80008ac <SD_disk_write+0xe4>
 8000836:	21fe      	movs	r1, #254	; 0xfe
 8000838:	68b8      	ldr	r0, [r7, #8]
 800083a:	f7ff fdb7 	bl	80003ac <SD_TxDataBlock>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d033      	beq.n	80008ac <SD_disk_write+0xe4>
      count = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	e030      	b.n	80008ac <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <SD_disk_write+0x104>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	2b00      	cmp	r3, #0
 8000854:	d007      	beq.n	8000866 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000856:	2100      	movs	r1, #0
 8000858:	2077      	movs	r0, #119	; 0x77
 800085a:	f7ff fdfb 	bl	8000454 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800085e:	6839      	ldr	r1, [r7, #0]
 8000860:	2057      	movs	r0, #87	; 0x57
 8000862:	f7ff fdf7 	bl	8000454 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	2059      	movs	r0, #89	; 0x59
 800086a:	f7ff fdf3 	bl	8000454 <SD_SendCmd>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d11b      	bne.n	80008ac <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000874:	21fc      	movs	r1, #252	; 0xfc
 8000876:	68b8      	ldr	r0, [r7, #8]
 8000878:	f7ff fd98 	bl	80003ac <SD_TxDataBlock>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d00a      	beq.n	8000898 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000888:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	3b01      	subs	r3, #1
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d1ee      	bne.n	8000874 <SD_disk_write+0xac>
 8000896:	e000      	b.n	800089a <SD_disk_write+0xd2>
          break;
 8000898:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800089a:	21fd      	movs	r1, #253	; 0xfd
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fd85 	bl	80003ac <SD_TxDataBlock>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <SD_disk_write+0xe4>
      {
        count = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80008ac:	f7ff fc78 	bl	80001a0 <DESELECT>
  SPI_RxByte();
 80008b0:	f7ff fc9c 	bl	80001ec <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000010 	.word	0x20000010
 80008cc:	200000b4 	.word	0x200000b4

080008d0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b08b      	sub	sp, #44	; 0x2c
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	603a      	str	r2, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	460b      	mov	r3, r1
 80008de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80008ea:	2304      	movs	r3, #4
 80008ec:	e11b      	b.n	8000b26 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80008f4:	79bb      	ldrb	r3, [r7, #6]
 80008f6:	2b05      	cmp	r3, #5
 80008f8:	d129      	bne.n	800094e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d017      	beq.n	8000932 <SD_disk_ioctl+0x62>
 8000902:	2b02      	cmp	r3, #2
 8000904:	dc1f      	bgt.n	8000946 <SD_disk_ioctl+0x76>
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <SD_disk_ioctl+0x40>
 800090a:	2b01      	cmp	r3, #1
 800090c:	d00b      	beq.n	8000926 <SD_disk_ioctl+0x56>
 800090e:	e01a      	b.n	8000946 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000910:	f7ff fd0c 	bl	800032c <SD_CheckPower>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800091a:	f7ff fcfb 	bl	8000314 <SD_PowerOff>
      res = RES_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000924:	e0fd      	b.n	8000b22 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000926:	f7ff fca9 	bl	800027c <SD_PowerOn>
      res = RES_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000930:	e0f7      	b.n	8000b22 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	1c5c      	adds	r4, r3, #1
 8000936:	f7ff fcf9 	bl	800032c <SD_CheckPower>
 800093a:	4603      	mov	r3, r0
 800093c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800093e:	2300      	movs	r3, #0
 8000940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000944:	e0ed      	b.n	8000b22 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000946:	2304      	movs	r3, #4
 8000948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800094c:	e0e9      	b.n	8000b22 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800094e:	4b78      	ldr	r3, [pc, #480]	; (8000b30 <SD_disk_ioctl+0x260>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800095c:	2303      	movs	r3, #3
 800095e:	e0e2      	b.n	8000b26 <SD_disk_ioctl+0x256>

    SELECT();
 8000960:	f7ff fc12 	bl	8000188 <SELECT>

    switch (ctrl)
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	2b0d      	cmp	r3, #13
 8000968:	f200 80cc 	bhi.w	8000b04 <SD_disk_ioctl+0x234>
 800096c:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <SD_disk_ioctl+0xa4>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	08000a6f 	.word	0x08000a6f
 8000978:	080009ad 	.word	0x080009ad
 800097c:	08000a5f 	.word	0x08000a5f
 8000980:	08000b05 	.word	0x08000b05
 8000984:	08000b05 	.word	0x08000b05
 8000988:	08000b05 	.word	0x08000b05
 800098c:	08000b05 	.word	0x08000b05
 8000990:	08000b05 	.word	0x08000b05
 8000994:	08000b05 	.word	0x08000b05
 8000998:	08000b05 	.word	0x08000b05
 800099c:	08000b05 	.word	0x08000b05
 80009a0:	08000a81 	.word	0x08000a81
 80009a4:	08000aa5 	.word	0x08000aa5
 80009a8:	08000ac9 	.word	0x08000ac9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80009ac:	2100      	movs	r1, #0
 80009ae:	2049      	movs	r0, #73	; 0x49
 80009b0:	f7ff fd50 	bl	8000454 <SD_SendCmd>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 80a8 	bne.w	8000b0c <SD_disk_ioctl+0x23c>
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2110      	movs	r1, #16
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fcbc 	bl	8000340 <SD_RxDataBlock>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 809e 	beq.w	8000b0c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80009d0:	7b3b      	ldrb	r3, [r7, #12]
 80009d2:	099b      	lsrs	r3, r3, #6
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d10e      	bne.n	80009f8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80009da:	7d7b      	ldrb	r3, [r7, #21]
 80009dc:	b29a      	uxth	r2, r3
 80009de:	7d3b      	ldrb	r3, [r7, #20]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4413      	add	r3, r2
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	3301      	adds	r3, #1
 80009ec:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80009ee:	8bfb      	ldrh	r3, [r7, #30]
 80009f0:	029a      	lsls	r2, r3, #10
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	e02e      	b.n	8000a56 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009f8:	7c7b      	ldrb	r3, [r7, #17]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	7dbb      	ldrb	r3, [r7, #22]
 8000a02:	09db      	lsrs	r3, r3, #7
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4413      	add	r3, r2
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	7d7b      	ldrb	r3, [r7, #21]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f003 0306 	and.w	r3, r3, #6
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4413      	add	r3, r2
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000a20:	7d3b      	ldrb	r3, [r7, #20]
 8000a22:	099b      	lsrs	r3, r3, #6
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	7cfb      	ldrb	r3, [r7, #19]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	4413      	add	r3, r2
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	7cbb      	ldrb	r3, [r7, #18]
 8000a36:	029b      	lsls	r3, r3, #10
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	4413      	add	r3, r2
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	3301      	adds	r3, #1
 8000a46:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000a48:	8bfa      	ldrh	r2, [r7, #30]
 8000a4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a4e:	3b09      	subs	r3, #9
 8000a50:	409a      	lsls	r2, r3
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000a5c:	e056      	b.n	8000b0c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a6c:	e055      	b.n	8000b1a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000a6e:	f7ff fbe9 	bl	8000244 <SD_ReadyWait>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2bff      	cmp	r3, #255	; 0xff
 8000a76:	d14b      	bne.n	8000b10 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a7e:	e047      	b.n	8000b10 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a80:	2100      	movs	r1, #0
 8000a82:	2049      	movs	r0, #73	; 0x49
 8000a84:	f7ff fce6 	bl	8000454 <SD_SendCmd>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d142      	bne.n	8000b14 <SD_disk_ioctl+0x244>
 8000a8e:	2110      	movs	r1, #16
 8000a90:	6a38      	ldr	r0, [r7, #32]
 8000a92:	f7ff fc55 	bl	8000340 <SD_RxDataBlock>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d03b      	beq.n	8000b14 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000aa2:	e037      	b.n	8000b14 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	204a      	movs	r0, #74	; 0x4a
 8000aa8:	f7ff fcd4 	bl	8000454 <SD_SendCmd>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d132      	bne.n	8000b18 <SD_disk_ioctl+0x248>
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	6a38      	ldr	r0, [r7, #32]
 8000ab6:	f7ff fc43 	bl	8000340 <SD_RxDataBlock>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d02b      	beq.n	8000b18 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ac6:	e027      	b.n	8000b18 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	207a      	movs	r0, #122	; 0x7a
 8000acc:	f7ff fcc2 	bl	8000454 <SD_SendCmd>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d116      	bne.n	8000b04 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000adc:	e00b      	b.n	8000af6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000ade:	6a3c      	ldr	r4, [r7, #32]
 8000ae0:	1c63      	adds	r3, r4, #1
 8000ae2:	623b      	str	r3, [r7, #32]
 8000ae4:	f7ff fb82 	bl	80001ec <SPI_RxByte>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000aec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000af0:	3301      	adds	r3, #1
 8000af2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000af6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d9ef      	bls.n	8000ade <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000b04:	2304      	movs	r3, #4
 8000b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b0a:	e006      	b.n	8000b1a <SD_disk_ioctl+0x24a>
      break;
 8000b0c:	bf00      	nop
 8000b0e:	e004      	b.n	8000b1a <SD_disk_ioctl+0x24a>
      break;
 8000b10:	bf00      	nop
 8000b12:	e002      	b.n	8000b1a <SD_disk_ioctl+0x24a>
      break;
 8000b14:	bf00      	nop
 8000b16:	e000      	b.n	8000b1a <SD_disk_ioctl+0x24a>
      break;
 8000b18:	bf00      	nop
    }

    DESELECT();
 8000b1a:	f7ff fb41 	bl	80001a0 <DESELECT>
    SPI_RxByte();
 8000b1e:	f7ff fb65 	bl	80001ec <SPI_RxByte>
  }

  return res;
 8000b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	372c      	adds	r7, #44	; 0x2c
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000010 	.word	0x20000010

08000b34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d013      	beq.n	8000b74 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00b      	beq.n	8000b74 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b5c:	e000      	b.n	8000b60 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f9      	beq.n	8000b5e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b6a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <_write>:
	for (int i=0; i<1024; i++)
		buffer[i] = '\0';
}

int _write(int file, char *ptr, int len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
	int i=0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e009      	b.n	8000baa <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	60ba      	str	r2, [r7, #8]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffc8 	bl	8000b34 <ITM_SendChar>
	for (i=0; i<len; i++)
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dbf1      	blt.n	8000b96 <_write+0x16>
	}
	return len;
 8000bb2:	687b      	ldr	r3, [r7, #4]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc2:	f000 fd6b 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f8bb 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f000 fa5b 	bl	8001084 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bce:	f000 f913 	bl	8000df8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000bd2:	f000 f94f 	bl	8000e74 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000bd6:	f000 f983 	bl	8000ee0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bda:	f000 f9d7 	bl	8000f8c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000bde:	f000 fa27 	bl	8001030 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000be2:	f002 fee7 	bl	80039b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  fresult = f_mount(&fs, "", 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	4949      	ldr	r1, [pc, #292]	; (8000d10 <main+0x154>)
 8000bea:	484a      	ldr	r0, [pc, #296]	; (8000d14 <main+0x158>)
 8000bec:	f005 fc70 	bl	80064d0 <f_mount>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b48      	ldr	r3, [pc, #288]	; (8000d18 <main+0x15c>)
 8000bf6:	701a      	strb	r2, [r3, #0]
  if (fresult!=FR_OK)
 8000bf8:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <main+0x15c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <main+0x4c>
	  printf("error in mounting SD Card...\n");
 8000c00:	4846      	ldr	r0, [pc, #280]	; (8000d1c <main+0x160>)
 8000c02:	f007 fa87 	bl	8008114 <puts>
 8000c06:	e002      	b.n	8000c0e <main+0x52>
  else
	  printf("SD Card mounted sucessfully...\n");
 8000c08:	4845      	ldr	r0, [pc, #276]	; (8000d20 <main+0x164>)
 8000c0a:	f007 fa83 	bl	8008114 <puts>
	  STATE_22_SENSOR2_FUNC,
	  STATE_23_SENSOR3_FUNC,
	  STATE_3_SAVE_DATA
  } main_state_machine;

  uint8_t opt = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	71bb      	strb	r3, [r7, #6]
  uint8_t b = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	717b      	strb	r3, [r7, #5]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(main_state_machine)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b05      	cmp	r3, #5
 8000c1a:	d8fc      	bhi.n	8000c16 <main+0x5a>
 8000c1c:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <main+0x68>)
 8000c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c22:	bf00      	nop
 8000c24:	08000c3d 	.word	0x08000c3d
 8000c28:	08000cc7 	.word	0x08000cc7
 8000c2c:	08000c17 	.word	0x08000c17
 8000c30:	08000c17 	.word	0x08000c17
 8000c34:	08000c17 	.word	0x08000c17
 8000c38:	08000c17 	.word	0x08000c17
	  {
	  case STATE_0_INIT_PERIPHERALS:
		  init_peripherals();
 8000c3c:	f000 fa88 	bl	8001150 <init_peripherals>

		  fresult = f_open(&fil, "arquivo.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000c40:	2213      	movs	r2, #19
 8000c42:	4938      	ldr	r1, [pc, #224]	; (8000d24 <main+0x168>)
 8000c44:	4838      	ldr	r0, [pc, #224]	; (8000d28 <main+0x16c>)
 8000c46:	f005 fc8d 	bl	8006564 <f_open>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <main+0x15c>)
 8000c50:	701a      	strb	r2, [r3, #0]

		  fresult = f_lseek(&fil, fil.fsize);
 8000c52:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <main+0x16c>)
 8000c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c58:	330c      	adds	r3, #12
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4832      	ldr	r0, [pc, #200]	; (8000d28 <main+0x16c>)
 8000c60:	f006 fd4c 	bl	80076fc <f_lseek>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <main+0x15c>)
 8000c6a:	701a      	strb	r2, [r3, #0]

		  fresult = f_puts("mathias\n",&fil);
 8000c6c:	492e      	ldr	r1, [pc, #184]	; (8000d28 <main+0x16c>)
 8000c6e:	482f      	ldr	r0, [pc, #188]	; (8000d2c <main+0x170>)
 8000c70:	f007 f8b5 	bl	8007dde <f_puts>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <main+0x15c>)
 8000c7a:	701a      	strb	r2, [r3, #0]

		  fresult = f_close(&fil);
 8000c7c:	482a      	ldr	r0, [pc, #168]	; (8000d28 <main+0x16c>)
 8000c7e:	f006 fd12 	bl	80076a6 <f_close>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <main+0x15c>)
 8000c88:	701a      	strb	r2, [r3, #0]

		  fresult = f_open(&fil, "arquivo.txt", FA_READ);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4925      	ldr	r1, [pc, #148]	; (8000d24 <main+0x168>)
 8000c8e:	4826      	ldr	r0, [pc, #152]	; (8000d28 <main+0x16c>)
 8000c90:	f005 fc68 	bl	8006564 <f_open>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <main+0x15c>)
 8000c9a:	701a      	strb	r2, [r3, #0]

		  //f_gets(buffer, fil.fsize, &fil);

		  f_read(&fil, buffer, fil.fsize, &br);
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <main+0x16c>)
 8000c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ca2:	330c      	adds	r3, #12
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <main+0x174>)
 8000ca8:	4922      	ldr	r1, [pc, #136]	; (8000d34 <main+0x178>)
 8000caa:	481f      	ldr	r0, [pc, #124]	; (8000d28 <main+0x16c>)
 8000cac:	f005 ff94 	bl	8006bd8 <f_read>

		  fresult = f_close(&fil);
 8000cb0:	481d      	ldr	r0, [pc, #116]	; (8000d28 <main+0x16c>)
 8000cb2:	f006 fcf8 	bl	80076a6 <f_close>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <main+0x15c>)
 8000cbc:	701a      	strb	r2, [r3, #0]

		  main_state_machine++;
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	71fb      	strb	r3, [r7, #7]
		  break;
 8000cc4:	e022      	b.n	8000d0c <main+0x150>

	  case STATE_1_WAIT_COMAND:
		  do {
			  lcd.print_sensors_menu(opt);
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <main+0x17c>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	79ba      	ldrb	r2, [r7, #6]
 8000ccc:	4610      	mov	r0, r2
 8000cce:	4798      	blx	r3

			  b = buttons.get_pressed_button();
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <main+0x180>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4798      	blx	r3
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	717b      	strb	r3, [r7, #5]

			  switch(b)
 8000cda:	797b      	ldrb	r3, [r7, #5]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d008      	beq.n	8000cf2 <main+0x136>
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d110      	bne.n	8000d06 <main+0x14a>
			  {
			  case UP_BUTTON:
				  if (opt<1)
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10a      	bne.n	8000d00 <main+0x144>
					  opt++;
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	3301      	adds	r3, #1
 8000cee:	71bb      	strb	r3, [r7, #6]
				  break;
 8000cf0:	e006      	b.n	8000d00 <main+0x144>
			  case DOWN_BUTTON:
				  if (opt>0)
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d005      	beq.n	8000d04 <main+0x148>
					  opt--;
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	71bb      	strb	r3, [r7, #6]
				  break;
 8000cfe:	e001      	b.n	8000d04 <main+0x148>
				  break;
 8000d00:	bf00      	nop
 8000d02:	e000      	b.n	8000d06 <main+0x14a>
				  break;
 8000d04:	bf00      	nop
			  }
		  } while(b =! ENTER_BUTTON);
 8000d06:	2301      	movs	r3, #1
 8000d08:	717b      	strb	r3, [r7, #5]
	  case STATE_1_WAIT_COMAND:
 8000d0a:	e7dc      	b.n	8000cc6 <main+0x10a>
	  switch(main_state_machine)
 8000d0c:	e783      	b.n	8000c16 <main+0x5a>
 8000d0e:	bf00      	nop
 8000d10:	080089d4 	.word	0x080089d4
 8000d14:	200002f4 	.word	0x200002f4
 8000d18:	2000145c 	.word	0x2000145c
 8000d1c:	080089d8 	.word	0x080089d8
 8000d20:	080089f8 	.word	0x080089f8
 8000d24:	08008a18 	.word	0x08008a18
 8000d28:	20001508 	.word	0x20001508
 8000d2c:	08008a24 	.word	0x08008a24
 8000d30:	20001328 	.word	0x20001328
 8000d34:	200013a8 	.word	0x200013a8
 8000d38:	20000004 	.word	0x20000004
 8000d3c:	20000000 	.word	0x20000000

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	; 0x50
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4a:	2228      	movs	r2, #40	; 0x28
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f007 f96a 	bl	8008028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d70:	2301      	movs	r3, #1
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d82:	2302      	movs	r3, #2
 8000d84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d8c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 f998 	bl	80020cc <HAL_RCC_OscConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000da2:	f000 f9cf 	bl	8001144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	230f      	movs	r3, #15
 8000da8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fc02 	bl	80025cc <HAL_RCC_ClockConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000dce:	f000 f9b9 	bl	8001144 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dda:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 fd8e 	bl	8002900 <HAL_RCCEx_PeriphCLKConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dea:	f000 f9ab 	bl	8001144 <Error_Handler>
  }
}
 8000dee:	bf00      	nop
 8000df0:	3750      	adds	r7, #80	; 0x50
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_ADC1_Init+0x74>)
 8000e0a:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <MX_ADC1_Init+0x78>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_ADC1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_ADC1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ADC1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_ADC1_Init+0x74>)
 8000e22:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <MX_ADC1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_ADC1_Init+0x74>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_ADC1_Init+0x74>)
 8000e36:	f000 fcb7 	bl	80017a8 <HAL_ADC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e40:	f000 f980 	bl	8001144 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_ADC1_Init+0x74>)
 8000e56:	f000 fd7f 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e60:	f000 f970 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000132c 	.word	0x2000132c
 8000e70:	40012400 	.word	0x40012400

08000e74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <MX_SPI1_Init+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000ec0:	220a      	movs	r2, #10
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000ec6:	f001 fdd1 	bl	8002a6c <HAL_SPI_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ed0:	f000 f938 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20001460 	.word	0x20001460
 8000edc:	40013000 	.word	0x40013000

08000ee0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_TIM1_Init+0xa4>)
 8000efe:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <MX_TIM1_Init+0xa8>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <MX_TIM1_Init+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_TIM1_Init+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <MX_TIM1_Init+0xa4>)
 8000f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_TIM1_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_TIM1_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_TIM1_Init+0xa4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f28:	4816      	ldr	r0, [pc, #88]	; (8000f84 <MX_TIM1_Init+0xa4>)
 8000f2a:	f002 f9b5 	bl	8003298 <HAL_TIM_IC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f34:	f000 f906 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	480f      	ldr	r0, [pc, #60]	; (8000f84 <MX_TIM1_Init+0xa4>)
 8000f48:	f002 fbfa 	bl	8003740 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f52:	f000 f8f7 	bl	8001144 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_TIM1_Init+0xa4>)
 8000f6e:	f002 f9e2 	bl	8003336 <HAL_TIM_IC_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000f78:	f000 f8e4 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000140c 	.word	0x2000140c
 8000f88:	40012c00 	.word	0x40012c00

08000f8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <MX_TIM2_Init+0xa0>)
 8000faa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_TIM2_Init+0xa0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <MX_TIM2_Init+0xa0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <MX_TIM2_Init+0xa0>)
 8000fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_TIM2_Init+0xa0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <MX_TIM2_Init+0xa0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000fd0:	4816      	ldr	r0, [pc, #88]	; (800102c <MX_TIM2_Init+0xa0>)
 8000fd2:	f002 f961 	bl	8003298 <HAL_TIM_IC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fdc:	f000 f8b2 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4619      	mov	r1, r3
 8000fee:	480f      	ldr	r0, [pc, #60]	; (800102c <MX_TIM2_Init+0xa0>)
 8000ff0:	f002 fba6 	bl	8003740 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ffa:	f000 f8a3 	bl	8001144 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ffe:	2302      	movs	r3, #2
 8001000:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001002:	2301      	movs	r3, #1
 8001004:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_TIM2_Init+0xa0>)
 8001016:	f002 f98e 	bl	8003336 <HAL_TIM_IC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001020:	f000 f890 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200014b8 	.word	0x200014b8

08001030 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_USART1_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_USART1_UART_Init+0x4c>)
 800103c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001040:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_USART1_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_USART1_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001068:	f002 fbc8 	bl	80037fc <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 f867 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20001364 	.word	0x20001364
 8001080:	40013800 	.word	0x40013800

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <MX_GPIO_Init+0xb4>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a26      	ldr	r2, [pc, #152]	; (8001138 <MX_GPIO_Init+0xb4>)
 800109e:	f043 0320 	orr.w	r3, r3, #32
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <MX_GPIO_Init+0xb4>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0320 	and.w	r3, r3, #32
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_GPIO_Init+0xb4>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a20      	ldr	r2, [pc, #128]	; (8001138 <MX_GPIO_Init+0xb4>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_GPIO_Init+0xb4>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_GPIO_Init+0xb4>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a1a      	ldr	r2, [pc, #104]	; (8001138 <MX_GPIO_Init+0xb4>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_GPIO_Init+0xb4>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LCD_RS_Pin|D4_Pin|D5_Pin
 80010e0:	2200      	movs	r2, #0
 80010e2:	21f9      	movs	r1, #249	; 0xf9
 80010e4:	4815      	ldr	r0, [pc, #84]	; (800113c <MX_GPIO_Init+0xb8>)
 80010e6:	f000 ffd9 	bl	800209c <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_E_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <MX_GPIO_Init+0xbc>)
 80010f2:	f000 ffd3 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin LCD_RS_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LCD_RS_Pin|D4_Pin|D5_Pin
 80010f6:	23f9      	movs	r3, #249	; 0xf9
 80010f8:	613b      	str	r3, [r7, #16]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2302      	movs	r3, #2
 8001104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <MX_GPIO_Init+0xb8>)
 800110e:	f000 fe41 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RW_Pin;
 8001112:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2302      	movs	r3, #2
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_GPIO_Init+0xbc>)
 800112c:	f000 fe32 	bl	8001d94 <HAL_GPIO_Init>

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000
 800113c:	40010c00 	.word	0x40010c00
 8001140:	40010800 	.word	0x40010800

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	e7fe      	b.n	800114c <Error_Handler+0x8>
	...

08001150 <init_peripherals>:
 *      Author: mathias
 */
#include "main_state_machine_functions.h"

void init_peripherals()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	lcd.init();
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <init_peripherals+0x28>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4798      	blx	r3
	HAL_Delay(10);
 800115a:	200a      	movs	r0, #10
 800115c:	f000 fb00 	bl	8001760 <HAL_Delay>
	lcd.init();
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <init_peripherals+0x28>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4798      	blx	r3
	HAL_Delay(10);
 8001166:	200a      	movs	r0, #10
 8001168:	f000 fafa 	bl	8001760 <HAL_Delay>

	lcd.clean();
 800116c:	4b02      	ldr	r3, [pc, #8]	; (8001178 <init_peripherals+0x28>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4798      	blx	r3
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_MspInit+0x5c>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <HAL_MspInit+0x5c>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_MspInit+0x5c>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_MspInit+0x5c>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_MspInit+0x5c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_MspInit+0x5c>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_MspInit+0x60>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_MspInit+0x60>)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000

080011e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <HAL_ADC_MspInit+0x6c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d121      	bne.n	8001244 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_ADC_MspInit+0x70>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <HAL_ADC_MspInit+0x70>)
 8001206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_ADC_MspInit+0x70>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_ADC_MspInit+0x70>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <HAL_ADC_MspInit+0x70>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_ADC_MspInit+0x70>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001230:	2301      	movs	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001234:	2303      	movs	r3, #3
 8001236:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_ADC_MspInit+0x74>)
 8001240:	f000 fda8 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40012400 	.word	0x40012400
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800

08001258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d12f      	bne.n	80012d8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 800127e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012a8:	23a0      	movs	r3, #160	; 0xa0
 80012aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <HAL_SPI_MspInit+0x90>)
 80012bc:	f000 fd6a 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012c0:	2340      	movs	r3, #64	; 0x40
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_SPI_MspInit+0x90>)
 80012d4:	f000 fd5e 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40013000 	.word	0x40013000
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010800 	.word	0x40010800

080012ec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a34      	ldr	r2, [pc, #208]	; (80013d8 <HAL_TIM_IC_MspInit+0xec>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d125      	bne.n	8001358 <HAL_TIM_IC_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130c:	4b33      	ldr	r3, [pc, #204]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a32      	ldr	r2, [pc, #200]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 8001312:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a2c      	ldr	r2, [pc, #176]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800133c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4823      	ldr	r0, [pc, #140]	; (80013e0 <HAL_TIM_IC_MspInit+0xf4>)
 8001352:	f000 fd1f 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001356:	e03b      	b.n	80013d0 <HAL_TIM_IC_MspInit+0xe4>
  else if(htim_ic->Instance==TIM2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001360:	d136      	bne.n	80013d0 <HAL_TIM_IC_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	61d3      	str	r3, [r2, #28]
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6193      	str	r3, [r2, #24]
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_TIM_IC_MspInit+0xf0>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	480e      	ldr	r0, [pc, #56]	; (80013e0 <HAL_TIM_IC_MspInit+0xf4>)
 80013a8:	f000 fcf4 	bl	8001d94 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80013ac:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_TIM_IC_MspInit+0xf8>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_TIM_IC_MspInit+0xf8>)
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	6053      	str	r3, [r2, #4]
}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40012c00 	.word	0x40012c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010800 	.word	0x40010800
 80013e4:	40010000 	.word	0x40010000

080013e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <HAL_UART_MspInit+0x8c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d131      	bne.n	800146c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_UART_MspInit+0x90>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <HAL_UART_MspInit+0x90>)
 800140e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_UART_MspInit+0x90>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_UART_MspInit+0x90>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_UART_MspInit+0x90>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_UART_MspInit+0x90>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4619      	mov	r1, r3
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <HAL_UART_MspInit+0x94>)
 800144e:	f000 fca1 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4619      	mov	r1, r3
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_UART_MspInit+0x94>)
 8001468:	f000 fc94 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40013800 	.word	0x40013800
 8001478:	40021000 	.word	0x40021000
 800147c:	40010800 	.word	0x40010800

08001480 <SDTimer_Handler>:

volatile uint8_t Timer1, Timer2;                    /* 10ms 마다 감소하는 타이머 */
volatile uint8_t FatFsCnt = 0;

void SDTimer_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <SDTimer_Handler+0x3c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <SDTimer_Handler+0x1c>
		Timer1--;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <SDTimer_Handler+0x3c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	3b01      	subs	r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <SDTimer_Handler+0x3c>)
 800149a:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <SDTimer_Handler+0x40>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <SDTimer_Handler+0x34>
		Timer2--;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SDTimer_Handler+0x40>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	3b01      	subs	r3, #1
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <SDTimer_Handler+0x40>)
 80014b2:	701a      	strb	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20002535 	.word	0x20002535
 80014c0:	20002534 	.word	0x20002534

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
	...

08001508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <SysTick_Handler+0x30>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	3301      	adds	r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <SysTick_Handler+0x30>)
 8001518:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <SysTick_Handler+0x30>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b09      	cmp	r3, #9
 8001522:	d904      	bls.n	800152e <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Handler+0x30>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800152a:	f7ff ffa9 	bl	8001480 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 f8fb 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000b6 	.word	0x200000b6

0800153c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e00a      	b.n	8001564 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800154e:	f3af 8000 	nop.w
 8001552:	4601      	mov	r1, r0
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	60ba      	str	r2, [r7, #8]
 800155a:	b2ca      	uxtb	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	dbf0      	blt.n	800154e <_read+0x12>
	}

return len;
 800156c:	687b      	ldr	r3, [r7, #4]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
	return -1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800159c:	605a      	str	r2, [r3, #4]
	return 0;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <_isatty>:

int _isatty(int file)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	return 1;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
	return 0;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
	...

080015d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001608:	f006 fce4 	bl	8007fd4 <__errno>
 800160c:	4603      	mov	r3, r0
 800160e:	220c      	movs	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20005000 	.word	0x20005000
 8001638:	00000400 	.word	0x00000400
 800163c:	200000b8 	.word	0x200000b8
 8001640:	200045b0 	.word	0x200045b0

08001644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	; (8001688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	; (8001694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001676:	f7ff ffe5 	bl	8001644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167a:	f006 fcb1 	bl	8007fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800167e:	f7ff fa9d 	bl	8000bbc <main>
  bx lr
 8001682:	4770      	bx	lr
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800168c:	0800905c 	.word	0x0800905c
  ldr r2, =_sbss
 8001690:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001694:	200045b0 	.word	0x200045b0

08001698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x28>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x28>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 fb3d 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	200f      	movs	r0, #15
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fd60 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fb47 	bl	8001d7a <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001704:	f000 fb1d 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000014 	.word	0x20000014
 8001720:	2000001c 	.word	0x2000001c
 8001724:	20000018 	.word	0x20000018

08001728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_IncTick+0x1c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x20>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_IncTick+0x20>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	2000001c 	.word	0x2000001c
 8001748:	20002538 	.word	0x20002538

0800174c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <HAL_GetTick+0x10>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20002538 	.word	0x20002538

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff fff0 	bl	800174c <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffe0 	bl	800174c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000001c 	.word	0x2000001c

080017a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0be      	b.n	8001948 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fcfa 	bl	80011e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f9ab 	bl	8001b48 <ADC_ConversionStop_Disable>
 80017f2:	4603      	mov	r3, r0
 80017f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 8099 	bne.w	8001936 <HAL_ADC_Init+0x18e>
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 8095 	bne.w	8001936 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001814:	f023 0302 	bic.w	r3, r3, #2
 8001818:	f043 0202 	orr.w	r2, r3, #2
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001828:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7b1b      	ldrb	r3, [r3, #12]
 800182e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001830:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	4313      	orrs	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001840:	d003      	beq.n	800184a <HAL_ADC_Init+0xa2>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d102      	bne.n	8001850 <HAL_ADC_Init+0xa8>
 800184a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184e:	e000      	b.n	8001852 <HAL_ADC_Init+0xaa>
 8001850:	2300      	movs	r3, #0
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7d1b      	ldrb	r3, [r3, #20]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d119      	bne.n	8001894 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7b1b      	ldrb	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	3b01      	subs	r3, #1
 800186e:	035a      	lsls	r2, r3, #13
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	e00b      	b.n	8001894 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	f043 0220 	orr.w	r2, r3, #32
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	4b28      	ldr	r3, [pc, #160]	; (8001950 <HAL_ADC_Init+0x1a8>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c4:	d003      	beq.n	80018ce <HAL_ADC_Init+0x126>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d104      	bne.n	80018d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	051b      	lsls	r3, r3, #20
 80018d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_ADC_Init+0x1ac>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d10b      	bne.n	8001914 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f023 0303 	bic.w	r3, r3, #3
 800190a:	f043 0201 	orr.w	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001912:	e018      	b.n	8001946 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	f023 0312 	bic.w	r3, r3, #18
 800191c:	f043 0210 	orr.w	r2, r3, #16
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001934:	e007      	b.n	8001946 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001946:	7dfb      	ldrb	r3, [r7, #23]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	ffe1f7fd 	.word	0xffe1f7fd
 8001954:	ff1f0efe 	.word	0xff1f0efe

08001958 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x20>
 8001974:	2302      	movs	r3, #2
 8001976:	e0dc      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x1da>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b06      	cmp	r3, #6
 8001986:	d81c      	bhi.n	80019c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b05      	subs	r3, #5
 800199a:	221f      	movs	r2, #31
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4019      	ands	r1, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	3b05      	subs	r3, #5
 80019b4:	fa00 f203 	lsl.w	r2, r0, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	635a      	str	r2, [r3, #52]	; 0x34
 80019c0:	e03c      	b.n	8001a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d81c      	bhi.n	8001a04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3b23      	subs	r3, #35	; 0x23
 80019dc:	221f      	movs	r2, #31
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4019      	ands	r1, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b23      	subs	r3, #35	; 0x23
 80019f6:	fa00 f203 	lsl.w	r2, r0, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
 8001a02:	e01b      	b.n	8001a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b41      	subs	r3, #65	; 0x41
 8001a16:	221f      	movs	r2, #31
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4019      	ands	r1, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b41      	subs	r3, #65	; 0x41
 8001a30:	fa00 f203 	lsl.w	r2, r0, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	d91c      	bls.n	8001a7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68d9      	ldr	r1, [r3, #12]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	3b1e      	subs	r3, #30
 8001a56:	2207      	movs	r2, #7
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4019      	ands	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6898      	ldr	r0, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b1e      	subs	r3, #30
 8001a70:	fa00 f203 	lsl.w	r2, r0, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	e019      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6919      	ldr	r1, [r3, #16]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2207      	movs	r2, #7
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4019      	ands	r1, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6898      	ldr	r0, [r3, #8]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d003      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001abe:	2b11      	cmp	r3, #17
 8001ac0:	d132      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d125      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d126      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ae8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d11a      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0c9a      	lsrs	r2, r3, #18
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b08:	e002      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f9      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x1b2>
 8001b16:	e007      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40012400 	.word	0x40012400
 8001b40:	20000014 	.word	0x20000014
 8001b44:	431bde83 	.word	0x431bde83

08001b48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d12e      	bne.n	8001bc0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b72:	f7ff fdeb 	bl	800174c <HAL_GetTick>
 8001b76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b78:	e01b      	b.n	8001bb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b7a:	f7ff fde7 	bl	800174c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d914      	bls.n	8001bb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d10d      	bne.n	8001bb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	f043 0210 	orr.w	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e007      	b.n	8001bc2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d0dc      	beq.n	8001b7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <__NVIC_SetPriorityGrouping>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_SetPriority>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Config>:
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d0c:	f7ff ff90 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff49 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff5e 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff90 	bl	8001c84 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5f 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffb0 	bl	8001ce8 <SysTick_Config>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b08b      	sub	sp, #44	; 0x2c
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da6:	e169      	b.n	800207c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001da8:	2201      	movs	r2, #1
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	f040 8158 	bne.w	8002076 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a9a      	ldr	r2, [pc, #616]	; (8002034 <HAL_GPIO_Init+0x2a0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d05e      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001dd0:	4a98      	ldr	r2, [pc, #608]	; (8002034 <HAL_GPIO_Init+0x2a0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d875      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dd6:	4a98      	ldr	r2, [pc, #608]	; (8002038 <HAL_GPIO_Init+0x2a4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d058      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001ddc:	4a96      	ldr	r2, [pc, #600]	; (8002038 <HAL_GPIO_Init+0x2a4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d86f      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001de2:	4a96      	ldr	r2, [pc, #600]	; (800203c <HAL_GPIO_Init+0x2a8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d052      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001de8:	4a94      	ldr	r2, [pc, #592]	; (800203c <HAL_GPIO_Init+0x2a8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d869      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dee:	4a94      	ldr	r2, [pc, #592]	; (8002040 <HAL_GPIO_Init+0x2ac>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d04c      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001df4:	4a92      	ldr	r2, [pc, #584]	; (8002040 <HAL_GPIO_Init+0x2ac>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d863      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dfa:	4a92      	ldr	r2, [pc, #584]	; (8002044 <HAL_GPIO_Init+0x2b0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d046      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001e00:	4a90      	ldr	r2, [pc, #576]	; (8002044 <HAL_GPIO_Init+0x2b0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d85d      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001e06:	2b12      	cmp	r3, #18
 8001e08:	d82a      	bhi.n	8001e60 <HAL_GPIO_Init+0xcc>
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d859      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <HAL_GPIO_Init+0x80>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e8f 	.word	0x08001e8f
 8001e18:	08001e69 	.word	0x08001e69
 8001e1c:	08001e7b 	.word	0x08001e7b
 8001e20:	08001ebd 	.word	0x08001ebd
 8001e24:	08001ec3 	.word	0x08001ec3
 8001e28:	08001ec3 	.word	0x08001ec3
 8001e2c:	08001ec3 	.word	0x08001ec3
 8001e30:	08001ec3 	.word	0x08001ec3
 8001e34:	08001ec3 	.word	0x08001ec3
 8001e38:	08001ec3 	.word	0x08001ec3
 8001e3c:	08001ec3 	.word	0x08001ec3
 8001e40:	08001ec3 	.word	0x08001ec3
 8001e44:	08001ec3 	.word	0x08001ec3
 8001e48:	08001ec3 	.word	0x08001ec3
 8001e4c:	08001ec3 	.word	0x08001ec3
 8001e50:	08001ec3 	.word	0x08001ec3
 8001e54:	08001ec3 	.word	0x08001ec3
 8001e58:	08001e71 	.word	0x08001e71
 8001e5c:	08001e85 	.word	0x08001e85
 8001e60:	4a79      	ldr	r2, [pc, #484]	; (8002048 <HAL_GPIO_Init+0x2b4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e66:	e02c      	b.n	8001ec2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e029      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	3304      	adds	r3, #4
 8001e76:	623b      	str	r3, [r7, #32]
          break;
 8001e78:	e024      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	3308      	adds	r3, #8
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e01f      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	330c      	adds	r3, #12
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e01a      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e96:	2304      	movs	r3, #4
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e013      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	611a      	str	r2, [r3, #16]
          break;
 8001eae:	e009      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	615a      	str	r2, [r3, #20]
          break;
 8001eba:	e003      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e000      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          break;
 8001ec2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2bff      	cmp	r3, #255	; 0xff
 8001ec8:	d801      	bhi.n	8001ece <HAL_GPIO_Init+0x13a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	e001      	b.n	8001ed2 <HAL_GPIO_Init+0x13e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2bff      	cmp	r3, #255	; 0xff
 8001ed8:	d802      	bhi.n	8001ee0 <HAL_GPIO_Init+0x14c>
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x152>
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	3b08      	subs	r3, #8
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	210f      	movs	r1, #15
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	6a39      	ldr	r1, [r7, #32]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80b1 	beq.w	8002076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f14:	4b4d      	ldr	r3, [pc, #308]	; (800204c <HAL_GPIO_Init+0x2b8>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a4c      	ldr	r2, [pc, #304]	; (800204c <HAL_GPIO_Init+0x2b8>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b4a      	ldr	r3, [pc, #296]	; (800204c <HAL_GPIO_Init+0x2b8>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f2c:	4a48      	ldr	r2, [pc, #288]	; (8002050 <HAL_GPIO_Init+0x2bc>)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a40      	ldr	r2, [pc, #256]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <HAL_GPIO_Init+0x1ec>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	; (8002058 <HAL_GPIO_Init+0x2c4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00d      	beq.n	8001f7c <HAL_GPIO_Init+0x1e8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3e      	ldr	r2, [pc, #248]	; (800205c <HAL_GPIO_Init+0x2c8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <HAL_GPIO_Init+0x1e4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3d      	ldr	r2, [pc, #244]	; (8002060 <HAL_GPIO_Init+0x2cc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_GPIO_Init+0x1e0>
 8001f70:	2303      	movs	r3, #3
 8001f72:	e006      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f74:	2304      	movs	r3, #4
 8001f76:	e004      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e002      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f80:	2300      	movs	r3, #0
 8001f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f84:	f002 0203 	and.w	r2, r2, #3
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	4093      	lsls	r3, r2
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f92:	492f      	ldr	r1, [pc, #188]	; (8002050 <HAL_GPIO_Init+0x2bc>)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	492c      	ldr	r1, [pc, #176]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4928      	ldr	r1, [pc, #160]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd4:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4922      	ldr	r1, [pc, #136]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	491e      	ldr	r1, [pc, #120]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	4918      	ldr	r1, [pc, #96]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	4914      	ldr	r1, [pc, #80]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8002014:	4013      	ands	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d021      	beq.n	8002068 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	490e      	ldr	r1, [pc, #56]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	60cb      	str	r3, [r1, #12]
 8002030:	e021      	b.n	8002076 <HAL_GPIO_Init+0x2e2>
 8002032:	bf00      	nop
 8002034:	10320000 	.word	0x10320000
 8002038:	10310000 	.word	0x10310000
 800203c:	10220000 	.word	0x10220000
 8002040:	10210000 	.word	0x10210000
 8002044:	10120000 	.word	0x10120000
 8002048:	10110000 	.word	0x10110000
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	40010800 	.word	0x40010800
 8002058:	40010c00 	.word	0x40010c00
 800205c:	40011000 	.word	0x40011000
 8002060:	40011400 	.word	0x40011400
 8002064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_GPIO_Init+0x304>)
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	43db      	mvns	r3, r3
 8002070:	4909      	ldr	r1, [pc, #36]	; (8002098 <HAL_GPIO_Init+0x304>)
 8002072:	4013      	ands	r3, r2
 8002074:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	3301      	adds	r3, #1
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	f47f ae8e 	bne.w	8001da8 <HAL_GPIO_Init+0x14>
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	372c      	adds	r7, #44	; 0x2c
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	40010400 	.word	0x40010400

0800209c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
 80020a8:	4613      	mov	r3, r2
 80020aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020b8:	e003      	b.n	80020c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	041a      	lsls	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e26c      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8087 	beq.w	80021fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ec:	4b92      	ldr	r3, [pc, #584]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d00c      	beq.n	8002112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f8:	4b8f      	ldr	r3, [pc, #572]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d112      	bne.n	800212a <HAL_RCC_OscConfig+0x5e>
 8002104:	4b8c      	ldr	r3, [pc, #560]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d10b      	bne.n	800212a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002112:	4b89      	ldr	r3, [pc, #548]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d06c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x12c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d168      	bne.n	80021f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e246      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x76>
 8002134:	4b80      	ldr	r3, [pc, #512]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a7f      	ldr	r2, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800213a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e02e      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x98>
 800214a:	4b7b      	ldr	r3, [pc, #492]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7a      	ldr	r2, [pc, #488]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b78      	ldr	r3, [pc, #480]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a77      	ldr	r2, [pc, #476]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e01d      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0xbc>
 800216e:	4b72      	ldr	r3, [pc, #456]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a71      	ldr	r2, [pc, #452]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b6f      	ldr	r3, [pc, #444]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6e      	ldr	r2, [pc, #440]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002188:	4b6b      	ldr	r3, [pc, #428]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a6a      	ldr	r2, [pc, #424]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b68      	ldr	r3, [pc, #416]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a67      	ldr	r2, [pc, #412]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff fad0 	bl	800174c <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7ff facc 	bl	800174c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1fa      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0xe4>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fabc 	bl	800174c <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff fab8 	bl	800174c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1e6      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	4b53      	ldr	r3, [pc, #332]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x10c>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d063      	beq.n	80022ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002206:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002212:	4b49      	ldr	r3, [pc, #292]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b08      	cmp	r3, #8
 800221c:	d11c      	bne.n	8002258 <HAL_RCC_OscConfig+0x18c>
 800221e:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d116      	bne.n	8002258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	4b43      	ldr	r3, [pc, #268]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x176>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e1ba      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4939      	ldr	r1, [pc, #228]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	e03a      	b.n	80022ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff fa71 	bl	800174c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7ff fa6d 	bl	800174c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e19b      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4927      	ldr	r1, [pc, #156]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fa50 	bl	800174c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b0:	f7ff fa4c 	bl	800174c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e17a      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d03a      	beq.n	8002350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d019      	beq.n	8002316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e8:	f7ff fa30 	bl	800174c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f0:	f7ff fa2c 	bl	800174c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e15a      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800230e:	2001      	movs	r0, #1
 8002310:	f000 fad8 	bl	80028c4 <RCC_Delay>
 8002314:	e01c      	b.n	8002350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7ff fa16 	bl	800174c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002322:	e00f      	b.n	8002344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7ff fa12 	bl	800174c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d908      	bls.n	8002344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e140      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	42420000 	.word	0x42420000
 8002340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	4b9e      	ldr	r3, [pc, #632]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e9      	bne.n	8002324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80a6 	beq.w	80024aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002362:	4b97      	ldr	r3, [pc, #604]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b94      	ldr	r3, [pc, #592]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4a93      	ldr	r2, [pc, #588]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	61d3      	str	r3, [r2, #28]
 800237a:	4b91      	ldr	r3, [pc, #580]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b8e      	ldr	r3, [pc, #568]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a8a      	ldr	r2, [pc, #552]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7ff f9d3 	bl	800174c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7ff f9cf 	bl	800174c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b64      	cmp	r3, #100	; 0x64
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0fd      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4b81      	ldr	r3, [pc, #516]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x312>
 80023d0:	4b7b      	ldr	r3, [pc, #492]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a7a      	ldr	r2, [pc, #488]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	e02d      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x334>
 80023e6:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a75      	ldr	r2, [pc, #468]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a72      	ldr	r2, [pc, #456]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	e01c      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0x356>
 8002408:	4b6d      	ldr	r3, [pc, #436]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a6c      	ldr	r2, [pc, #432]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4a69      	ldr	r2, [pc, #420]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6213      	str	r3, [r2, #32]
 8002420:	e00b      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 8002422:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a66      	ldr	r2, [pc, #408]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	4b64      	ldr	r3, [pc, #400]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a63      	ldr	r2, [pc, #396]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d015      	beq.n	800246e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff f983 	bl	800174c <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7ff f97f 	bl	800174c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0ab      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	4b57      	ldr	r3, [pc, #348]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ee      	beq.n	800244a <HAL_RCC_OscConfig+0x37e>
 800246c:	e014      	b.n	8002498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7ff f96d 	bl	800174c <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7ff f969 	bl	800174c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e095      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248c:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ee      	bne.n	8002476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d105      	bne.n	80024aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249e:	4b48      	ldr	r3, [pc, #288]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a47      	ldr	r2, [pc, #284]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8081 	beq.w	80025b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b4:	4b42      	ldr	r3, [pc, #264]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d061      	beq.n	8002584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d146      	bne.n	8002556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_RCC_OscConfig+0x4fc>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7ff f93d 	bl	800174c <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7ff f939 	bl	800174c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e067      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e8:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024fe:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	492d      	ldr	r1, [pc, #180]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a19      	ldr	r1, [r3, #32]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	430b      	orrs	r3, r1
 8002522:	4927      	ldr	r1, [pc, #156]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x4fc>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7ff f90d 	bl	800174c <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7ff f909 	bl	800174c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e037      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x46a>
 8002554:	e02f      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <HAL_RCC_OscConfig+0x4fc>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff f8f6 	bl	800174c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7ff f8f2 	bl	800174c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e020      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x498>
 8002582:	e018      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e013      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42420060 	.word	0x42420060

080025cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0d0      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b6a      	ldr	r3, [pc, #424]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d910      	bls.n	8002610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	4965      	ldr	r1, [pc, #404]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b63      	ldr	r3, [pc, #396]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0b8      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a58      	ldr	r2, [pc, #352]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002632:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002640:	4b53      	ldr	r3, [pc, #332]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800264a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264c:	4b50      	ldr	r3, [pc, #320]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	494d      	ldr	r1, [pc, #308]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d040      	beq.n	80026ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d115      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e07f      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e073      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e06b      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f023 0203 	bic.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4936      	ldr	r1, [pc, #216]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026bc:	f7ff f846 	bl	800174c <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7ff f842 	bl	800174c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e053      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 020c 	and.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1eb      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d210      	bcs.n	800271c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4922      	ldr	r1, [pc, #136]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e032      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4916      	ldr	r1, [pc, #88]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	490e      	ldr	r1, [pc, #56]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275a:	f000 f821 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 800275e:	4602      	mov	r2, r0
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	490a      	ldr	r1, [pc, #40]	; (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 800276c:	5ccb      	ldrb	r3, [r1, r3]
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1cc>)
 8002774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1d0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe ffa4 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40022000 	.word	0x40022000
 8002790:	40021000 	.word	0x40021000
 8002794:	08008a88 	.word	0x08008a88
 8002798:	20000014 	.word	0x20000014
 800279c:	20000018 	.word	0x20000018

080027a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	b490      	push	{r4, r7}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027a6:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027a8:	1d3c      	adds	r4, r7, #4
 80027aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027b0:	f240 2301 	movw	r3, #513	; 0x201
 80027b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d002      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x40>
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d003      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0x46>
 80027de:	e02d      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e2:	623b      	str	r3, [r7, #32]
      break;
 80027e4:	e02d      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	0c9b      	lsrs	r3, r3, #18
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027f2:	4413      	add	r3, r2
 80027f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	0c5b      	lsrs	r3, r3, #17
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002812:	4413      	add	r3, r2
 8002814:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002818:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 800281e:	fb02 f203 	mul.w	r2, r2, r3
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	e004      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	623b      	str	r3, [r7, #32]
      break;
 800283a:	e002      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 800283e:	623b      	str	r3, [r7, #32]
      break;
 8002840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002842:	6a3b      	ldr	r3, [r7, #32]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bc90      	pop	{r4, r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	08008a30 	.word	0x08008a30
 8002854:	40021000 	.word	0x40021000
 8002858:	007a1200 	.word	0x007a1200
 800285c:	003d0900 	.word	0x003d0900

08002860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b02      	ldr	r3, [pc, #8]	; (8002870 <HAL_RCC_GetHCLKFreq+0x10>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	20000014 	.word	0x20000014

08002874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002878:	f7ff fff2 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 800287c:	4602      	mov	r2, r0
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	4903      	ldr	r1, [pc, #12]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800288a:	5ccb      	ldrb	r3, [r1, r3]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	08008a98 	.word	0x08008a98

0800289c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028a0:	f7ff ffde 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0adb      	lsrs	r3, r3, #11
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4903      	ldr	r1, [pc, #12]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	08008a98 	.word	0x08008a98

080028c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <RCC_Delay+0x34>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <RCC_Delay+0x38>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0a5b      	lsrs	r3, r3, #9
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e0:	bf00      	nop
  }
  while (Delay --);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	60fa      	str	r2, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f9      	bne.n	80028e0 <RCC_Delay+0x1c>
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000014 	.word	0x20000014
 80028fc:	10624dd3 	.word	0x10624dd3

08002900 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d07d      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800291c:	2300      	movs	r3, #0
 800291e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002920:	4b4f      	ldr	r3, [pc, #316]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10d      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292c:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	4a4b      	ldr	r2, [pc, #300]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	61d3      	str	r3, [r2, #28]
 8002938:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002944:	2301      	movs	r3, #1
 8002946:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b46      	ldr	r3, [pc, #280]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d118      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002954:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a42      	ldr	r2, [pc, #264]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800295a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002960:	f7fe fef4 	bl	800174c <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	e008      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002968:	f7fe fef0 	bl	800174c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e06d      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002986:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d02e      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d027      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a4:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029b4:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029ba:	4a29      	ldr	r2, [pc, #164]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d014      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe febf 	bl	800174c <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe febb 	bl	800174c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e036      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ee      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4917      	ldr	r1, [pc, #92]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d105      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a24:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	490b      	ldr	r1, [pc, #44]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	4904      	ldr	r1, [pc, #16]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
 8002a68:	42420440 	.word	0x42420440

08002a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e076      	b.n	8002b6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d108      	bne.n	8002a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8e:	d009      	beq.n	8002aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
 8002a96:	e005      	b.n	8002aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fbca 	bl	8001258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ada:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	ea42 0103 	orr.w	r1, r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	0c1a      	lsrs	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f002 0204 	and.w	r2, r2, #4
 8002b4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_SPI_Transmit+0x22>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e126      	b.n	8002de4 <HAL_SPI_Transmit+0x270>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b9e:	f7fe fdd5 	bl	800174c <HAL_GetTick>
 8002ba2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d002      	beq.n	8002bba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bb8:	e10b      	b.n	8002dd2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_SPI_Transmit+0x52>
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bca:	e102      	b.n	8002dd2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c12:	d10f      	bne.n	8002c34 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	d007      	beq.n	8002c52 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c5a:	d14b      	bne.n	8002cf4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_SPI_Transmit+0xf6>
 8002c64:	8afb      	ldrh	r3, [r7, #22]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d13e      	bne.n	8002ce8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	881a      	ldrh	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	1c9a      	adds	r2, r3, #2
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c8e:	e02b      	b.n	8002ce8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d112      	bne.n	8002cc4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	881a      	ldrh	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	1c9a      	adds	r2, r3, #2
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cc2:	e011      	b.n	8002ce8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc4:	f7fe fd42 	bl	800174c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d803      	bhi.n	8002cdc <HAL_SPI_Transmit+0x168>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cda:	d102      	bne.n	8002ce2 <HAL_SPI_Transmit+0x16e>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ce6:	e074      	b.n	8002dd2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1ce      	bne.n	8002c90 <HAL_SPI_Transmit+0x11c>
 8002cf2:	e04c      	b.n	8002d8e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_SPI_Transmit+0x18e>
 8002cfc:	8afb      	ldrh	r3, [r7, #22]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d140      	bne.n	8002d84 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d28:	e02c      	b.n	8002d84 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d113      	bne.n	8002d60 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	7812      	ldrb	r2, [r2, #0]
 8002d44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d5e:	e011      	b.n	8002d84 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d60:	f7fe fcf4 	bl	800174c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d803      	bhi.n	8002d78 <HAL_SPI_Transmit+0x204>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d76:	d102      	bne.n	8002d7e <HAL_SPI_Transmit+0x20a>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d82:	e026      	b.n	8002dd2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1cd      	bne.n	8002d2a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	6839      	ldr	r1, [r7, #0]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fa62 	bl	800325c <SPI_EndRxTxTransaction>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	77fb      	strb	r3, [r7, #31]
 8002dce:	e000      	b.n	8002dd2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002dd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002de2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08c      	sub	sp, #48	; 0x30
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x26>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e18a      	b.n	8003128 <HAL_SPI_TransmitReceive+0x33c>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e1a:	f7fe fc97 	bl	800174c <HAL_GetTick>
 8002e1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e30:	887b      	ldrh	r3, [r7, #2]
 8002e32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d00f      	beq.n	8002e5c <HAL_SPI_TransmitReceive+0x70>
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e42:	d107      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d103      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x68>
 8002e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d003      	beq.n	8002e5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e54:	2302      	movs	r3, #2
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e5a:	e15b      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_SPI_TransmitReceive+0x82>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_SPI_TransmitReceive+0x82>
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e74:	e14e      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d003      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2205      	movs	r2, #5
 8002e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	887a      	ldrh	r2, [r7, #2]
 8002e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	887a      	ldrh	r2, [r7, #2]
 8002eb2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	d007      	beq.n	8002ede <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee6:	d178      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_SPI_TransmitReceive+0x10a>
 8002ef0:	8b7b      	ldrh	r3, [r7, #26]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d166      	bne.n	8002fc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	881a      	ldrh	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	1c9a      	adds	r2, r3, #2
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f1a:	e053      	b.n	8002fc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d11b      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x176>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d016      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x176>
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d113      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	881a      	ldrh	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	1c9a      	adds	r2, r3, #2
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d119      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x1b8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d014      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	b292      	uxth	r2, r2
 8002f86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	1c9a      	adds	r2, r3, #2
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fa4:	f7fe fbd2 	bl	800174c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d807      	bhi.n	8002fc4 <HAL_SPI_TransmitReceive+0x1d8>
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fba:	d003      	beq.n	8002fc4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fc2:	e0a7      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1a6      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x130>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1a1      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x130>
 8002fd8:	e07c      	b.n	80030d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_SPI_TransmitReceive+0x1fc>
 8002fe2:	8b7b      	ldrh	r3, [r7, #26]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d16b      	bne.n	80030c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800300e:	e057      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d11c      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x26c>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d017      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x26c>
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302a:	2b01      	cmp	r3, #1
 800302c:	d114      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	7812      	ldrb	r2, [r2, #0]
 800303a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d119      	bne.n	800309a <HAL_SPI_TransmitReceive+0x2ae>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d014      	beq.n	800309a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003096:	2301      	movs	r3, #1
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800309a:	f7fe fb57 	bl	800174c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d803      	bhi.n	80030b2 <HAL_SPI_TransmitReceive+0x2c6>
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b0:	d102      	bne.n	80030b8 <HAL_SPI_TransmitReceive+0x2cc>
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d103      	bne.n	80030c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030be:	e029      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1a2      	bne.n	8003010 <HAL_SPI_TransmitReceive+0x224>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d19d      	bne.n	8003010 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f8bf 	bl	800325c <SPI_EndRxTxTransaction>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030f0:	e010      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10b      	bne.n	8003112 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	e000      	b.n	8003114 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003112:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003124:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003128:	4618      	mov	r0, r3
 800312a:	3730      	adds	r7, #48	; 0x30
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800313e:	b2db      	uxtb	r3, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
	...

0800314c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800315c:	f7fe faf6 	bl	800174c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	4413      	add	r3, r2
 800316a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800316c:	f7fe faee 	bl	800174c <HAL_GetTick>
 8003170:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003172:	4b39      	ldr	r3, [pc, #228]	; (8003258 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	015b      	lsls	r3, r3, #5
 8003178:	0d1b      	lsrs	r3, r3, #20
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003182:	e054      	b.n	800322e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318a:	d050      	beq.n	800322e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800318c:	f7fe fade 	bl	800174c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	429a      	cmp	r2, r3
 800319a:	d902      	bls.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d13d      	bne.n	800321e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ba:	d111      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c4:	d004      	beq.n	80031d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d107      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e8:	d10f      	bne.n	800320a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e017      	b.n	800324e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3b01      	subs	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4013      	ands	r3, r2
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	429a      	cmp	r2, r3
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	429a      	cmp	r2, r3
 800324a:	d19b      	bne.n	8003184 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000014 	.word	0x20000014

0800325c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7ff ff6a 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003282:	f043 0220 	orr.w	r2, r3, #32
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e000      	b.n	8003290 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e041      	b.n	800332e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe f814 	bl	80012ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 f8c2 	bl	8003460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_TIM_IC_ConfigChannel+0x1a>
 800334c:	2302      	movs	r3, #2
 800334e:	e082      	b.n	8003456 <HAL_TIM_IC_ConfigChannel+0x120>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11b      	bne.n	8003396 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f000 f8d9 	bl	8003524 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 020c 	bic.w	r2, r2, #12
 8003380:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6999      	ldr	r1, [r3, #24]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	619a      	str	r2, [r3, #24]
 8003394:	e05a      	b.n	800344c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11c      	bne.n	80033d6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	6819      	ldr	r1, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f000 f914 	bl	80035d8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033be:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6999      	ldr	r1, [r3, #24]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	021a      	lsls	r2, r3, #8
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	619a      	str	r2, [r3, #24]
 80033d4:	e03a      	b.n	800344c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d11b      	bne.n	8003414 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f000 f930 	bl	8003650 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 020c 	bic.w	r2, r2, #12
 80033fe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69d9      	ldr	r1, [r3, #28]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	61da      	str	r2, [r3, #28]
 8003412:	e01b      	b.n	800344c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f000 f94f 	bl	80036c6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003436:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69d9      	ldr	r1, [r3, #28]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	021a      	lsls	r2, r3, #8
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a29      	ldr	r2, [pc, #164]	; (8003518 <TIM_Base_SetConfig+0xb8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00b      	beq.n	8003490 <TIM_Base_SetConfig+0x30>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d007      	beq.n	8003490 <TIM_Base_SetConfig+0x30>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a26      	ldr	r2, [pc, #152]	; (800351c <TIM_Base_SetConfig+0xbc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d003      	beq.n	8003490 <TIM_Base_SetConfig+0x30>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a25      	ldr	r2, [pc, #148]	; (8003520 <TIM_Base_SetConfig+0xc0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d108      	bne.n	80034a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <TIM_Base_SetConfig+0xb8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00b      	beq.n	80034c2 <TIM_Base_SetConfig+0x62>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d007      	beq.n	80034c2 <TIM_Base_SetConfig+0x62>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a19      	ldr	r2, [pc, #100]	; (800351c <TIM_Base_SetConfig+0xbc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d003      	beq.n	80034c2 <TIM_Base_SetConfig+0x62>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a18      	ldr	r2, [pc, #96]	; (8003520 <TIM_Base_SetConfig+0xc0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d108      	bne.n	80034d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a07      	ldr	r2, [pc, #28]	; (8003518 <TIM_Base_SetConfig+0xb8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d103      	bne.n	8003508 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	615a      	str	r2, [r3, #20]
}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800

08003524 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f023 0201 	bic.w	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <TIM_TI1_SetConfig+0xa8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00b      	beq.n	800356a <TIM_TI1_SetConfig+0x46>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d007      	beq.n	800356a <TIM_TI1_SetConfig+0x46>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <TIM_TI1_SetConfig+0xac>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_TI1_SetConfig+0x46>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <TIM_TI1_SetConfig+0xb0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d101      	bne.n	800356e <TIM_TI1_SetConfig+0x4a>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <TIM_TI1_SetConfig+0x4c>
 800356e:	2300      	movs	r3, #0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 0303 	bic.w	r3, r3, #3
 800357a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e003      	b.n	800358e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	b2db      	uxtb	r3, r3
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f023 030a 	bic.w	r3, r3, #10
 80035a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f003 030a 	and.w	r3, r3, #10
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr
 80035cc:	40012c00 	.word	0x40012c00
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800

080035d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0210 	bic.w	r2, r3, #16
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003616:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	031b      	lsls	r3, r3, #12
 800361c:	b29b      	uxth	r3, r3
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800362a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f023 0303 	bic.w	r3, r3, #3
 800367c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800368c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	b2db      	uxtb	r3, r3
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	621a      	str	r2, [r3, #32]
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr

080036c6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b087      	sub	sp, #28
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003704:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	031b      	lsls	r3, r3, #12
 800370a:	b29b      	uxth	r3, r3
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003718:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	031b      	lsls	r3, r3, #12
 800371e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	621a      	str	r2, [r3, #32]
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
	...

08003740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003754:	2302      	movs	r3, #2
 8003756:	e046      	b.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a4:	d009      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10c      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	40012c00 	.word	0x40012c00
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800

080037fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e03f      	b.n	800388e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd fde0 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800383e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f829 	bl	8003898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038d2:	f023 030c 	bic.w	r3, r3, #12
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	430b      	orrs	r3, r1
 80038de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2c      	ldr	r2, [pc, #176]	; (80039ac <UART_SetConfig+0x114>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d103      	bne.n	8003908 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7fe ffcc 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	e002      	b.n	800390e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003908:	f7fe ffb4 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 800390c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	009a      	lsls	r2, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <UART_SetConfig+0x118>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	0119      	lsls	r1, r3, #4
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009a      	lsls	r2, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fbb2 f2f3 	udiv	r2, r2, r3
 8003944:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <UART_SetConfig+0x118>)
 8003946:	fba3 0302 	umull	r0, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2064      	movs	r0, #100	; 0x64
 800394e:	fb00 f303 	mul.w	r3, r0, r3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	3332      	adds	r3, #50	; 0x32
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <UART_SetConfig+0x118>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003964:	4419      	add	r1, r3
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009a      	lsls	r2, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fbb2 f2f3 	udiv	r2, r2, r3
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <UART_SetConfig+0x118>)
 800397e:	fba3 0302 	umull	r0, r3, r3, r2
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	2064      	movs	r0, #100	; 0x64
 8003986:	fb00 f303 	mul.w	r3, r0, r3
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	3332      	adds	r3, #50	; 0x32
 8003990:	4a07      	ldr	r2, [pc, #28]	; (80039b0 <UART_SetConfig+0x118>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	f003 020f 	and.w	r2, r3, #15
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	440a      	add	r2, r1
 80039a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40013800 	.word	0x40013800
 80039b0:	51eb851f 	.word	0x51eb851f

080039b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80039b8:	4904      	ldr	r1, [pc, #16]	; (80039cc <MX_FATFS_Init+0x18>)
 80039ba:	4805      	ldr	r0, [pc, #20]	; (80039d0 <MX_FATFS_Init+0x1c>)
 80039bc:	f004 fa92 	bl	8007ee4 <FATFS_LinkDriver>
 80039c0:	4603      	mov	r3, r0
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <MX_FATFS_Init+0x20>)
 80039c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	2000253c 	.word	0x2000253c
 80039d0:	20000020 	.word	0x20000020
 80039d4:	20002540 	.word	0x20002540

080039d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80039dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80039de:	4618      	mov	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fd80 	bl	80004f8 <SD_disk_initialize>
 80039f8:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fe5c 	bl	80006cc <SD_disk_status>
 8003a14:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003a2e:	7bf8      	ldrb	r0, [r7, #15]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	f7fc fe5d 	bl	80006f4 <SD_disk_read>
 8003a3a:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	4603      	mov	r3, r0
 8003a52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003a54:	7bf8      	ldrb	r0, [r7, #15]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	f7fc feb4 	bl	80007c8 <SD_disk_write>
 8003a60:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	4603      	mov	r3, r0
 8003a72:	603a      	str	r2, [r7, #0]
 8003a74:	71fb      	strb	r3, [r7, #7]
 8003a76:	460b      	mov	r3, r1
 8003a78:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003a7a:	79b9      	ldrb	r1, [r7, #6]
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fc ff25 	bl	80008d0 <SD_disk_ioctl>
 8003a86:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	4a08      	ldr	r2, [pc, #32]	; (8003ac0 <disk_status+0x30>)
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	79fa      	ldrb	r2, [r7, #7]
 8003aa8:	4905      	ldr	r1, [pc, #20]	; (8003ac0 <disk_status+0x30>)
 8003aaa:	440a      	add	r2, r1
 8003aac:	7a12      	ldrb	r2, [r2, #8]
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4798      	blx	r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200002dc 	.word	0x200002dc

08003ac4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <disk_initialize+0x48>)
 8003ad6:	5cd3      	ldrb	r3, [r2, r3]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d111      	bne.n	8003b00 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <disk_initialize+0x48>)
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <disk_initialize+0x48>)
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	79fa      	ldrb	r2, [r7, #7]
 8003af2:	4906      	ldr	r1, [pc, #24]	; (8003b0c <disk_initialize+0x48>)
 8003af4:	440a      	add	r2, r1
 8003af6:	7a12      	ldrb	r2, [r2, #8]
 8003af8:	4610      	mov	r0, r2
 8003afa:	4798      	blx	r3
 8003afc:	4603      	mov	r3, r0
 8003afe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200002dc 	.word	0x200002dc

08003b10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <disk_read+0x3c>)
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	689c      	ldr	r4, [r3, #8]
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <disk_read+0x3c>)
 8003b30:	4413      	add	r3, r2
 8003b32:	7a18      	ldrb	r0, [r3, #8]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	47a0      	blx	r4
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd90      	pop	{r4, r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200002dc 	.word	0x200002dc

08003b50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <disk_write+0x3c>)
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	68dc      	ldr	r4, [r3, #12]
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	4a07      	ldr	r2, [pc, #28]	; (8003b8c <disk_write+0x3c>)
 8003b70:	4413      	add	r3, r2
 8003b72:	7a18      	ldrb	r0, [r3, #8]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	47a0      	blx	r4
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd90      	pop	{r4, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200002dc 	.word	0x200002dc

08003b90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	603a      	str	r2, [r7, #0]
 8003b9a:	71fb      	strb	r3, [r7, #7]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <disk_ioctl+0x38>)
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	79fa      	ldrb	r2, [r7, #7]
 8003bae:	4906      	ldr	r1, [pc, #24]	; (8003bc8 <disk_ioctl+0x38>)
 8003bb0:	440a      	add	r2, r1
 8003bb2:	7a10      	ldrb	r0, [r2, #8]
 8003bb4:	79b9      	ldrb	r1, [r7, #6]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	4798      	blx	r3
 8003bba:	4603      	mov	r3, r0
 8003bbc:	73fb      	strb	r3, [r7, #15]
  return res;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	200002dc 	.word	0x200002dc

08003bcc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003be0:	e007      	b.n	8003bf2 <mem_cpy+0x26>
		*d++ = *s++;
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	1c53      	adds	r3, r2, #1
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	1c59      	adds	r1, r3, #1
 8003bec:	6179      	str	r1, [r7, #20]
 8003bee:	7812      	ldrb	r2, [r2, #0]
 8003bf0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f2      	bne.n	8003be2 <mem_cpy+0x16>
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003c18:	e005      	b.n	8003c26 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	617a      	str	r2, [r7, #20]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1e5a      	subs	r2, r3, #1
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f4      	bne.n	8003c1a <mem_set+0x12>
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	; 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003c54:	bf00      	nop
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	1e5a      	subs	r2, r3, #1
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00d      	beq.n	8003c7c <mem_cmp+0x40>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	61fa      	str	r2, [r7, #28]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	61ba      	str	r2, [r7, #24]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	1acb      	subs	r3, r1, r3
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ec      	beq.n	8003c56 <mem_cmp+0x1a>
	return r;
 8003c7c:	697b      	ldr	r3, [r7, #20]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3724      	adds	r7, #36	; 0x24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003c92:	e002      	b.n	8003c9a <chk_chr+0x12>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3301      	adds	r3, #1
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <chk_chr+0x26>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d1f2      	bne.n	8003c94 <chk_chr+0xc>
	return *str;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e03d      	b.n	8003d4c <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8003cd0:	4932      	ldr	r1, [pc, #200]	; (8003d9c <chk_lock+0xe0>)
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02e      	beq.n	8003d42 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003ce4:	492d      	ldr	r1, [pc, #180]	; (8003d9c <chk_lock+0xe0>)
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d122      	bne.n	8003d46 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8003d00:	4926      	ldr	r1, [pc, #152]	; (8003d9c <chk_lock+0xe0>)
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3304      	adds	r3, #4
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d18:	3308      	adds	r3, #8
 8003d1a:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d112      	bne.n	8003d46 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003d20:	491e      	ldr	r1, [pc, #120]	; (8003d9c <chk_lock+0xe0>)
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4613      	mov	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	3308      	adds	r3, #8
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d38:	3306      	adds	r3, #6
 8003d3a:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d102      	bne.n	8003d46 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003d40:	e007      	b.n	8003d52 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d9be      	bls.n	8003cd0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d109      	bne.n	8003d6c <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <chk_lock+0xa8>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d101      	bne.n	8003d68 <chk_lock+0xac>
 8003d64:	2300      	movs	r3, #0
 8003d66:	e013      	b.n	8003d90 <chk_lock+0xd4>
 8003d68:	2312      	movs	r3, #18
 8003d6a:	e011      	b.n	8003d90 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <chk_lock+0xce>
 8003d72:	490a      	ldr	r1, [pc, #40]	; (8003d9c <chk_lock+0xe0>)
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	330a      	adds	r3, #10
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d88:	d101      	bne.n	8003d8e <chk_lock+0xd2>
 8003d8a:	2310      	movs	r3, #16
 8003d8c:	e000      	b.n	8003d90 <chk_lock+0xd4>
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	200000c4 	.word	0x200000c4

08003da0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	e002      	b.n	8003db2 <enq_lock+0x12>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3301      	adds	r3, #1
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d809      	bhi.n	8003dcc <enq_lock+0x2c>
 8003db8:	490a      	ldr	r1, [pc, #40]	; (8003de4 <enq_lock+0x44>)
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ef      	bne.n	8003dac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	200000c4 	.word	0x200000c4

08003de8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e030      	b.n	8003e5a <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8003df8:	495a      	ldr	r1, [pc, #360]	; (8003f64 <inc_lock+0x17c>)
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d11f      	bne.n	8003e54 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8003e14:	4953      	ldr	r1, [pc, #332]	; (8003f64 <inc_lock+0x17c>)
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	3304      	adds	r3, #4
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d10f      	bne.n	8003e54 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8003e34:	494b      	ldr	r1, [pc, #300]	; (8003f64 <inc_lock+0x17c>)
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	3308      	adds	r3, #8
 8003e44:	881a      	ldrh	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4c:	3306      	adds	r3, #6
 8003e4e:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d006      	beq.n	8003e62 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3301      	adds	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d9cb      	bls.n	8003df8 <inc_lock+0x10>
 8003e60:	e000      	b.n	8003e64 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8003e62:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d14a      	bne.n	8003f00 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	e002      	b.n	8003e76 <inc_lock+0x8e>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3301      	adds	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d809      	bhi.n	8003e90 <inc_lock+0xa8>
 8003e7c:	4939      	ldr	r1, [pc, #228]	; (8003f64 <inc_lock+0x17c>)
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ef      	bne.n	8003e70 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d101      	bne.n	8003e9a <inc_lock+0xb2>
 8003e96:	2300      	movs	r3, #0
 8003e98:	e05f      	b.n	8003f5a <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	4830      	ldr	r0, [pc, #192]	; (8003f64 <inc_lock+0x17c>)
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4403      	add	r3, r0
 8003eb0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb8:	3308      	adds	r3, #8
 8003eba:	6819      	ldr	r1, [r3, #0]
 8003ebc:	4829      	ldr	r0, [pc, #164]	; (8003f64 <inc_lock+0x17c>)
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4403      	add	r3, r0
 8003eca:	3304      	adds	r3, #4
 8003ecc:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed4:	3306      	adds	r3, #6
 8003ed6:	8818      	ldrh	r0, [r3, #0]
 8003ed8:	4922      	ldr	r1, [pc, #136]	; (8003f64 <inc_lock+0x17c>)
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4613      	mov	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	4602      	mov	r2, r0
 8003eea:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003eec:	491d      	ldr	r1, [pc, #116]	; (8003f64 <inc_lock+0x17c>)
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	330a      	adds	r3, #10
 8003efc:	2200      	movs	r2, #0
 8003efe:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00c      	beq.n	8003f20 <inc_lock+0x138>
 8003f06:	4917      	ldr	r1, [pc, #92]	; (8003f64 <inc_lock+0x17c>)
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	330a      	adds	r3, #10
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <inc_lock+0x138>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e01c      	b.n	8003f5a <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <inc_lock+0x156>
 8003f26:	490f      	ldr	r1, [pc, #60]	; (8003f64 <inc_lock+0x17c>)
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	330a      	adds	r3, #10
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	b299      	uxth	r1, r3
 8003f3c:	e001      	b.n	8003f42 <inc_lock+0x15a>
 8003f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f42:	4808      	ldr	r0, [pc, #32]	; (8003f64 <inc_lock+0x17c>)
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4403      	add	r3, r0
 8003f50:	330a      	adds	r3, #10
 8003f52:	460a      	mov	r2, r1
 8003f54:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3301      	adds	r3, #1
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	200000c4 	.word	0x200000c4

08003f68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	607b      	str	r3, [r7, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d82e      	bhi.n	8003fda <dec_lock+0x72>
		n = Files[i].ctr;
 8003f7c:	491b      	ldr	r1, [pc, #108]	; (8003fec <dec_lock+0x84>)
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	330a      	adds	r3, #10
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003f90:	89fb      	ldrh	r3, [r7, #14]
 8003f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f96:	d101      	bne.n	8003f9c <dec_lock+0x34>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003f9c:	89fb      	ldrh	r3, [r7, #14]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <dec_lock+0x40>
 8003fa2:	89fb      	ldrh	r3, [r7, #14]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003fa8:	4910      	ldr	r1, [pc, #64]	; (8003fec <dec_lock+0x84>)
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	330a      	adds	r3, #10
 8003fb8:	89fa      	ldrh	r2, [r7, #14]
 8003fba:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003fbc:	89fb      	ldrh	r3, [r7, #14]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d108      	bne.n	8003fd4 <dec_lock+0x6c>
 8003fc2:	490a      	ldr	r1, [pc, #40]	; (8003fec <dec_lock+0x84>)
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	737b      	strb	r3, [r7, #13]
 8003fd8:	e001      	b.n	8003fde <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003fda:	2302      	movs	r3, #2
 8003fdc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003fde:	7b7b      	ldrb	r3, [r7, #13]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	200000c4 	.word	0x200000c4

08003ff0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e016      	b.n	800402c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003ffe:	4910      	ldr	r1, [pc, #64]	; (8004040 <clear_lock+0x50>)
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d108      	bne.n	8004026 <clear_lock+0x36>
 8004014:	490a      	ldr	r1, [pc, #40]	; (8004040 <clear_lock+0x50>)
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3301      	adds	r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d9e5      	bls.n	8003ffe <clear_lock+0xe>
	}
}
 8004032:	bf00      	nop
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	200000c4 	.word	0x200000c4

08004044 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004056:	3304      	adds	r3, #4
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d047      	beq.n	80040ee <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004064:	330c      	adds	r3, #12
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004070:	3301      	adds	r3, #1
 8004072:	7818      	ldrb	r0, [r3, #0]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	2301      	movs	r3, #1
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	f7ff fd69 	bl	8003b50 <disk_write>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <sync_window+0x46>
			res = FR_DISK_ERR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
 8004088:	e031      	b.n	80040ee <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004090:	3304      	adds	r3, #4
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	1ad2      	subs	r2, r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a8:	3318      	adds	r3, #24
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d21e      	bcs.n	80040ee <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b6:	3303      	adds	r3, #3
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	e014      	b.n	80040e8 <sync_window+0xa4>
					wsect += fs->fsize;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c4:	3318      	adds	r3, #24
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4413      	add	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d4:	3301      	adds	r3, #1
 80040d6:	7818      	ldrb	r0, [r3, #0]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	2301      	movs	r3, #1
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	f7ff fd37 	bl	8003b50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d8e7      	bhi.n	80040be <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800410c:	330c      	adds	r3, #12
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d01f      	beq.n	8004156 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff ff94 	bl	8004044 <sync_window>
 800411c:	4603      	mov	r3, r0
 800411e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d117      	bne.n	8004156 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412c:	3301      	adds	r3, #1
 800412e:	7818      	ldrb	r0, [r3, #0]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	2301      	movs	r3, #1
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	f7ff fceb 	bl	8003b10 <disk_read>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d004      	beq.n	800414a <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004144:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004146:	2301      	movs	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004150:	330c      	adds	r3, #12
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8004156:	7bfb      	ldrb	r3, [r7, #15]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ff6b 	bl	8004044 <sync_window>
 800416e:	4603      	mov	r3, r0
 8004170:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f040 80bd 	bne.w	80042f4 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b03      	cmp	r3, #3
 8004184:	f040 80a7 	bne.w	80042d6 <sync_fs+0x176>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418e:	3305      	adds	r3, #5
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b01      	cmp	r3, #1
 8004194:	f040 809f 	bne.w	80042d6 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a0:	330a      	adds	r3, #10
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	2100      	movs	r1, #0
 80041a8:	f7ff fd2e 	bl	8003c08 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2255      	movs	r2, #85	; 0x55
 80041b0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	22aa      	movs	r2, #170	; 0xaa
 80041b8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2252      	movs	r2, #82	; 0x52
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2252      	movs	r2, #82	; 0x52
 80041c6:	705a      	strb	r2, [r3, #1]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2261      	movs	r2, #97	; 0x61
 80041cc:	709a      	strb	r2, [r3, #2]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2241      	movs	r2, #65	; 0x41
 80041d2:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2272      	movs	r2, #114	; 0x72
 80041d8:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2272      	movs	r2, #114	; 0x72
 80041e0:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2241      	movs	r2, #65	; 0x41
 80041e8:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2261      	movs	r2, #97	; 0x61
 80041f0:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fa:	3310      	adds	r3, #16
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420c:	3310      	adds	r3, #16
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	b29b      	uxth	r3, r3
 8004216:	b2da      	uxtb	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004224:	3310      	adds	r3, #16
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	b2da      	uxtb	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004238:	3310      	adds	r3, #16
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0e1b      	lsrs	r3, r3, #24
 800423e:	b2da      	uxtb	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424c:	330c      	adds	r3, #12
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425e:	330c      	adds	r3, #12
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	b29b      	uxth	r3, r3
 8004268:	b2da      	uxtb	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004276:	330c      	adds	r3, #12
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	b2da      	uxtb	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428a:	330c      	adds	r3, #12
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0e1b      	lsrs	r3, r3, #24
 8004290:	b2da      	uxtb	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429e:	331c      	adds	r3, #28
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80042aa:	330c      	adds	r3, #12
 80042ac:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b4:	3301      	adds	r3, #1
 80042b6:	7818      	ldrb	r0, [r3, #0]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80042c0:	330c      	adds	r3, #12
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2301      	movs	r3, #1
 80042c6:	f7ff fc43 	bl	8003b50 <disk_write>
			fs->fsi_flag = 0;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d0:	3305      	adds	r3, #5
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042dc:	3301      	adds	r3, #1
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	2100      	movs	r1, #0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fc53 	bl	8003b90 <disk_ioctl>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <sync_fs+0x194>
			res = FR_DISK_ERR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	3b02      	subs	r3, #2
 800430c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004314:	3314      	adds	r3, #20
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3b02      	subs	r3, #2
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d301      	bcc.n	8004324 <clust2sect+0x26>
 8004320:	2300      	movs	r3, #0
 8004322:	e00e      	b.n	8004342 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432a:	3302      	adds	r3, #2
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	fb03 f202 	mul.w	r2, r3, r2
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800433c:	3308      	adds	r3, #8
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4413      	add	r3, r2
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d907      	bls.n	800436c <get_fat+0x20>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004362:	3314      	adds	r3, #20
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d302      	bcc.n	8004372 <get_fat+0x26>
		val = 1;	/* Internal error */
 800436c:	2301      	movs	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	e0ec      	b.n	800454c <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004376:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b03      	cmp	r3, #3
 8004382:	f000 809e 	beq.w	80044c2 <get_fat+0x176>
 8004386:	2b03      	cmp	r3, #3
 8004388:	f300 80d6 	bgt.w	8004538 <get_fat+0x1ec>
 800438c:	2b01      	cmp	r3, #1
 800438e:	d002      	beq.n	8004396 <get_fat+0x4a>
 8004390:	2b02      	cmp	r3, #2
 8004392:	d063      	beq.n	800445c <get_fat+0x110>
 8004394:	e0d0      	b.n	8004538 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b2:	330a      	adds	r3, #10
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	4619      	mov	r1, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80043be:	4413      	add	r3, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fe98 	bl	80040f8 <move_window>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 80b7 	bne.w	800453e <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	60fa      	str	r2, [r7, #12]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043dc:	320a      	adds	r2, #10
 80043de:	8812      	ldrh	r2, [r2, #0]
 80043e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80043e4:	fb02 f201 	mul.w	r2, r2, r1
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	5cd3      	ldrb	r3, [r2, r3]
 80043ee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fe:	330a      	adds	r3, #10
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	4619      	mov	r1, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	fbb3 f3f1 	udiv	r3, r3, r1
 800440a:	4413      	add	r3, r2
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fe72 	bl	80040f8 <move_window>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	f040 8093 	bne.w	8004542 <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004422:	330a      	adds	r3, #10
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	fbb3 f1f2 	udiv	r1, r3, r2
 800442e:	fb02 f201 	mul.w	r2, r2, r1
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	461a      	mov	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
 8004440:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <get_fat+0x106>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	e002      	b.n	8004458 <get_fat+0x10c>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004458:	617b      	str	r3, [r7, #20]
			break;
 800445a:	e077      	b.n	800454c <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446a:	330a      	adds	r3, #10
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	085b      	lsrs	r3, r3, #1
 8004470:	b29b      	uxth	r3, r3
 8004472:	4619      	mov	r1, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	fbb3 f3f1 	udiv	r3, r3, r1
 800447a:	4413      	add	r3, r2
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff fe3a 	bl	80040f8 <move_window>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d15d      	bne.n	8004546 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	005a      	lsls	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004494:	330a      	adds	r3, #10
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	fbb2 f1f3 	udiv	r1, r2, r3
 800449c:	fb03 f301 	mul.w	r3, r3, r1
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	4413      	add	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	3301      	adds	r3, #1
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	b21a      	sxth	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	4313      	orrs	r3, r2
 80044ba:	b21b      	sxth	r3, r3
 80044bc:	b29b      	uxth	r3, r3
 80044be:	617b      	str	r3, [r7, #20]
			break;
 80044c0:	e044      	b.n	800454c <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d0:	330a      	adds	r3, #10
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	4619      	mov	r1, r3
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80044e0:	4413      	add	r3, r2
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fe07 	bl	80040f8 <move_window>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d12c      	bne.n	800454a <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	009a      	lsls	r2, r3, #2
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fa:	330a      	adds	r3, #10
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8004502:	fb03 f301 	mul.w	r3, r3, r1
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4413      	add	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	3303      	adds	r3, #3
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	061a      	lsls	r2, r3, #24
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	3302      	adds	r3, #2
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	4313      	orrs	r3, r2
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	3201      	adds	r2, #1
 8004524:	7812      	ldrb	r2, [r2, #0]
 8004526:	0212      	lsls	r2, r2, #8
 8004528:	4313      	orrs	r3, r2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	7812      	ldrb	r2, [r2, #0]
 800452e:	4313      	orrs	r3, r2
 8004530:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004534:	617b      	str	r3, [r7, #20]
			break;
 8004536:	e009      	b.n	800454c <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 8004538:	2301      	movs	r3, #1
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	e006      	b.n	800454c <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800453e:	bf00      	nop
 8004540:	e004      	b.n	800454c <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004542:	bf00      	nop
 8004544:	e002      	b.n	800454c <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800454a:	bf00      	nop
		}
	}

	return val;
 800454c:	697b      	ldr	r3, [r7, #20]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b088      	sub	sp, #32
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d907      	bls.n	8004578 <put_fat+0x22>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456e:	3314      	adds	r3, #20
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	429a      	cmp	r2, r3
 8004576:	d302      	bcc.n	800457e <put_fat+0x28>
		res = FR_INT_ERR;
 8004578:	2302      	movs	r3, #2
 800457a:	77fb      	strb	r3, [r7, #31]
 800457c:	e146      	b.n	800480c <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b03      	cmp	r3, #3
 8004588:	f000 80d9 	beq.w	800473e <put_fat+0x1e8>
 800458c:	2b03      	cmp	r3, #3
 800458e:	f300 8133 	bgt.w	80047f8 <put_fat+0x2a2>
 8004592:	2b01      	cmp	r3, #1
 8004594:	d003      	beq.n	800459e <put_fat+0x48>
 8004596:	2b02      	cmp	r3, #2
 8004598:	f000 8095 	beq.w	80046c6 <put_fat+0x170>
 800459c:	e12c      	b.n	80047f8 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ba:	330a      	adds	r3, #10
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	4619      	mov	r1, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80045c6:	4413      	add	r3, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7ff fd94 	bl	80040f8 <move_window>
 80045d0:	4603      	mov	r3, r0
 80045d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045d4:	7ffb      	ldrb	r3, [r7, #31]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f040 8111 	bne.w	80047fe <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	617a      	str	r2, [r7, #20]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045e8:	320a      	adds	r2, #10
 80045ea:	8812      	ldrh	r2, [r2, #0]
 80045ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80045f0:	fb02 f201 	mul.w	r2, r2, r1
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00d      	beq.n	8004622 <put_fat+0xcc>
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b25b      	sxtb	r3, r3
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	b25a      	sxtb	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	b25b      	sxtb	r3, r3
 800461a:	4313      	orrs	r3, r2
 800461c:	b25b      	sxtb	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	e001      	b.n	8004626 <put_fat+0xd0>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004630:	3304      	adds	r3, #4
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	330a      	adds	r3, #10
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	4619      	mov	r1, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004650:	4413      	add	r3, r2
 8004652:	4619      	mov	r1, r3
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7ff fd4f 	bl	80040f8 <move_window>
 800465a:	4603      	mov	r3, r0
 800465c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800465e:	7ffb      	ldrb	r3, [r7, #31]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f040 80ce 	bne.w	8004802 <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	330a      	adds	r3, #10
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	fbb3 f1f2 	udiv	r1, r3, r2
 8004678:	fb02 f201 	mul.w	r2, r2, r1
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4413      	add	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <put_fat+0x140>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	b2db      	uxtb	r3, r3
 8004694:	e00e      	b.n	80046b4 <put_fat+0x15e>
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b25b      	sxtb	r3, r3
 800469c:	f023 030f 	bic.w	r3, r3, #15
 80046a0:	b25a      	sxtb	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	4313      	orrs	r3, r2
 80046b0:	b25b      	sxtb	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046be:	3304      	adds	r3, #4
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
			break;
 80046c4:	e0a2      	b.n	800480c <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d4:	330a      	adds	r3, #10
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	b29b      	uxth	r3, r3
 80046dc:	4619      	mov	r1, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80046e4:	4413      	add	r3, r2
 80046e6:	4619      	mov	r1, r3
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f7ff fd05 	bl	80040f8 <move_window>
 80046ee:	4603      	mov	r3, r0
 80046f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80046f2:	7ffb      	ldrb	r3, [r7, #31]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f040 8086 	bne.w	8004806 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	005a      	lsls	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004704:	330a      	adds	r3, #10
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	fbb2 f1f3 	udiv	r1, r2, r3
 800470c:	fb03 f301 	mul.w	r3, r3, r1
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	b29b      	uxth	r3, r3
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	b29a      	uxth	r2, r3
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	3301      	adds	r3, #1
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004736:	3304      	adds	r3, #4
 8004738:	2201      	movs	r2, #1
 800473a:	701a      	strb	r2, [r3, #0]
			break;
 800473c:	e066      	b.n	800480c <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474c:	330a      	adds	r3, #10
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	089b      	lsrs	r3, r3, #2
 8004752:	b29b      	uxth	r3, r3
 8004754:	4619      	mov	r1, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	fbb3 f3f1 	udiv	r3, r3, r1
 800475c:	4413      	add	r3, r2
 800475e:	4619      	mov	r1, r3
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7ff fcc9 	bl	80040f8 <move_window>
 8004766:	4603      	mov	r3, r0
 8004768:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800476a:	7ffb      	ldrb	r3, [r7, #31]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d14c      	bne.n	800480a <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	009a      	lsls	r2, r3, #2
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477a:	330a      	adds	r3, #10
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004782:	fb03 f301 	mul.w	r3, r3, r1
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	3303      	adds	r3, #3
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	061a      	lsls	r2, r3, #24
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	3302      	adds	r3, #2
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	041b      	lsls	r3, r3, #16
 800479e:	4313      	orrs	r3, r2
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	3201      	adds	r2, #1
 80047a4:	7812      	ldrb	r2, [r2, #0]
 80047a6:	0212      	lsls	r2, r2, #8
 80047a8:	4313      	orrs	r3, r2
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	7812      	ldrb	r2, [r2, #0]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	3301      	adds	r3, #1
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0c1a      	lsrs	r2, r3, #16
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	3302      	adds	r3, #2
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	0e1a      	lsrs	r2, r3, #24
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	3303      	adds	r3, #3
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f0:	3304      	adds	r3, #4
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]
			break;
 80047f6:	e009      	b.n	800480c <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 80047f8:	2302      	movs	r3, #2
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e006      	b.n	800480c <put_fat+0x2b6>
			if (res != FR_OK) break;
 80047fe:	bf00      	nop
 8004800:	e004      	b.n	800480c <put_fat+0x2b6>
			if (res != FR_OK) break;
 8004802:	bf00      	nop
 8004804:	e002      	b.n	800480c <put_fat+0x2b6>
			if (res != FR_OK) break;
 8004806:	bf00      	nop
 8004808:	e000      	b.n	800480c <put_fat+0x2b6>
			if (res != FR_OK) break;
 800480a:	bf00      	nop
		}
	}

	return res;
 800480c:	7ffb      	ldrb	r3, [r7, #31]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d907      	bls.n	8004836 <remove_chain+0x20>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800482c:	3314      	adds	r3, #20
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <remove_chain+0x26>
		res = FR_INT_ERR;
 8004836:	2302      	movs	r3, #2
 8004838:	73fb      	strb	r3, [r7, #15]
 800483a:	e04f      	b.n	80048dc <remove_chain+0xc6>

	} else {
		res = FR_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004840:	e040      	b.n	80048c4 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff fd81 	bl	800434c <get_fat>
 800484a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d041      	beq.n	80048d6 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d102      	bne.n	800485e <remove_chain+0x48>
 8004858:	2302      	movs	r3, #2
 800485a:	73fb      	strb	r3, [r7, #15]
 800485c:	e03e      	b.n	80048dc <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004864:	d102      	bne.n	800486c <remove_chain+0x56>
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
 800486a:	e037      	b.n	80048dc <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800486c:	2200      	movs	r2, #0
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff fe70 	bl	8004556 <put_fat>
 8004876:	4603      	mov	r3, r0
 8004878:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d12c      	bne.n	80048da <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004886:	3310      	adds	r3, #16
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800488e:	d017      	beq.n	80048c0 <remove_chain+0xaa>
				fs->free_clust++;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004896:	3310      	adds	r3, #16
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a2:	3310      	adds	r3, #16
 80048a4:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ac:	3305      	adds	r3, #5
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048bc:	3305      	adds	r3, #5
 80048be:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ca:	3314      	adds	r3, #20
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d3b6      	bcc.n	8004842 <remove_chain+0x2c>
 80048d4:	e002      	b.n	80048dc <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 80048d6:	bf00      	nop
 80048d8:	e000      	b.n	80048dc <remove_chain+0xc6>
			if (res != FR_OK) break;
 80048da:	bf00      	nop
		}
	}

	return res;
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b086      	sub	sp, #24
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d113      	bne.n	800491e <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fc:	330c      	adds	r3, #12
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <create_chain+0x32>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490e:	3314      	adds	r3, #20
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	429a      	cmp	r2, r3
 8004916:	d31e      	bcc.n	8004956 <create_chain+0x70>
 8004918:	2301      	movs	r3, #1
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e01b      	b.n	8004956 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800491e:	6839      	ldr	r1, [r7, #0]
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fd13 	bl	800434c <get_fat>
 8004926:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d801      	bhi.n	8004932 <create_chain+0x4c>
 800492e:	2301      	movs	r3, #1
 8004930:	e086      	b.n	8004a40 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004938:	d101      	bne.n	800493e <create_chain+0x58>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	e080      	b.n	8004a40 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004944:	3314      	adds	r3, #20
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	429a      	cmp	r2, r3
 800494c:	d201      	bcs.n	8004952 <create_chain+0x6c>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	e076      	b.n	8004a40 <create_chain+0x15a>
		scl = clst;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	3301      	adds	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004966:	3314      	adds	r3, #20
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	429a      	cmp	r2, r3
 800496e:	d307      	bcc.n	8004980 <create_chain+0x9a>
			ncl = 2;
 8004970:	2302      	movs	r3, #2
 8004972:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	429a      	cmp	r2, r3
 800497a:	d901      	bls.n	8004980 <create_chain+0x9a>
 800497c:	2300      	movs	r3, #0
 800497e:	e05f      	b.n	8004a40 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004980:	6979      	ldr	r1, [r7, #20]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff fce2 	bl	800434c <get_fat>
 8004988:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004996:	d002      	beq.n	800499e <create_chain+0xb8>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <create_chain+0xbc>
			return cs;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	e04e      	b.n	8004a40 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d1d7      	bne.n	800495a <create_chain+0x74>
 80049aa:	2300      	movs	r3, #0
 80049ac:	e048      	b.n	8004a40 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 80049ae:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80049b0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80049b4:	6979      	ldr	r1, [r7, #20]
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff fdcd 	bl	8004556 <put_fat>
 80049bc:	4603      	mov	r3, r0
 80049be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <create_chain+0xf4>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d006      	beq.n	80049da <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	6839      	ldr	r1, [r7, #0]
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff fdc0 	bl	8004556 <put_fat>
 80049d6:	4603      	mov	r3, r0
 80049d8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d126      	bne.n	8004a2e <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e6:	330c      	adds	r3, #12
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f2:	3310      	adds	r3, #16
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049fa:	d020      	beq.n	8004a3e <create_chain+0x158>
			fs->free_clust--;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a02:	3310      	adds	r3, #16
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	1e5a      	subs	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0e:	3310      	adds	r3, #16
 8004a10:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a18:	3305      	adds	r3, #5
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a28:	3305      	adds	r3, #5
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	e007      	b.n	8004a3e <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d102      	bne.n	8004a3a <create_chain+0x154>
 8004a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a38:	e000      	b.n	8004a3c <create_chain+0x156>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004a3e:	697b      	ldr	r3, [r7, #20]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004a58:	3304      	adds	r3, #4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a6c:	330a      	adds	r3, #10
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a84:	3302      	adds	r3, #2
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1d1a      	adds	r2, r3, #4
 8004a92:	613a      	str	r2, [r7, #16]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <clmt_clust+0x5a>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e010      	b.n	8004ac4 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d307      	bcc.n	8004aba <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ab8:	e7e9      	b.n	8004a8e <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8004aba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	4413      	add	r3, r2
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr

08004ace <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b086      	sub	sp, #24
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae2:	3306      	adds	r3, #6
 8004ae4:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aec:	3308      	adds	r3, #8
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d00a      	beq.n	8004b0e <dir_sdi+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b04:	3314      	adds	r3, #20
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d301      	bcc.n	8004b12 <dir_sdi+0x44>
		return FR_INT_ERR;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0b4      	b.n	8004c7c <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d111      	bne.n	8004b3c <dir_sdi+0x6e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d108      	bne.n	8004b3c <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004b36:	3304      	adds	r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d117      	bne.n	8004b72 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4e:	3308      	adds	r3, #8
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d301      	bcc.n	8004b5e <dir_sdi+0x90>
			return FR_INT_ERR;
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e08e      	b.n	8004c7c <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	e046      	b.n	8004c00 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7e:	330a      	adds	r3, #10
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b94:	3302      	adds	r3, #2
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	fb03 f302 	mul.w	r3, r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004b9e:	e022      	b.n	8004be6 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6979      	ldr	r1, [r7, #20]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fbce 	bl	800434c <get_fat>
 8004bb0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb8:	d101      	bne.n	8004bbe <dir_sdi+0xf0>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e05e      	b.n	8004c7c <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d90a      	bls.n	8004bda <dir_sdi+0x10c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd0:	3314      	adds	r3, #20
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d301      	bcc.n	8004bde <dir_sdi+0x110>
				return FR_INT_ERR;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e04e      	b.n	8004c7c <dir_sdi+0x1ae>
			idx -= ic;
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d2d8      	bcs.n	8004ba0 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6979      	ldr	r1, [r7, #20]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fb80 	bl	80042fe <clust2sect>
 8004bfe:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c06:	330c      	adds	r3, #12
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <dir_sdi+0x148>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e032      	b.n	8004c7c <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c22:	330a      	adds	r3, #10
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	441a      	add	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3c:	3310      	adds	r3, #16
 8004c3e:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c56:	330a      	adds	r3, #10
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c66:	fb02 f201 	mul.w	r2, r2, r1
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	015b      	lsls	r3, r3, #5
 8004c6e:	18c2      	adds	r2, r0, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c76:	3314      	adds	r3, #20
 8004c78:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004c84:	b590      	push	{r4, r7, lr}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c94:	3306      	adds	r3, #6
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d006      	beq.n	8004cb2 <dir_next+0x2e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004caa:	3310      	adds	r3, #16
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <dir_next+0x32>
		return FR_NO_FILE;
 8004cb2:	2304      	movs	r3, #4
 8004cb4:	e144      	b.n	8004f40 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc2:	330a      	adds	r3, #10
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cd2:	fb02 f201 	mul.w	r2, r2, r1
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f040 810c 	bne.w	8004ef6 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce4:	3310      	adds	r3, #16
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf0:	3310      	adds	r3, #16
 8004cf2:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10e      	bne.n	8004d20 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d0e:	3308      	adds	r3, #8
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4293      	cmp	r3, r2
 8004d18:	f0c0 80ed 	bcc.w	8004ef6 <dir_next+0x272>
				return FR_NO_FILE;
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	e10f      	b.n	8004f40 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d2c:	330a      	adds	r3, #10
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d48:	3302      	adds	r3, #2
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f040 80d0 	bne.w	8004ef6 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d64:	330c      	adds	r3, #12
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f7ff faee 	bl	800434c <get_fat>
 8004d70:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d801      	bhi.n	8004d7c <dir_next+0xf8>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e0e1      	b.n	8004f40 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d82:	d101      	bne.n	8004d88 <dir_next+0x104>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0db      	b.n	8004f40 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d94:	3314      	adds	r3, #20
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	f0c0 8097 	bcc.w	8004ece <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <dir_next+0x126>
 8004da6:	2304      	movs	r3, #4
 8004da8:	e0ca      	b.n	8004f40 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db8:	330c      	adds	r3, #12
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7ff fd91 	bl	80048e6 <create_chain>
 8004dc4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <dir_next+0x14c>
 8004dcc:	2307      	movs	r3, #7
 8004dce:	e0b7      	b.n	8004f40 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <dir_next+0x156>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e0b2      	b.n	8004f40 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de0:	d101      	bne.n	8004de6 <dir_next+0x162>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e0ac      	b.n	8004f40 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff f928 	bl	8004044 <sync_window>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <dir_next+0x17a>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e0a0      	b.n	8004f40 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e14:	330a      	adds	r3, #10
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	f7fe fef4 	bl	8003c08 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e2e:	681c      	ldr	r4, [r3, #0]
 8004e30:	6979      	ldr	r1, [r7, #20]
 8004e32:	4610      	mov	r0, r2
 8004e34:	f7ff fa63 	bl	80042fe <clust2sect>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8004e3e:	330c      	adds	r3, #12
 8004e40:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	e024      	b.n	8004e92 <dir_next+0x20e>
						dp->fs->wflag = 1;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e54:	3304      	adds	r3, #4
 8004e56:	2201      	movs	r2, #1
 8004e58:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff f8ee 	bl	8004044 <sync_window>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <dir_next+0x1ee>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e066      	b.n	8004f40 <dir_next+0x2bc>
						dp->fs->winsect++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004e7e:	330c      	adds	r3, #12
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	1c59      	adds	r1, r3, #1
 8004e84:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004e88:	330c      	adds	r3, #12
 8004e8a:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d3ce      	bcc.n	8004e48 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	6819      	ldr	r1, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	1a8a      	subs	r2, r1, r2
 8004ec6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004eca:	330c      	adds	r3, #12
 8004ecc:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6979      	ldr	r1, [r7, #20]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fa0a 	bl	80042fe <clust2sect>
 8004eea:	4602      	mov	r2, r0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef2:	3310      	adds	r3, #16
 8004ef4:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f00:	3306      	adds	r3, #6
 8004f02:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f1a:	330a      	adds	r3, #10
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f2a:	fb02 f201 	mul.w	r2, r2, r1
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	015b      	lsls	r3, r3, #5
 8004f32:	18c2      	adds	r2, r0, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd90      	pop	{r4, r7, pc}

08004f48 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004f52:	2100      	movs	r1, #0
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff fdba 	bl	8004ace <dir_sdi>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d138      	bne.n	8004fd6 <dir_alloc+0x8e>
		n = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f76:	3310      	adds	r3, #16
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7ff f8bb 	bl	80040f8 <move_window>
 8004f82:	4603      	mov	r3, r0
 8004f84:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d123      	bne.n	8004fd4 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f92:	3314      	adds	r3, #20
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2be5      	cmp	r3, #229	; 0xe5
 8004f9a:	d007      	beq.n	8004fac <dir_alloc+0x64>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa2:	3314      	adds	r3, #20
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d107      	bne.n	8004fbc <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d102      	bne.n	8004fc0 <dir_alloc+0x78>
 8004fba:	e00c      	b.n	8004fd6 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fe5e 	bl	8004c84 <dir_next>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0ca      	beq.n	8004f68 <dir_alloc+0x20>
 8004fd2:	e000      	b.n	8004fd6 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8004fd4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d101      	bne.n	8004fe0 <dir_alloc+0x98>
 8004fdc:	2307      	movs	r3, #7
 8004fde:	73fb      	strb	r3, [r7, #15]
	return res;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	331b      	adds	r3, #27
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	b21a      	sxth	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	331a      	adds	r3, #26
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	b21b      	sxth	r3, r3
 8005006:	4313      	orrs	r3, r2
 8005008:	b21b      	sxth	r3, r3
 800500a:	b29b      	uxth	r3, r3
 800500c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d10f      	bne.n	800503a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	3315      	adds	r3, #21
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	b21a      	sxth	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	3314      	adds	r3, #20
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	b21b      	sxth	r3, r3
 800502c:	4313      	orrs	r3, r2
 800502e:	b21b      	sxth	r3, r3
 8005030:	b29b      	uxth	r3, r3
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

	return cl;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	331a      	adds	r3, #26
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	331b      	adds	r3, #27
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	0c1a      	lsrs	r2, r3, #16
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3314      	adds	r3, #20
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	b29b      	uxth	r3, r3
 800507c:	0a1b      	lsrs	r3, r3, #8
 800507e:	b29a      	uxth	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3315      	adds	r3, #21
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr
	...

08005094 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a6:	1e5a      	subs	r2, r3, #1
 80050a8:	4613      	mov	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80050b4:	2300      	movs	r3, #0
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	2301      	movs	r3, #1
 80050ba:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80050bc:	4a2b      	ldr	r2, [pc, #172]	; (800516c <cmp_lfn+0xd8>)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4413      	add	r3, r2
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	4413      	add	r3, r2
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	b21a      	sxth	r2, r3
 80050d0:	4926      	ldr	r1, [pc, #152]	; (800516c <cmp_lfn+0xd8>)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	440b      	add	r3, r1
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	4619      	mov	r1, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	440b      	add	r3, r1
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b21b      	sxth	r3, r3
 80050e2:	4313      	orrs	r3, r2
 80050e4:	b21b      	sxth	r3, r3
 80050e6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80050e8:	89fb      	ldrh	r3, [r7, #14]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d019      	beq.n	8005122 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80050ee:	89bb      	ldrh	r3, [r7, #12]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f002 ff41 	bl	8007f78 <ff_wtoupper>
 80050f6:	4603      	mov	r3, r0
 80050f8:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2bfe      	cmp	r3, #254	; 0xfe
 80050fe:	d80e      	bhi.n	800511e <cmp_lfn+0x8a>
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	617a      	str	r2, [r7, #20]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	4413      	add	r3, r2
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f002 ff32 	bl	8007f78 <ff_wtoupper>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	89fb      	ldrh	r3, [r7, #14]
 800511a:	4293      	cmp	r3, r2
 800511c:	d008      	beq.n	8005130 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800511e:	2300      	movs	r3, #0
 8005120:	e01f      	b.n	8005162 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005122:	89bb      	ldrh	r3, [r7, #12]
 8005124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005128:	4293      	cmp	r3, r2
 800512a:	d001      	beq.n	8005130 <cmp_lfn+0x9c>
 800512c:	2300      	movs	r3, #0
 800512e:	e018      	b.n	8005162 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	3301      	adds	r3, #1
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b0c      	cmp	r3, #12
 800513a:	d9bf      	bls.n	80050bc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00b      	beq.n	8005160 <cmp_lfn+0xcc>
 8005148:	89fb      	ldrh	r3, [r7, #14]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <cmp_lfn+0xcc>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <cmp_lfn+0xcc>
		return 0;
 800515c:	2300      	movs	r3, #0
 800515e:	e000      	b.n	8005162 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8005160:	2301      	movs	r3, #1
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	08008b20 	.word	0x08008b20

08005170 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005170:	b480      	push	{r7}
 8005172:	b089      	sub	sp, #36	; 0x24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	4611      	mov	r1, r2
 800517c:	461a      	mov	r2, r3
 800517e:	460b      	mov	r3, r1
 8005180:	71fb      	strb	r3, [r7, #7]
 8005182:	4613      	mov	r3, r2
 8005184:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	330d      	adds	r3, #13
 800518a:	79ba      	ldrb	r2, [r7, #6]
 800518c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	330b      	adds	r3, #11
 8005192:	220f      	movs	r2, #15
 8005194:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	330c      	adds	r3, #12
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	331a      	adds	r3, #26
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	331b      	adds	r3, #27
 80051aa:	2200      	movs	r2, #0
 80051ac:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	1e5a      	subs	r2, r3, #1
 80051b2:	4613      	mov	r3, r2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	82fb      	strh	r3, [r7, #22]
 80051c2:	2300      	movs	r3, #0
 80051c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80051c6:	8afb      	ldrh	r3, [r7, #22]
 80051c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d007      	beq.n	80051e0 <fit_lfn+0x70>
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	61fa      	str	r2, [r7, #28]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80051e0:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <fit_lfn+0xe4>)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4413      	add	r3, r2
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4413      	add	r3, r2
 80051ee:	8afa      	ldrh	r2, [r7, #22]
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	8afb      	ldrh	r3, [r7, #22]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	b299      	uxth	r1, r3
 80051fa:	4a16      	ldr	r2, [pc, #88]	; (8005254 <fit_lfn+0xe4>)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	4413      	add	r3, r2
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	4413      	add	r3, r2
 8005208:	b2ca      	uxtb	r2, r1
 800520a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800520c:	8afb      	ldrh	r3, [r7, #22]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d102      	bne.n	8005218 <fit_lfn+0xa8>
 8005212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005216:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	3301      	adds	r3, #1
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b0c      	cmp	r3, #12
 8005222:	d9d0      	bls.n	80051c6 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005224:	8afb      	ldrh	r3, [r7, #22]
 8005226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800522a:	4293      	cmp	r3, r2
 800522c:	d006      	beq.n	800523c <fit_lfn+0xcc>
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <fit_lfn+0xd4>
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005242:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	79fa      	ldrb	r2, [r7, #7]
 8005248:	701a      	strb	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	3724      	adds	r7, #36	; 0x24
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr
 8005254:	08008b20 	.word	0x08008b20

08005258 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08c      	sub	sp, #48	; 0x30
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005266:	220b      	movs	r2, #11
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7fe fcae 	bl	8003bcc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b05      	cmp	r3, #5
 8005274:	d92b      	bls.n	80052ce <gen_numname+0x76>
		sr = seq;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800527a:	e022      	b.n	80052c2 <gen_numname+0x6a>
			wc = *lfn++;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1c9a      	adds	r2, r3, #2
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005286:	2300      	movs	r3, #0
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
 800528a:	e017      	b.n	80052bc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	005a      	lsls	r2, r3, #1
 8005290:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	4413      	add	r3, r2
 8005298:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800529a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <gen_numname+0x5e>
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80052b0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80052b4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	3301      	adds	r3, #1
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	2b0f      	cmp	r3, #15
 80052c0:	d9e4      	bls.n	800528c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1d8      	bne.n	800527c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80052ce:	2307      	movs	r3, #7
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	3330      	adds	r3, #48	; 0x30
 80052de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80052e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052e6:	2b39      	cmp	r3, #57	; 0x39
 80052e8:	d904      	bls.n	80052f4 <gen_numname+0x9c>
 80052ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052ee:	3307      	adds	r3, #7
 80052f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	1e5a      	subs	r2, r3, #1
 80052f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80052fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80052fe:	4413      	add	r3, r2
 8005300:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005304:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	091b      	lsrs	r3, r3, #4
 800530c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1de      	bne.n	80052d2 <gen_numname+0x7a>
	ns[i] = '~';
 8005314:	f107 0214 	add.w	r2, r7, #20
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	4413      	add	r3, r2
 800531c:	227e      	movs	r2, #126	; 0x7e
 800531e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005320:	2300      	movs	r3, #0
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
 8005324:	e002      	b.n	800532c <gen_numname+0xd4>
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	3301      	adds	r3, #1
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
 800532c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	429a      	cmp	r2, r3
 8005332:	d205      	bcs.n	8005340 <gen_numname+0xe8>
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	4413      	add	r3, r2
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b20      	cmp	r3, #32
 800533e:	d1f2      	bne.n	8005326 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	2b07      	cmp	r3, #7
 8005344:	d808      	bhi.n	8005358 <gen_numname+0x100>
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	62ba      	str	r2, [r7, #40]	; 0x28
 800534c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005350:	4413      	add	r3, r2
 8005352:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005356:	e000      	b.n	800535a <gen_numname+0x102>
 8005358:	2120      	movs	r1, #32
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	627a      	str	r2, [r7, #36]	; 0x24
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	460a      	mov	r2, r1
 8005366:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	2b07      	cmp	r3, #7
 800536c:	d9e8      	bls.n	8005340 <gen_numname+0xe8>
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	3730      	adds	r7, #48	; 0x30
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005384:	230b      	movs	r3, #11
 8005386:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	b2da      	uxtb	r2, r3
 800538c:	0852      	lsrs	r2, r2, #1
 800538e:	01db      	lsls	r3, r3, #7
 8005390:	4313      	orrs	r3, r2
 8005392:	b2da      	uxtb	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	1c59      	adds	r1, r3, #1
 8005398:	6079      	str	r1, [r7, #4]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	4413      	add	r3, r2
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1ed      	bne.n	8005388 <sum_sfn+0x10>
	return sum;
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr

080053b8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80053c0:	2100      	movs	r1, #0
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fb83 	bl	8004ace <dir_sdi>
 80053c8:	4603      	mov	r3, r0
 80053ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <dir_find+0x1e>
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	e0c1      	b.n	800555a <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80053d6:	23ff      	movs	r3, #255	; 0xff
 80053d8:	753b      	strb	r3, [r7, #20]
 80053da:	7d3b      	ldrb	r3, [r7, #20]
 80053dc:	757b      	strb	r3, [r7, #21]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80053e4:	3304      	adds	r3, #4
 80053e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053ea:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053fa:	3310      	adds	r3, #16
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f7fe fe79 	bl	80040f8 <move_window>
 8005406:	4603      	mov	r3, r0
 8005408:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800540a:	7dfb      	ldrb	r3, [r7, #23]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 809e 	bne.w	800554e <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005418:	3314      	adds	r3, #20
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005424:	7dbb      	ldrb	r3, [r7, #22]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d102      	bne.n	8005430 <dir_find+0x78>
 800542a:	2304      	movs	r3, #4
 800542c:	75fb      	strb	r3, [r7, #23]
 800542e:	e093      	b.n	8005558 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	330b      	adds	r3, #11
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800543a:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800543c:	7dbb      	ldrb	r3, [r7, #22]
 800543e:	2be5      	cmp	r3, #229	; 0xe5
 8005440:	d007      	beq.n	8005452 <dir_find+0x9a>
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00c      	beq.n	8005466 <dir_find+0xae>
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b0f      	cmp	r3, #15
 8005450:	d009      	beq.n	8005466 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005452:	23ff      	movs	r3, #255	; 0xff
 8005454:	757b      	strb	r3, [r7, #21]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800545c:	3304      	adds	r3, #4
 800545e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005462:	801a      	strh	r2, [r3, #0]
 8005464:	e068      	b.n	8005538 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b0f      	cmp	r3, #15
 800546a:	d139      	bne.n	80054e0 <dir_find+0x128>
				if (dp->lfn) {
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d05f      	beq.n	8005538 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005478:	7dbb      	ldrb	r3, [r7, #22]
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d012      	beq.n	80054a8 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	7b5b      	ldrb	r3, [r3, #13]
 8005486:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8005488:	7dbb      	ldrb	r3, [r7, #22]
 800548a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800548e:	75bb      	strb	r3, [r7, #22]
 8005490:	7dbb      	ldrb	r3, [r7, #22]
 8005492:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549a:	3306      	adds	r3, #6
 800549c:	881a      	ldrh	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054a4:	3304      	adds	r3, #4
 80054a6:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80054a8:	7dba      	ldrb	r2, [r7, #22]
 80054aa:	7d7b      	ldrb	r3, [r7, #21]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d114      	bne.n	80054da <dir_find+0x122>
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	330d      	adds	r3, #13
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	7d3a      	ldrb	r2, [r7, #20]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d10e      	bne.n	80054da <dir_find+0x122>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6939      	ldr	r1, [r7, #16]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff fde4 	bl	8005094 <cmp_lfn>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <dir_find+0x122>
 80054d2:	7d7b      	ldrb	r3, [r7, #21]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	e000      	b.n	80054dc <dir_find+0x124>
 80054da:	23ff      	movs	r3, #255	; 0xff
 80054dc:	757b      	strb	r3, [r7, #21]
 80054de:	e02b      	b.n	8005538 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80054e0:	7d7b      	ldrb	r3, [r7, #21]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d107      	bne.n	80054f6 <dir_find+0x13e>
 80054e6:	6938      	ldr	r0, [r7, #16]
 80054e8:	f7ff ff46 	bl	8005378 <sum_sfn>
 80054ec:	4603      	mov	r3, r0
 80054ee:	461a      	mov	r2, r3
 80054f0:	7d3b      	ldrb	r3, [r7, #20]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d02d      	beq.n	8005552 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054fc:	3318      	adds	r3, #24
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330b      	adds	r3, #11
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10c      	bne.n	8005526 <dir_find+0x16e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005512:	3318      	adds	r3, #24
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	220b      	movs	r2, #11
 8005518:	4619      	mov	r1, r3
 800551a:	6938      	ldr	r0, [r7, #16]
 800551c:	f7fe fb8e 	bl	8003c3c <mem_cmp>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d017      	beq.n	8005556 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005526:	23ff      	movs	r3, #255	; 0xff
 8005528:	757b      	strb	r3, [r7, #21]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005530:	3304      	adds	r3, #4
 8005532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005536:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005538:	2100      	movs	r1, #0
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff fba2 	bl	8004c84 <dir_next>
 8005540:	4603      	mov	r3, r0
 8005542:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005544:	7dfb      	ldrb	r3, [r7, #23]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f43f af50 	beq.w	80053ec <dir_find+0x34>
 800554c:	e004      	b.n	8005558 <dir_find+0x1a0>
		if (res != FR_OK) break;
 800554e:	bf00      	nop
 8005550:	e002      	b.n	8005558 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005552:	bf00      	nop
 8005554:	e000      	b.n	8005558 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005556:	bf00      	nop

	return res;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08c      	sub	sp, #48	; 0x30
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005572:	3318      	adds	r3, #24
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	623b      	str	r3, [r7, #32]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8005582:	f107 030c 	add.w	r3, r7, #12
 8005586:	220c      	movs	r2, #12
 8005588:	6a39      	ldr	r1, [r7, #32]
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe fb1e 	bl	8003bcc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005590:	7dfb      	ldrb	r3, [r7, #23]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d039      	beq.n	800560e <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	330b      	adds	r3, #11
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 80055ac:	2301      	movs	r3, #1
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b0:	e013      	b.n	80055da <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80055b2:	f107 010c 	add.w	r1, r7, #12
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	6a38      	ldr	r0, [r7, #32]
 80055bc:	f7ff fe4c 	bl	8005258 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff fef9 	bl	80053b8 <dir_find>
 80055c6:	4603      	mov	r3, r0
 80055c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80055cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d106      	bne.n	80055e2 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	3301      	adds	r3, #1
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	2b63      	cmp	r3, #99	; 0x63
 80055de:	d9e8      	bls.n	80055b2 <dir_register+0x4e>
 80055e0:	e000      	b.n	80055e4 <dir_register+0x80>
			if (res != FR_OK) break;
 80055e2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	2b64      	cmp	r3, #100	; 0x64
 80055e8:	d101      	bne.n	80055ee <dir_register+0x8a>
 80055ea:	2307      	movs	r3, #7
 80055ec:	e0e3      	b.n	80057b6 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80055ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d002      	beq.n	80055fc <dir_register+0x98>
 80055f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055fa:	e0dc      	b.n	80057b6 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	330b      	adds	r3, #11
 8005600:	7dfa      	ldrb	r2, [r7, #23]
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d014      	beq.n	8005642 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 8005618:	2300      	movs	r3, #0
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
 800561c:	e002      	b.n	8005624 <dir_register+0xc0>
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	3301      	adds	r3, #1
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f5      	bne.n	800561e <dir_register+0xba>
		nent = (n + 25) / 13;
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	3319      	adds	r3, #25
 8005636:	4a62      	ldr	r2, [pc, #392]	; (80057c0 <dir_register+0x25c>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	089b      	lsrs	r3, r3, #2
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
 8005640:	e001      	b.n	8005646 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8005642:	2301      	movs	r3, #1
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff fc7d 	bl	8004f48 <dir_alloc>
 800564e:	4603      	mov	r3, r0
 8005650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005658:	2b00      	cmp	r3, #0
 800565a:	d160      	bne.n	800571e <dir_register+0x1ba>
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	3b01      	subs	r3, #1
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	2b00      	cmp	r3, #0
 8005666:	d05a      	beq.n	800571e <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566e:	3306      	adds	r3, #6
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff fa27 	bl	8004ace <dir_sdi>
 8005680:	4603      	mov	r3, r0
 8005682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800568a:	2b00      	cmp	r3, #0
 800568c:	d147      	bne.n	800571e <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005694:	3318      	adds	r3, #24
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff fe6d 	bl	8005378 <sum_sfn>
 800569e:	4603      	mov	r3, r0
 80056a0:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b0:	3310      	adds	r3, #16
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f7fe fd1e 	bl	80040f8 <move_window>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80056c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d128      	bne.n	800571c <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d8:	3314      	adds	r3, #20
 80056da:	6819      	ldr	r1, [r3, #0]
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	7efb      	ldrb	r3, [r7, #27]
 80056e2:	f7ff fd45 	bl	8005170 <fit_lfn>
				dp->fs->wflag = 1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f2:	3304      	adds	r3, #4
 80056f4:	2201      	movs	r2, #1
 80056f6:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 80056f8:	2100      	movs	r1, #0
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff fac2 	bl	8004c84 <dir_next>
 8005700:	4603      	mov	r3, r0
 8005702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005706:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800570a:	2b00      	cmp	r3, #0
 800570c:	d107      	bne.n	800571e <dir_register+0x1ba>
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	3b01      	subs	r3, #1
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1c3      	bne.n	80056a2 <dir_register+0x13e>
 800571a:	e000      	b.n	800571e <dir_register+0x1ba>
				if (res != FR_OK) break;
 800571c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800571e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005722:	2b00      	cmp	r3, #0
 8005724:	d145      	bne.n	80057b2 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005734:	3310      	adds	r3, #16
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f7fe fcdc 	bl	80040f8 <move_window>
 8005740:	4603      	mov	r3, r0
 8005742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800574a:	2b00      	cmp	r3, #0
 800574c:	d131      	bne.n	80057b2 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005754:	3314      	adds	r3, #20
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2220      	movs	r2, #32
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fa53 	bl	8003c08 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005768:	3314      	adds	r3, #20
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005772:	3318      	adds	r3, #24
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	220b      	movs	r2, #11
 8005778:	4619      	mov	r1, r3
 800577a:	f7fe fa27 	bl	8003bcc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005784:	3318      	adds	r3, #24
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	330b      	adds	r3, #11
 800578a:	781a      	ldrb	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005792:	3314      	adds	r3, #20
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	f002 0218 	and.w	r2, r2, #24
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ac:	3304      	adds	r3, #4
 80057ae:	2201      	movs	r2, #1
 80057b0:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 80057b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3730      	adds	r7, #48	; 0x30
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	4ec4ec4f 	.word	0x4ec4ec4f

080057c4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	; 0x28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	e002      	b.n	80057dc <create_name+0x18>
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	3301      	adds	r3, #1
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b2f      	cmp	r3, #47	; 0x2f
 80057e2:	d0f8      	beq.n	80057d6 <create_name+0x12>
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b5c      	cmp	r3, #92	; 0x5c
 80057ea:	d0f4      	beq.n	80057d6 <create_name+0x12>
	lfn = dp->lfn;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	61ba      	str	r2, [r7, #24]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4413      	add	r3, r2
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800580c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800580e:	2b1f      	cmp	r3, #31
 8005810:	d92f      	bls.n	8005872 <create_name+0xae>
 8005812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005814:	2b2f      	cmp	r3, #47	; 0x2f
 8005816:	d02c      	beq.n	8005872 <create_name+0xae>
 8005818:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800581a:	2b5c      	cmp	r3, #92	; 0x5c
 800581c:	d029      	beq.n	8005872 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2bfe      	cmp	r3, #254	; 0xfe
 8005822:	d901      	bls.n	8005828 <create_name+0x64>
			return FR_INVALID_NAME;
 8005824:	2306      	movs	r3, #6
 8005826:	e18b      	b.n	8005b40 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800582a:	b2db      	uxtb	r3, r3
 800582c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800582e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005830:	2101      	movs	r1, #1
 8005832:	4618      	mov	r0, r3
 8005834:	f002 fb66 	bl	8007f04 <ff_convert>
 8005838:	4603      	mov	r3, r0
 800583a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800583c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <create_name+0x82>
 8005842:	2306      	movs	r3, #6
 8005844:	e17c      	b.n	8005b40 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005848:	2b7f      	cmp	r3, #127	; 0x7f
 800584a:	d809      	bhi.n	8005860 <create_name+0x9c>
 800584c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800584e:	4619      	mov	r1, r3
 8005850:	488f      	ldr	r0, [pc, #572]	; (8005a90 <create_name+0x2cc>)
 8005852:	f7fe fa19 	bl	8003c88 <chk_chr>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <create_name+0x9c>
			return FR_INVALID_NAME;
 800585c:	2306      	movs	r3, #6
 800585e:	e16f      	b.n	8005b40 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	617a      	str	r2, [r7, #20]
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800586e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005870:	e7c5      	b.n	80057fe <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	441a      	add	r2, r3
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800587c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800587e:	2b1f      	cmp	r3, #31
 8005880:	d801      	bhi.n	8005886 <create_name+0xc2>
 8005882:	2304      	movs	r3, #4
 8005884:	e000      	b.n	8005888 <create_name+0xc4>
 8005886:	2300      	movs	r3, #0
 8005888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800588c:	e011      	b.n	80058b2 <create_name+0xee>
		w = lfn[di - 1];
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005894:	3b01      	subs	r3, #1
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80058a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d002      	beq.n	80058ac <create_name+0xe8>
 80058a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058a8:	2b2e      	cmp	r3, #46	; 0x2e
 80058aa:	d106      	bne.n	80058ba <create_name+0xf6>
		di--;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1ea      	bne.n	800588e <create_name+0xca>
 80058b8:	e000      	b.n	80058bc <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80058ba:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <create_name+0x102>
 80058c2:	2306      	movs	r3, #6
 80058c4:	e13c      	b.n	8005b40 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	2200      	movs	r2, #0
 80058d0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d8:	3318      	adds	r3, #24
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	220b      	movs	r2, #11
 80058de:	2120      	movs	r1, #32
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fe f991 	bl	8003c08 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80058e6:	2300      	movs	r3, #0
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	e002      	b.n	80058f2 <create_name+0x12e>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	3301      	adds	r3, #1
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d0f5      	beq.n	80058ec <create_name+0x128>
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	2b2e      	cmp	r3, #46	; 0x2e
 800590c:	d0ee      	beq.n	80058ec <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d009      	beq.n	8005928 <create_name+0x164>
 8005914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005918:	f043 0303 	orr.w	r3, r3, #3
 800591c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005920:	e002      	b.n	8005928 <create_name+0x164>
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	3b01      	subs	r3, #1
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <create_name+0x17e>
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005934:	3b01      	subs	r3, #1
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	2b2e      	cmp	r3, #46	; 0x2e
 8005940:	d1ef      	bne.n	8005922 <create_name+0x15e>

	b = i = 0; ni = 8;
 8005942:	2300      	movs	r3, #0
 8005944:	623b      	str	r3, [r7, #32]
 8005946:	2300      	movs	r3, #0
 8005948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800594c:	2308      	movs	r3, #8
 800594e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	61ba      	str	r2, [r7, #24]
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005960:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 8092 	beq.w	8005a8c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596a:	2b20      	cmp	r3, #32
 800596c:	d006      	beq.n	800597c <create_name+0x1b8>
 800596e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005970:	2b2e      	cmp	r3, #46	; 0x2e
 8005972:	d10a      	bne.n	800598a <create_name+0x1c6>
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	429a      	cmp	r2, r3
 800597a:	d006      	beq.n	800598a <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800597c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005980:	f043 0303 	orr.w	r3, r3, #3
 8005984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005988:	e07f      	b.n	8005a8a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	429a      	cmp	r2, r3
 8005990:	d203      	bcs.n	800599a <create_name+0x1d6>
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	429a      	cmp	r2, r3
 8005998:	d123      	bne.n	80059e2 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	2b0b      	cmp	r3, #11
 800599e:	d106      	bne.n	80059ae <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 80059a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059a4:	f043 0303 	orr.w	r3, r3, #3
 80059a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059ac:	e077      	b.n	8005a9e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d005      	beq.n	80059c2 <create_name+0x1fe>
 80059b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059ba:	f043 0303 	orr.w	r3, r3, #3
 80059be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d868      	bhi.n	8005a9c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	2308      	movs	r3, #8
 80059d0:	623b      	str	r3, [r7, #32]
 80059d2:	230b      	movs	r3, #11
 80059d4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80059d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80059e0:	e053      	b.n	8005a8a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80059e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059e4:	2b7f      	cmp	r3, #127	; 0x7f
 80059e6:	d914      	bls.n	8005a12 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80059e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ea:	2100      	movs	r1, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 fa89 	bl	8007f04 <ff_convert>
 80059f2:	4603      	mov	r3, r0
 80059f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80059f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <create_name+0x242>
 80059fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059fe:	3b80      	subs	r3, #128	; 0x80
 8005a00:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <create_name+0x2d0>)
 8005a02:	5cd3      	ldrb	r3, [r2, r3]
 8005a04:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a0a:	f043 0302 	orr.w	r3, r3, #2
 8005a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <create_name+0x264>
 8005a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	481e      	ldr	r0, [pc, #120]	; (8005a98 <create_name+0x2d4>)
 8005a1e:	f7fe f933 	bl	8003c88 <chk_chr>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005a28:	235f      	movs	r3, #95	; 0x5f
 8005a2a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a30:	f043 0303 	orr.w	r3, r3, #3
 8005a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a38:	e01b      	b.n	8005a72 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a3c:	2b40      	cmp	r3, #64	; 0x40
 8005a3e:	d909      	bls.n	8005a54 <create_name+0x290>
 8005a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a42:	2b5a      	cmp	r3, #90	; 0x5a
 8005a44:	d806      	bhi.n	8005a54 <create_name+0x290>
					b |= 2;
 8005a46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a4a:	f043 0302 	orr.w	r3, r3, #2
 8005a4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a52:	e00e      	b.n	8005a72 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005a54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a56:	2b60      	cmp	r3, #96	; 0x60
 8005a58:	d90b      	bls.n	8005a72 <create_name+0x2ae>
 8005a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a5c:	2b7a      	cmp	r3, #122	; 0x7a
 8005a5e:	d808      	bhi.n	8005a72 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8005a60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a64:	f043 0301 	orr.w	r3, r3, #1
 8005a68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a6e:	3b20      	subs	r3, #32
 8005a70:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a78:	3318      	adds	r3, #24
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	1c59      	adds	r1, r3, #1
 8005a80:	6239      	str	r1, [r7, #32]
 8005a82:	4413      	add	r3, r2
 8005a84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8005a8a:	e761      	b.n	8005950 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8005a8c:	bf00      	nop
 8005a8e:	e006      	b.n	8005a9e <create_name+0x2da>
 8005a90:	08008a40 	.word	0x08008a40
 8005a94:	08008aa0 	.word	0x08008aa0
 8005a98:	08008a4c 	.word	0x08008a4c
			if (si > di) break;			/* No extension */
 8005a9c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa4:	3318      	adds	r3, #24
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2be5      	cmp	r3, #229	; 0xe5
 8005aac:	d106      	bne.n	8005abc <create_name+0x2f8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab4:	3318      	adds	r3, #24
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2205      	movs	r2, #5
 8005aba:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d104      	bne.n	8005acc <create_name+0x308>
 8005ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005acc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ad0:	f003 030c 	and.w	r3, r3, #12
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	d005      	beq.n	8005ae4 <create_name+0x320>
 8005ad8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d105      	bne.n	8005af0 <create_name+0x32c>
		cf |= NS_LFN;
 8005ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae8:	f043 0302 	orr.w	r3, r3, #2
 8005aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d117      	bne.n	8005b2c <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005afc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b00:	f003 0303 	and.w	r3, r3, #3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d105      	bne.n	8005b14 <create_name+0x350>
 8005b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b0c:	f043 0310 	orr.w	r3, r3, #16
 8005b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005b14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b18:	f003 030c 	and.w	r3, r3, #12
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d105      	bne.n	8005b2c <create_name+0x368>
 8005b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b24:	f043 0308 	orr.w	r3, r3, #8
 8005b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b32:	3318      	adds	r3, #24
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330b      	adds	r3, #11
 8005b38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b3c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005b3e:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3728      	adds	r7, #40	; 0x28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b2f      	cmp	r3, #47	; 0x2f
 8005b58:	d003      	beq.n	8005b62 <follow_path+0x1a>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b5c      	cmp	r3, #92	; 0x5c
 8005b60:	d102      	bne.n	8005b68 <follow_path+0x20>
		path++;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	3301      	adds	r3, #1
 8005b66:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6e:	3308      	adds	r3, #8
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b1f      	cmp	r3, #31
 8005b7a:	d80c      	bhi.n	8005b96 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fe ffa5 	bl	8004ace <dir_sdi>
 8005b84:	4603      	mov	r3, r0
 8005b86:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8e:	3314      	adds	r3, #20
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e04c      	b.n	8005c30 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b96:	463b      	mov	r3, r7
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff fe12 	bl	80057c4 <create_name>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d13d      	bne.n	8005c26 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff fc04 	bl	80053b8 <dir_find>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bba:	3318      	adds	r3, #24
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	7adb      	ldrb	r3, [r3, #11]
 8005bc0:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d12d      	bne.n	8005c2a <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d128      	bne.n	8005c2a <follow_path+0xe2>
 8005bd8:	2305      	movs	r3, #5
 8005bda:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005bdc:	e025      	b.n	8005c2a <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d122      	bne.n	8005c2e <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bee:	3314      	adds	r3, #20
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	330b      	adds	r3, #11
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	f003 0310 	and.w	r3, r3, #16
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d102      	bne.n	8005c08 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8005c02:	2305      	movs	r3, #5
 8005c04:	73fb      	strb	r3, [r7, #15]
 8005c06:	e013      	b.n	8005c30 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff f9e9 	bl	8004fea <ld_clust>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c20:	3308      	adds	r3, #8
 8005c22:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c24:	e7b7      	b.n	8005b96 <follow_path+0x4e>
			if (res != FR_OK) break;
 8005c26:	bf00      	nop
 8005c28:	e002      	b.n	8005c30 <follow_path+0xe8>
				break;
 8005c2a:	bf00      	nop
 8005c2c:	e000      	b.n	8005c30 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c2e:	bf00      	nop
		}
	}

	return res;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b087      	sub	sp, #28
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d031      	beq.n	8005cb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e002      	b.n	8005c5e <get_ldnumber+0x24>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b1f      	cmp	r3, #31
 8005c64:	d903      	bls.n	8005c6e <get_ldnumber+0x34>
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b3a      	cmp	r3, #58	; 0x3a
 8005c6c:	d1f4      	bne.n	8005c58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b3a      	cmp	r3, #58	; 0x3a
 8005c74:	d11c      	bne.n	8005cb0 <get_ldnumber+0x76>
			tp = *path;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	60fa      	str	r2, [r7, #12]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	3b30      	subs	r3, #48	; 0x30
 8005c86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b09      	cmp	r3, #9
 8005c8c:	d80e      	bhi.n	8005cac <get_ldnumber+0x72>
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d10a      	bne.n	8005cac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d107      	bne.n	8005cac <get_ldnumber+0x72>
					vol = (int)i;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	e002      	b.n	8005cb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005cb4:	693b      	ldr	r3, [r7, #16]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005cdc:	330c      	adds	r3, #12
 8005cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ce2:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fe fa06 	bl	80040f8 <move_window>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <check_fs+0x36>
		return 3;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e04a      	b.n	8005d8c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	b21a      	sxth	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005d0a:	b21b      	sxth	r3, r3
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	b21b      	sxth	r3, r3
 8005d10:	4a20      	ldr	r2, [pc, #128]	; (8005d94 <check_fs+0xd4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d001      	beq.n	8005d1a <check_fs+0x5a>
		return 2;
 8005d16:	2302      	movs	r3, #2
 8005d18:	e038      	b.n	8005d8c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3336      	adds	r3, #54	; 0x36
 8005d1e:	3303      	adds	r3, #3
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	061a      	lsls	r2, r3, #24
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3336      	adds	r3, #54	; 0x36
 8005d28:	3302      	adds	r3, #2
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	041b      	lsls	r3, r3, #16
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	3236      	adds	r2, #54	; 0x36
 8005d34:	3201      	adds	r2, #1
 8005d36:	7812      	ldrb	r2, [r2, #0]
 8005d38:	0212      	lsls	r2, r2, #8
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <check_fs+0xd8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d101      	bne.n	8005d52 <check_fs+0x92>
		return 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e01c      	b.n	8005d8c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3352      	adds	r3, #82	; 0x52
 8005d56:	3303      	adds	r3, #3
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	061a      	lsls	r2, r3, #24
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3352      	adds	r3, #82	; 0x52
 8005d60:	3302      	adds	r3, #2
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	041b      	lsls	r3, r3, #16
 8005d66:	4313      	orrs	r3, r2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	3252      	adds	r2, #82	; 0x52
 8005d6c:	3201      	adds	r2, #1
 8005d6e:	7812      	ldrb	r2, [r2, #0]
 8005d70:	0212      	lsls	r2, r2, #8
 8005d72:	4313      	orrs	r3, r2
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d80:	4a05      	ldr	r2, [pc, #20]	; (8005d98 <check_fs+0xd8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d101      	bne.n	8005d8a <check_fs+0xca>
		return 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	e000      	b.n	8005d8c <check_fs+0xcc>

	return 1;
 8005d8a:	2301      	movs	r3, #1
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	ffffaa55 	.word	0xffffaa55
 8005d98:	00544146 	.word	0x00544146

08005d9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b096      	sub	sp, #88	; 0x58
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005db0:	68b8      	ldr	r0, [r7, #8]
 8005db2:	f7ff ff42 	bl	8005c3a <get_ldnumber>
 8005db6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	da01      	bge.n	8005dc2 <find_volume+0x26>
 8005dbe:	230b      	movs	r3, #11
 8005dc0:	e33c      	b.n	800643c <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005dc2:	4ab3      	ldr	r2, [pc, #716]	; (8006090 <find_volume+0x2f4>)
 8005dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <find_volume+0x3a>
 8005dd2:	230c      	movs	r3, #12
 8005dd4:	e332      	b.n	800643c <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dda:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01d      	beq.n	8005e24 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dee:	3301      	adds	r3, #1
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fd fe4c 	bl	8003a90 <disk_status>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005dfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10c      	bne.n	8005e24 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005e0a:	79fb      	ldrb	r3, [r7, #7]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <find_volume+0x84>
 8005e10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8005e1c:	230a      	movs	r3, #10
 8005e1e:	e30d      	b.n	800643c <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8005e20:	2300      	movs	r3, #0
 8005e22:	e30b      	b.n	800643c <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e38:	3301      	adds	r3, #1
 8005e3a:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e42:	3301      	adds	r3, #1
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd fe3c 	bl	8003ac4 <disk_initialize>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005e52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e2ec      	b.n	800643c <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <find_volume+0xdc>
 8005e68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8005e74:	230a      	movs	r3, #10
 8005e76:	e2e1      	b.n	800643c <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e7e:	3301      	adds	r3, #1
 8005e80:	7818      	ldrb	r0, [r3, #0]
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e88:	330a      	adds	r3, #10
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	2102      	movs	r1, #2
 8005e8e:	f7fd fe7f 	bl	8003b90 <disk_ioctl>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10f      	bne.n	8005eb8 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9e:	330a      	adds	r3, #10
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea6:	d307      	bcc.n	8005eb8 <find_volume+0x11c>
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eae:	330a      	adds	r3, #10
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb6:	d901      	bls.n	8005ebc <find_volume+0x120>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e2bf      	b.n	800643c <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005ec0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ec2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ec4:	f7ff fefc 	bl	8005cc0 <check_fs>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005ece:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d155      	bne.n	8005f82 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eda:	e029      	b.n	8005f30 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005ee6:	4413      	add	r3, r2
 8005ee8:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	3304      	adds	r3, #4
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d012      	beq.n	8005f1a <find_volume+0x17e>
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	330b      	adds	r3, #11
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	061a      	lsls	r2, r3, #24
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	330a      	adds	r3, #10
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	041b      	lsls	r3, r3, #16
 8005f04:	4313      	orrs	r3, r2
 8005f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f08:	3209      	adds	r2, #9
 8005f0a:	7812      	ldrb	r2, [r2, #0]
 8005f0c:	0212      	lsls	r2, r2, #8
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f12:	3208      	adds	r2, #8
 8005f14:	7812      	ldrb	r2, [r2, #0]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	e000      	b.n	8005f1c <find_volume+0x180>
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005f24:	440b      	add	r3, r1
 8005f26:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d9d2      	bls.n	8005edc <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005f36:	2300      	movs	r3, #0
 8005f38:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <find_volume+0x1aa>
 8005f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f42:	3b01      	subs	r3, #1
 8005f44:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005f4e:	4413      	add	r3, r2
 8005f50:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005f54:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <find_volume+0x1cc>
 8005f5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f60:	f7ff feae 	bl	8005cc0 <check_fs>
 8005f64:	4603      	mov	r3, r0
 8005f66:	e000      	b.n	8005f6a <find_volume+0x1ce>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005f6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <find_volume+0x1e6>
 8005f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f78:	3301      	adds	r3, #1
 8005f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d9e1      	bls.n	8005f46 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005f82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d101      	bne.n	8005f8e <find_volume+0x1f2>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e256      	b.n	800643c <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005f8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <find_volume+0x1fe>
 8005f96:	230d      	movs	r3, #13
 8005f98:	e250      	b.n	800643c <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	7b1b      	ldrb	r3, [r3, #12]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	b21a      	sxth	r2, r3
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	7adb      	ldrb	r3, [r3, #11]
 8005fa6:	b21b      	sxth	r3, r3
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	b21a      	sxth	r2, r3
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb2:	330a      	adds	r3, #10
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b21b      	sxth	r3, r3
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d001      	beq.n	8005fc0 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8005fbc:	230d      	movs	r3, #13
 8005fbe:	e23d      	b.n	800643c <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	7ddb      	ldrb	r3, [r3, #23]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	b21a      	sxth	r2, r3
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	7d9b      	ldrb	r3, [r3, #22]
 8005fcc:	b21b      	sxth	r3, r3
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	b21b      	sxth	r3, r3
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d112      	bne.n	8006002 <find_volume+0x266>
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005fe2:	061a      	lsls	r2, r3, #24
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	4313      	orrs	r3, r2
 8005fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ff0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005ff4:	0212      	lsls	r2, r2, #8
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ffa:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005ffe:	4313      	orrs	r3, r2
 8006000:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006008:	3318      	adds	r3, #24
 800600a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800600c:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	7c1a      	ldrb	r2, [r3, #16]
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006018:	3303      	adds	r3, #3
 800601a:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006022:	3303      	adds	r3, #3
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d008      	beq.n	800603c <find_volume+0x2a0>
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006030:	3303      	adds	r3, #3
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d001      	beq.n	800603c <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8006038:	230d      	movs	r3, #13
 800603a:	e1ff      	b.n	800643c <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006042:	3303      	adds	r3, #3
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	7b5a      	ldrb	r2, [r3, #13]
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605a:	3302      	adds	r3, #2
 800605c:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006064:	3302      	adds	r3, #2
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00e      	beq.n	800608a <find_volume+0x2ee>
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006072:	3302      	adds	r3, #2
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607e:	3302      	adds	r3, #2
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	3b01      	subs	r3, #1
 8006084:	4013      	ands	r3, r2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800608a:	230d      	movs	r3, #13
 800608c:	e1d6      	b.n	800643c <find_volume+0x6a0>
 800608e:	bf00      	nop
 8006090:	200000bc 	.word	0x200000bc

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	7c9b      	ldrb	r3, [r3, #18]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	b21a      	sxth	r2, r3
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	7c5b      	ldrb	r3, [r3, #17]
 80060a0:	b21b      	sxth	r3, r3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b21b      	sxth	r3, r3
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ae:	3308      	adds	r3, #8
 80060b0:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b8:	3308      	adds	r3, #8
 80060ba:	881a      	ldrh	r2, [r3, #0]
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c2:	330a      	adds	r3, #10
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	fbb2 f1f3 	udiv	r1, r2, r3
 80060ce:	fb03 f301 	mul.w	r3, r3, r1
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 80060da:	230d      	movs	r3, #13
 80060dc:	e1ae      	b.n	800643c <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	7d1b      	ldrb	r3, [r3, #20]
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	b21a      	sxth	r2, r3
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	7cdb      	ldrb	r3, [r3, #19]
 80060ea:	b21b      	sxth	r3, r3
 80060ec:	4313      	orrs	r3, r2
 80060ee:	b21b      	sxth	r3, r3
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80060f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d112      	bne.n	8006120 <find_volume+0x384>
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006100:	061a      	lsls	r2, r3, #24
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006108:	041b      	lsls	r3, r3, #16
 800610a:	4313      	orrs	r3, r2
 800610c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800610e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006112:	0212      	lsls	r2, r2, #8
 8006114:	4313      	orrs	r3, r2
 8006116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006118:	f892 2020 	ldrb.w	r2, [r2, #32]
 800611c:	4313      	orrs	r3, r2
 800611e:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006122:	7bdb      	ldrb	r3, [r3, #15]
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	b21a      	sxth	r2, r3
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	7b9b      	ldrb	r3, [r3, #14]
 800612c:	b21b      	sxth	r3, r3
 800612e:	4313      	orrs	r3, r2
 8006130:	b21b      	sxth	r3, r3
 8006132:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006134:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <find_volume+0x3a2>
 800613a:	230d      	movs	r3, #13
 800613c:	e17e      	b.n	800643c <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800613e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006142:	441a      	add	r2, r3
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800614a:	3308      	adds	r3, #8
 800614c:	8819      	ldrh	r1, [r3, #0]
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006154:	330a      	adds	r3, #10
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	b29b      	uxth	r3, r3
 800615c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006160:	b29b      	uxth	r3, r3
 8006162:	4413      	add	r3, r2
 8006164:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	429a      	cmp	r2, r3
 800616c:	d201      	bcs.n	8006172 <find_volume+0x3d6>
 800616e:	230d      	movs	r3, #13
 8006170:	e164      	b.n	800643c <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	1ad2      	subs	r2, r2, r3
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800617e:	3302      	adds	r3, #2
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <find_volume+0x3f6>
 800618e:	230d      	movs	r3, #13
 8006190:	e154      	b.n	800643c <find_volume+0x6a0>
	fmt = FS_FAT12;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800619e:	4293      	cmp	r3, r2
 80061a0:	d902      	bls.n	80061a8 <find_volume+0x40c>
 80061a2:	2302      	movs	r3, #2
 80061a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d902      	bls.n	80061b8 <find_volume+0x41c>
 80061b2:	2303      	movs	r3, #3
 80061b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	1c9a      	adds	r2, r3, #2
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c2:	3314      	adds	r3, #20
 80061c4:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061cc:	331c      	adds	r3, #28
 80061ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061d0:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80061d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d6:	441a      	add	r2, r3
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80061de:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 80061e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	441a      	add	r2, r3
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80061ec:	3308      	adds	r3, #8
 80061ee:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 80061f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d127      	bne.n	8006248 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fe:	3308      	adds	r3, #8
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <find_volume+0x46e>
 8006206:	230d      	movs	r3, #13
 8006208:	e118      	b.n	800643c <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006210:	061a      	lsls	r2, r3, #24
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006218:	041b      	lsls	r3, r3, #16
 800621a:	4313      	orrs	r3, r2
 800621c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800621e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006222:	0212      	lsls	r2, r2, #8
 8006224:	4313      	orrs	r3, r2
 8006226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006228:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800622c:	431a      	orrs	r2, r3
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006234:	3304      	adds	r3, #4
 8006236:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800623e:	3314      	adds	r3, #20
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	647b      	str	r3, [r7, #68]	; 0x44
 8006246:	e030      	b.n	80062aa <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800624e:	3308      	adds	r3, #8
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <find_volume+0x4be>
 8006256:	230d      	movs	r3, #13
 8006258:	e0f0      	b.n	800643c <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	441a      	add	r2, r3
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800626c:	3304      	adds	r3, #4
 800626e:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006270:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006274:	2b02      	cmp	r3, #2
 8006276:	d106      	bne.n	8006286 <find_volume+0x4ea>
 8006278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627e:	3314      	adds	r3, #20
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	e010      	b.n	80062a8 <find_volume+0x50c>
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800628c:	3314      	adds	r3, #20
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	4613      	mov	r3, r2
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	4413      	add	r3, r2
 8006296:	085a      	lsrs	r2, r3, #1
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629e:	3314      	adds	r3, #20
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80062a8:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b0:	3318      	adds	r3, #24
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ba:	330a      	adds	r3, #10
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	4619      	mov	r1, r3
 80062c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c2:	440b      	add	r3, r1
 80062c4:	1e59      	subs	r1, r3, #1
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062cc:	330a      	adds	r3, #10
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d201      	bcs.n	80062dc <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 80062d8:	230d      	movs	r3, #13
 80062da:	e0af      	b.n	800643c <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e2:	3310      	adds	r3, #16
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f0:	3310      	adds	r3, #16
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062fa:	330c      	adds	r3, #12
 80062fc:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006304:	3305      	adds	r3, #5
 8006306:	2280      	movs	r2, #128	; 0x80
 8006308:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800630a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800630e:	2b03      	cmp	r3, #3
 8006310:	d17d      	bne.n	800640e <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	b21a      	sxth	r2, r3
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006322:	b21b      	sxth	r3, r3
 8006324:	4313      	orrs	r3, r2
 8006326:	b21b      	sxth	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d170      	bne.n	800640e <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800632c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632e:	3301      	adds	r3, #1
 8006330:	4619      	mov	r1, r3
 8006332:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006334:	f7fd fee0 	bl	80040f8 <move_window>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d167      	bne.n	800640e <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006344:	3305      	adds	r3, #5
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006350:	021b      	lsls	r3, r3, #8
 8006352:	b21a      	sxth	r2, r3
 8006354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006356:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800635a:	b21b      	sxth	r3, r3
 800635c:	4313      	orrs	r3, r2
 800635e:	b21b      	sxth	r3, r3
 8006360:	4a38      	ldr	r2, [pc, #224]	; (8006444 <find_volume+0x6a8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d153      	bne.n	800640e <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	78db      	ldrb	r3, [r3, #3]
 800636a:	061a      	lsls	r2, r3, #24
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	789b      	ldrb	r3, [r3, #2]
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	4313      	orrs	r3, r2
 8006374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006376:	7852      	ldrb	r2, [r2, #1]
 8006378:	0212      	lsls	r2, r2, #8
 800637a:	4313      	orrs	r3, r2
 800637c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	4313      	orrs	r3, r2
 8006382:	4a31      	ldr	r2, [pc, #196]	; (8006448 <find_volume+0x6ac>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d142      	bne.n	800640e <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800638e:	061a      	lsls	r2, r3, #24
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006396:	041b      	lsls	r3, r3, #16
 8006398:	4313      	orrs	r3, r2
 800639a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800639c:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80063a0:	0212      	lsls	r2, r2, #8
 80063a2:	4313      	orrs	r3, r2
 80063a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a6:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80063aa:	4313      	orrs	r3, r2
 80063ac:	4a27      	ldr	r2, [pc, #156]	; (800644c <find_volume+0x6b0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d12d      	bne.n	800640e <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80063b8:	061a      	lsls	r2, r3, #24
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80063c0:	041b      	lsls	r3, r3, #16
 80063c2:	4313      	orrs	r3, r2
 80063c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c6:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80063ca:	0212      	lsls	r2, r2, #8
 80063cc:	4313      	orrs	r3, r2
 80063ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063d0:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80063d4:	431a      	orrs	r2, r3
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063dc:	3310      	adds	r3, #16
 80063de:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80063e6:	061a      	lsls	r2, r3, #24
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	4313      	orrs	r3, r2
 80063f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063f4:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80063f8:	0212      	lsls	r2, r2, #8
 80063fa:	4313      	orrs	r3, r2
 80063fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063fe:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006402:	431a      	orrs	r2, r3
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800640a:	330c      	adds	r3, #12
 800640c:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006414:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006418:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800641a:	4b0d      	ldr	r3, [pc, #52]	; (8006450 <find_volume+0x6b4>)
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	3301      	adds	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <find_volume+0x6b4>)
 8006424:	801a      	strh	r2, [r3, #0]
 8006426:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <find_volume+0x6b4>)
 8006428:	881a      	ldrh	r2, [r3, #0]
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006430:	3306      	adds	r3, #6
 8006432:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006434:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006436:	f7fd fddb 	bl	8003ff0 <clear_lock>
#endif

	return FR_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3758      	adds	r7, #88	; 0x58
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	ffffaa55 	.word	0xffffaa55
 8006448:	41615252 	.word	0x41615252
 800644c:	61417272 	.word	0x61417272
 8006450:	200000c0 	.word	0x200000c0

08006454 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d02d      	beq.n	80064c2 <validate+0x6e>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d027      	beq.n	80064c2 <validate+0x6e>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01e      	beq.n	80064c2 <validate+0x6e>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006490:	3306      	adds	r3, #6
 8006492:	881a      	ldrh	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649a:	3304      	adds	r3, #4
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d10f      	bne.n	80064c2 <validate+0x6e>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ae:	3301      	adds	r3, #1
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fd faec 	bl	8003a90 <disk_status>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <validate+0x72>
		return FR_INVALID_OBJECT;
 80064c2:	2309      	movs	r3, #9
 80064c4:	e000      	b.n	80064c8 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80064e2:	f107 0310 	add.w	r3, r7, #16
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff fba7 	bl	8005c3a <get_ldnumber>
 80064ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	da01      	bge.n	80064f8 <f_mount+0x28>
 80064f4:	230b      	movs	r3, #11
 80064f6:	e02f      	b.n	8006558 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80064f8:	4a19      	ldr	r2, [pc, #100]	; (8006560 <f_mount+0x90>)
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006500:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006508:	69b8      	ldr	r0, [r7, #24]
 800650a:	f7fd fd71 	bl	8003ff0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006514:	2200      	movs	r2, #0
 8006516:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d004      	beq.n	8006528 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	490d      	ldr	r1, [pc, #52]	; (8006560 <f_mount+0x90>)
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <f_mount+0x6e>
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d001      	beq.n	8006542 <f_mount+0x72>
 800653e:	2300      	movs	r3, #0
 8006540:	e00a      	b.n	8006558 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006542:	f107 0108 	add.w	r1, r7, #8
 8006546:	f107 030c 	add.w	r3, r7, #12
 800654a:	2200      	movs	r2, #0
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff fc25 	bl	8005d9c <find_volume>
 8006552:	4603      	mov	r3, r0
 8006554:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006556:	7dfb      	ldrb	r3, [r7, #23]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	200000bc 	.word	0x200000bc

08006564 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	f107 0318 	add.w	r3, r7, #24
 8006572:	3b0c      	subs	r3, #12
 8006574:	6018      	str	r0, [r3, #0]
 8006576:	f107 0318 	add.w	r3, r7, #24
 800657a:	3b10      	subs	r3, #16
 800657c:	6019      	str	r1, [r3, #0]
 800657e:	f107 0318 	add.w	r3, r7, #24
 8006582:	3b11      	subs	r3, #17
 8006584:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006586:	f107 0318 	add.w	r3, r7, #24
 800658a:	3b0c      	subs	r3, #12
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <f_open+0x32>
 8006592:	2309      	movs	r3, #9
 8006594:	e319      	b.n	8006bca <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 8006596:	f107 0318 	add.w	r3, r7, #24
 800659a:	3b0c      	subs	r3, #12
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80065a6:	f107 0318 	add.w	r3, r7, #24
 80065aa:	3b11      	subs	r3, #17
 80065ac:	f107 0218 	add.w	r2, r7, #24
 80065b0:	3a11      	subs	r2, #17
 80065b2:	7812      	ldrb	r2, [r2, #0]
 80065b4:	f002 021f 	and.w	r2, r2, #31
 80065b8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80065ba:	f107 0318 	add.w	r3, r7, #24
 80065be:	3b11      	subs	r3, #17
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	f107 0118 	add.w	r1, r7, #24
 80065cc:	3910      	subs	r1, #16
 80065ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065d2:	3b18      	subs	r3, #24
 80065d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fbdf 	bl	8005d9c <find_volume>
 80065de:	4603      	mov	r3, r0
 80065e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80065e4:	f102 0217 	add.w	r2, r2, #23
 80065e8:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80065ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80065ee:	f103 0317 	add.w	r3, r3, #23
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 82e3 	bne.w	8006bc0 <f_open+0x65c>
		INIT_BUF(dj);
 80065fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065fe:	3b18      	subs	r3, #24
 8006600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006604:	3318      	adds	r3, #24
 8006606:	f107 0218 	add.w	r2, r7, #24
 800660a:	3a04      	subs	r2, #4
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006612:	3b18      	subs	r3, #24
 8006614:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006618:	4ad1      	ldr	r2, [pc, #836]	; (8006960 <f_open+0x3fc>)
 800661a:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800661c:	f107 0318 	add.w	r3, r7, #24
 8006620:	3b10      	subs	r3, #16
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006628:	3b18      	subs	r3, #24
 800662a:	4611      	mov	r1, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fa8b 	bl	8005b48 <follow_path>
 8006632:	4603      	mov	r3, r0
 8006634:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006638:	f102 0217 	add.w	r2, r2, #23
 800663c:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800663e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006642:	3b18      	subs	r3, #24
 8006644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006648:	3314      	adds	r3, #20
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006650:	f102 0210 	add.w	r2, r2, #16
 8006654:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006656:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800665a:	f103 0317 	add.w	r3, r3, #23
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d126      	bne.n	80066b2 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8006664:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006668:	f103 0310 	add.w	r3, r3, #16
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <f_open+0x11c>
				res = FR_INVALID_NAME;
 8006672:	2306      	movs	r3, #6
 8006674:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006678:	f102 0217 	add.w	r2, r2, #23
 800667c:	7013      	strb	r3, [r2, #0]
 800667e:	e018      	b.n	80066b2 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006680:	f107 0318 	add.w	r3, r7, #24
 8006684:	3b11      	subs	r3, #17
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf14      	ite	ne
 8006690:	2301      	movne	r3, #1
 8006692:	2300      	moveq	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	461a      	mov	r2, r3
 8006698:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800669c:	3b18      	subs	r3, #24
 800669e:	4611      	mov	r1, r2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fd fb0b 	bl	8003cbc <chk_lock>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80066ac:	f102 0217 	add.w	r2, r2, #23
 80066b0:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80066b2:	f107 0318 	add.w	r3, r7, #24
 80066b6:	3b11      	subs	r3, #17
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	f003 031c 	and.w	r3, r3, #28
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8150 	beq.w	8006964 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 80066c4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80066c8:	f103 0317 	add.w	r3, r3, #23
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d030      	beq.n	8006734 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80066d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80066d6:	f103 0317 	add.w	r3, r3, #23
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d112      	bne.n	8006706 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80066e0:	f7fd fb5e 	bl	8003da0 <enq_lock>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d007      	beq.n	80066fa <f_open+0x196>
 80066ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80066ee:	3b18      	subs	r3, #24
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe ff37 	bl	8005564 <dir_register>
 80066f6:	4603      	mov	r3, r0
 80066f8:	e000      	b.n	80066fc <f_open+0x198>
 80066fa:	2312      	movs	r3, #18
 80066fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006700:	f102 0217 	add.w	r2, r2, #23
 8006704:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006706:	f107 0318 	add.w	r3, r7, #24
 800670a:	3b11      	subs	r3, #17
 800670c:	f107 0218 	add.w	r2, r7, #24
 8006710:	3a11      	subs	r2, #17
 8006712:	7812      	ldrb	r2, [r2, #0]
 8006714:	f042 0208 	orr.w	r2, r2, #8
 8006718:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800671a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800671e:	3b18      	subs	r3, #24
 8006720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006724:	3314      	adds	r3, #20
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800672c:	f102 0210 	add.w	r2, r2, #16
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e01f      	b.n	8006774 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006734:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006738:	f103 0310 	add.w	r3, r3, #16
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	330b      	adds	r3, #11
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	f003 0311 	and.w	r3, r3, #17
 8006746:	2b00      	cmp	r3, #0
 8006748:	d006      	beq.n	8006758 <f_open+0x1f4>
					res = FR_DENIED;
 800674a:	2307      	movs	r3, #7
 800674c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006750:	f102 0217 	add.w	r2, r2, #23
 8006754:	7013      	strb	r3, [r2, #0]
 8006756:	e00d      	b.n	8006774 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006758:	f107 0318 	add.w	r3, r7, #24
 800675c:	3b11      	subs	r3, #17
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <f_open+0x210>
						res = FR_EXIST;
 8006768:	2308      	movs	r3, #8
 800676a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800676e:	f102 0217 	add.w	r2, r2, #23
 8006772:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006774:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006778:	f103 0317 	add.w	r3, r3, #23
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 8122 	bne.w	80069c8 <f_open+0x464>
 8006784:	f107 0318 	add.w	r3, r7, #24
 8006788:	3b11      	subs	r3, #17
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 8119 	beq.w	80069c8 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 8006796:	f7fd f91f 	bl	80039d8 <get_fattime>
 800679a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800679e:	f103 030c 	add.w	r3, r3, #12
 80067a2:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80067a4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067a8:	f103 0310 	add.w	r3, r3, #16
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330e      	adds	r3, #14
 80067b0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80067b4:	f102 020c 	add.w	r2, r2, #12
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067c2:	f103 030c 	add.w	r3, r3, #12
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	0a1b      	lsrs	r3, r3, #8
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067d2:	f103 0310 	add.w	r3, r3, #16
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330f      	adds	r3, #15
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067e2:	f103 030c 	add.w	r3, r3, #12
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	0c1a      	lsrs	r2, r3, #16
 80067ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067ee:	f103 0310 	add.w	r3, r3, #16
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3310      	adds	r3, #16
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067fe:	f103 030c 	add.w	r3, r3, #12
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	0e1a      	lsrs	r2, r3, #24
 8006806:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800680a:	f103 0310 	add.w	r3, r3, #16
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3311      	adds	r3, #17
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006816:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800681a:	f103 0310 	add.w	r3, r3, #16
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	330b      	adds	r3, #11
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006826:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800682a:	f103 0310 	add.w	r3, r3, #16
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	331c      	adds	r3, #28
 8006832:	2200      	movs	r2, #0
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800683a:	f103 0310 	add.w	r3, r3, #16
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	331d      	adds	r3, #29
 8006842:	2200      	movs	r2, #0
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800684a:	f103 0310 	add.w	r3, r3, #16
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	331e      	adds	r3, #30
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800685a:	f103 0310 	add.w	r3, r3, #16
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	331f      	adds	r3, #31
 8006862:	2200      	movs	r2, #0
 8006864:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006866:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800686a:	3b18      	subs	r3, #24
 800686c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006876:	f102 0210 	add.w	r2, r2, #16
 800687a:	6811      	ldr	r1, [r2, #0]
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe fbb4 	bl	8004fea <ld_clust>
 8006882:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006886:	f103 0308 	add.w	r3, r3, #8
 800688a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800688c:	2100      	movs	r1, #0
 800688e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006892:	f103 0310 	add.w	r3, r3, #16
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	f7fe fbd5 	bl	8005046 <st_clust>
				dj.fs->wflag = 1;
 800689c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068a0:	3b18      	subs	r3, #24
 80068a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ac:	3304      	adds	r3, #4
 80068ae:	2201      	movs	r2, #1
 80068b0:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 80068b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80068b6:	f103 0308 	add.w	r3, r3, #8
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8083 	beq.w	80069c8 <f_open+0x464>
					dw = dj.fs->winsect;
 80068c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068c6:	3b18      	subs	r3, #24
 80068c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80068d2:	330c      	adds	r3, #12
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80068da:	f102 020c 	add.w	r2, r2, #12
 80068de:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80068e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068e4:	3b18      	subs	r3, #24
 80068e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80068f0:	f102 0208 	add.w	r2, r2, #8
 80068f4:	6811      	ldr	r1, [r2, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fd ff8d 	bl	8004816 <remove_chain>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006902:	f102 0217 	add.w	r2, r2, #23
 8006906:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8006908:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800690c:	f103 0317 	add.w	r3, r3, #23
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d158      	bne.n	80069c8 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006916:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800691a:	3b18      	subs	r3, #24
 800691c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006926:	f102 0208 	add.w	r2, r2, #8
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	3a01      	subs	r2, #1
 800692e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006932:	330c      	adds	r3, #12
 8006934:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 8006936:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800693a:	3b18      	subs	r3, #24
 800693c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006946:	f102 020c 	add.w	r2, r2, #12
 800694a:	6811      	ldr	r1, [r2, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f7fd fbd3 	bl	80040f8 <move_window>
 8006952:	4603      	mov	r3, r0
 8006954:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006958:	f102 0217 	add.w	r2, r2, #23
 800695c:	7013      	strb	r3, [r2, #0]
 800695e:	e033      	b.n	80069c8 <f_open+0x464>
 8006960:	200000dc 	.word	0x200000dc
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006964:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006968:	f103 0317 	add.w	r3, r3, #23
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d12a      	bne.n	80069c8 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006972:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006976:	f103 0310 	add.w	r3, r3, #16
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330b      	adds	r3, #11
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b00      	cmp	r3, #0
 8006986:	d006      	beq.n	8006996 <f_open+0x432>
					res = FR_NO_FILE;
 8006988:	2304      	movs	r3, #4
 800698a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800698e:	f102 0217 	add.w	r2, r2, #23
 8006992:	7013      	strb	r3, [r2, #0]
 8006994:	e018      	b.n	80069c8 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006996:	f107 0318 	add.w	r3, r7, #24
 800699a:	3b11      	subs	r3, #17
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d010      	beq.n	80069c8 <f_open+0x464>
 80069a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80069aa:	f103 0310 	add.w	r3, r3, #16
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330b      	adds	r3, #11
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <f_open+0x464>
						res = FR_DENIED;
 80069bc:	2307      	movs	r3, #7
 80069be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80069c2:	f102 0217 	add.w	r2, r2, #23
 80069c6:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80069c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80069cc:	f103 0317 	add.w	r3, r3, #23
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d15b      	bne.n	8006a8e <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80069d6:	f107 0318 	add.w	r3, r7, #24
 80069da:	3b11      	subs	r3, #17
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d009      	beq.n	80069fa <f_open+0x496>
				mode |= FA__WRITTEN;
 80069e6:	f107 0318 	add.w	r3, r7, #24
 80069ea:	3b11      	subs	r3, #17
 80069ec:	f107 0218 	add.w	r2, r7, #24
 80069f0:	3a11      	subs	r2, #17
 80069f2:	7812      	ldrb	r2, [r2, #0]
 80069f4:	f042 0220 	orr.w	r2, r2, #32
 80069f8:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80069fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069fe:	3b18      	subs	r3, #24
 8006a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	f107 0318 	add.w	r3, r7, #24
 8006a12:	3b0c      	subs	r3, #12
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1a:	331c      	adds	r3, #28
 8006a1c:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 8006a1e:	f107 0318 	add.w	r3, r7, #24
 8006a22:	3b0c      	subs	r3, #12
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a2a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006a2e:	f102 0210 	add.w	r2, r2, #16
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a36:	f107 0318 	add.w	r3, r7, #24
 8006a3a:	3b11      	subs	r3, #17
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bf14      	ite	ne
 8006a46:	2301      	movne	r3, #1
 8006a48:	2300      	moveq	r3, #0
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a52:	3b18      	subs	r3, #24
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fd f9c6 	bl	8003de8 <inc_lock>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	f107 0318 	add.w	r3, r7, #24
 8006a62:	3b0c      	subs	r3, #12
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8006a6e:	f107 0318 	add.w	r3, r7, #24
 8006a72:	3b0c      	subs	r3, #12
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d105      	bne.n	8006a8e <f_open+0x52a>
 8006a82:	2302      	movs	r3, #2
 8006a84:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006a88:	f102 0217 	add.w	r2, r2, #23
 8006a8c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006a8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a92:	f103 0317 	add.w	r3, r3, #23
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f040 8091 	bne.w	8006bc0 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 8006a9e:	f107 0318 	add.w	r3, r7, #24
 8006aa2:	3b0c      	subs	r3, #12
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aaa:	3306      	adds	r3, #6
 8006aac:	f107 0218 	add.w	r2, r7, #24
 8006ab0:	3a11      	subs	r2, #17
 8006ab2:	7812      	ldrb	r2, [r2, #0]
 8006ab4:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8006ab6:	f107 0318 	add.w	r3, r7, #24
 8006aba:	3b0c      	subs	r3, #12
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac2:	3307      	adds	r3, #7
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006acc:	3b18      	subs	r3, #24
 8006ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ad8:	f102 0210 	add.w	r2, r2, #16
 8006adc:	6811      	ldr	r1, [r2, #0]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe fa83 	bl	8004fea <ld_clust>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	f107 0318 	add.w	r3, r7, #24
 8006aea:	3b0c      	subs	r3, #12
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af2:	3310      	adds	r3, #16
 8006af4:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006af6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006afa:	f103 0310 	add.w	r3, r3, #16
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	331f      	adds	r3, #31
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	061a      	lsls	r2, r3, #24
 8006b06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b0a:	f103 0310 	add.w	r3, r3, #16
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	331e      	adds	r3, #30
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	041b      	lsls	r3, r3, #16
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006b1c:	f102 0210 	add.w	r2, r2, #16
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	321d      	adds	r2, #29
 8006b24:	7812      	ldrb	r2, [r2, #0]
 8006b26:	0212      	lsls	r2, r2, #8
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006b2e:	f102 0210 	add.w	r2, r2, #16
 8006b32:	6812      	ldr	r2, [r2, #0]
 8006b34:	321c      	adds	r2, #28
 8006b36:	7812      	ldrb	r2, [r2, #0]
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	f107 0318 	add.w	r3, r7, #24
 8006b3e:	3b0c      	subs	r3, #12
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b46:	330c      	adds	r3, #12
 8006b48:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8006b4a:	f107 0318 	add.w	r3, r7, #24
 8006b4e:	3b0c      	subs	r3, #12
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b56:	3308      	adds	r3, #8
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 8006b5c:	f107 0318 	add.w	r3, r7, #24
 8006b60:	3b0c      	subs	r3, #12
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b68:	3318      	adds	r3, #24
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006b6e:	f107 0318 	add.w	r3, r7, #24
 8006b72:	3b0c      	subs	r3, #12
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006b80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b84:	3b18      	subs	r3, #24
 8006b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	f107 0318 	add.w	r3, r7, #24
 8006b90:	3b0c      	subs	r3, #12
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b98:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8006b9a:	f107 0318 	add.w	r3, r7, #24
 8006b9e:	3b0c      	subs	r3, #12
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bac:	3306      	adds	r3, #6
 8006bae:	881a      	ldrh	r2, [r3, #0]
 8006bb0:	f107 0318 	add.w	r3, r7, #24
 8006bb4:	3b0c      	subs	r3, #12
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006bc0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006bc4:	f103 0317 	add.w	r3, r3, #23
 8006bc8:	781b      	ldrb	r3, [r3, #0]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop

08006bd8 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08c      	sub	sp, #48	; 0x30
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff fc2f 	bl	8006454 <validate>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006bfa:	7ffb      	ldrb	r3, [r7, #31]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <f_read+0x2c>
 8006c00:	7ffb      	ldrb	r3, [r7, #31]
 8006c02:	e1fb      	b.n	8006ffc <f_read+0x424>
	if (fp->err)								/* Check error */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c0a:	3307      	adds	r3, #7
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d005      	beq.n	8006c1e <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c18:	3307      	adds	r3, #7
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	e1ee      	b.n	8006ffc <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c24:	3306      	adds	r3, #6
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006c30:	2307      	movs	r3, #7
 8006c32:	e1e3      	b.n	8006ffc <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c44:	3308      	adds	r3, #8
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	f240 81ce 	bls.w	8006ff2 <f_read+0x41a>
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006c5a:	e1ca      	b.n	8006ff2 <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c62:	3308      	adds	r3, #8
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c72:	330a      	adds	r3, #10
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c7a:	fb03 f301 	mul.w	r3, r3, r1
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 8160 	bne.w	8006f46 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c9c:	330a      	adds	r3, #10
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	4013      	ands	r3, r2
 8006cbc:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d14a      	bne.n	8006d5a <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cca:	3308      	adds	r3, #8
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd8:	3310      	adds	r3, #16
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cde:	e01f      	b.n	8006d20 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7fd fea4 	bl	8004a48 <clmt_clust>
 8006d00:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006d02:	e00d      	b.n	8006d20 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d12:	3314      	adds	r3, #20
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4619      	mov	r1, r3
 8006d18:	4610      	mov	r0, r2
 8006d1a:	f7fd fb17 	bl	800434c <get_fat>
 8006d1e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d807      	bhi.n	8006d36 <f_read+0x15e>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d2c:	3307      	adds	r3, #7
 8006d2e:	2202      	movs	r2, #2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	2302      	movs	r3, #2
 8006d34:	e162      	b.n	8006ffc <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d3c:	d107      	bne.n	8006d4e <f_read+0x176>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d44:	3307      	adds	r3, #7
 8006d46:	2201      	movs	r2, #1
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e156      	b.n	8006ffc <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d54:	3314      	adds	r3, #20
 8006d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d58:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d68:	3314      	adds	r3, #20
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f7fd fac5 	bl	80042fe <clust2sect>
 8006d74:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d107      	bne.n	8006d8c <f_read+0x1b4>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d82:	3307      	adds	r3, #7
 8006d84:	2202      	movs	r2, #2
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e137      	b.n	8006ffc <f_read+0x424>
			sect += csect;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4413      	add	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da0:	330a      	adds	r3, #10
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d070      	beq.n	8006e96 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006db4:	7dfa      	ldrb	r2, [r7, #23]
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	441a      	add	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc6:	3302      	adds	r3, #2
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d90b      	bls.n	8006de6 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dda:	3302      	adds	r3, #2
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df2:	3301      	adds	r3, #1
 8006df4:	7818      	ldrb	r0, [r3, #0]
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	6a39      	ldr	r1, [r7, #32]
 8006dfc:	f7fc fe88 	bl	8003b10 <disk_read>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0c:	3307      	adds	r3, #7
 8006e0e:	2201      	movs	r2, #1
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	2301      	movs	r3, #1
 8006e14:	e0f2      	b.n	8006ffc <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1c:	3306      	adds	r3, #6
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d028      	beq.n	8006e7a <f_read+0x2a2>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2e:	3318      	adds	r3, #24
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d91e      	bls.n	8006e7a <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e42:	3318      	adds	r3, #24
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad2      	subs	r2, r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e56:	330a      	adds	r3, #10
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	fb03 f302 	mul.w	r3, r3, r2
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	18d0      	adds	r0, r2, r3
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e70:	330a      	adds	r3, #10
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	f7fc fea9 	bl	8003bcc <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e86:	330a      	adds	r3, #10
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	fb02 f303 	mul.w	r3, r2, r3
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006e94:	e093      	b.n	8006fbe <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e9c:	3318      	adds	r3, #24
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d049      	beq.n	8006f3a <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eac:	3306      	adds	r3, #6
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d028      	beq.n	8006f0a <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	7818      	ldrb	r0, [r3, #0]
 8006ec8:	68f9      	ldr	r1, [r7, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed0:	3318      	adds	r3, #24
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f7fc fe3b 	bl	8003b50 <disk_write>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d007      	beq.n	8006ef0 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee6:	3307      	adds	r3, #7
 8006ee8:	2201      	movs	r2, #1
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	2301      	movs	r3, #1
 8006eee:	e085      	b.n	8006ffc <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef6:	3306      	adds	r3, #6
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f06:	3306      	adds	r3, #6
 8006f08:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f16:	3301      	adds	r3, #1
 8006f18:	7818      	ldrb	r0, [r3, #0]
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	f7fc fdf6 	bl	8003b10 <disk_read>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d007      	beq.n	8006f3a <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f30:	3307      	adds	r3, #7
 8006f32:	2201      	movs	r2, #1
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	2301      	movs	r3, #1
 8006f38:	e060      	b.n	8006ffc <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f40:	3318      	adds	r3, #24
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f52:	330a      	adds	r3, #10
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	4618      	mov	r0, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f5e:	3308      	adds	r3, #8
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f6e:	330a      	adds	r3, #10
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f76:	fb03 f301 	mul.w	r3, r3, r1
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	1ac3      	subs	r3, r0, r3
 8006f7e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d901      	bls.n	8006f8c <f_read+0x3b4>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f92:	3308      	adds	r3, #8
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa2:	330a      	adds	r3, #10
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	fbb2 f1f3 	udiv	r1, r2, r3
 8006faa:	fb03 f301 	mul.w	r3, r3, r1
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6a38      	ldr	r0, [r7, #32]
 8006fba:	f7fc fe07 	bl	8003bcc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006fbe:	6a3a      	ldr	r2, [r7, #32]
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	4413      	add	r3, r2
 8006fc4:	623b      	str	r3, [r7, #32]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fcc:	3308      	adds	r3, #8
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	441a      	add	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fda:	3308      	adds	r3, #8
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	441a      	add	r2, r3
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f47f ae31 	bne.w	8006c5c <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3730      	adds	r7, #48	; 0x30
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	; 0x28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f7ff fa19 	bl	8006454 <validate>
 8007022:	4603      	mov	r3, r0
 8007024:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <f_write+0x2c>
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	e258      	b.n	80074e2 <f_write+0x4de>
	if (fp->err)							/* Check error */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007036:	3307      	adds	r3, #7
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007044:	3307      	adds	r3, #7
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	e24b      	b.n	80074e2 <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007050:	3306      	adds	r3, #6
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800705c:	2307      	movs	r3, #7
 800705e:	e240      	b.n	80074e2 <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007066:	3308      	adds	r3, #8
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	441a      	add	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007074:	3308      	adds	r3, #8
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	f080 8208 	bcs.w	800748e <f_write+0x48a>
 800707e:	2300      	movs	r3, #0
 8007080:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007082:	e204      	b.n	800748e <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708a:	3308      	adds	r3, #8
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709a:	330a      	adds	r3, #10
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	fbb2 f1f3 	udiv	r1, r2, r3
 80070a2:	fb03 f301 	mul.w	r3, r3, r1
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f040 818d 	bne.w	80073c8 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b4:	3308      	adds	r3, #8
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c4:	330a      	adds	r3, #10
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070da:	3302      	adds	r3, #2
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	3b01      	subs	r3, #1
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	4013      	ands	r3, r2
 80070e4:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80070e6:	7dbb      	ldrb	r3, [r7, #22]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d167      	bne.n	80071bc <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f2:	3308      	adds	r3, #8
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d112      	bne.n	8007120 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007100:	3310      	adds	r3, #16
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	2b00      	cmp	r3, #0
 800710a:	d129      	bne.n	8007160 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f7fd fbe5 	bl	80048e6 <create_chain>
 800711c:	6278      	str	r0, [r7, #36]	; 0x24
 800711e:	e01f      	b.n	8007160 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007126:	3304      	adds	r3, #4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007134:	3308      	adds	r3, #8
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4619      	mov	r1, r3
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f7fd fc84 	bl	8004a48 <clmt_clust>
 8007140:	6278      	str	r0, [r7, #36]	; 0x24
 8007142:	e00d      	b.n	8007160 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007152:	3314      	adds	r3, #20
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4619      	mov	r1, r3
 8007158:	4610      	mov	r0, r2
 800715a:	f7fd fbc4 	bl	80048e6 <create_chain>
 800715e:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 8198 	beq.w	8007498 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	2b01      	cmp	r3, #1
 800716c:	d107      	bne.n	800717e <f_write+0x17a>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007174:	3307      	adds	r3, #7
 8007176:	2202      	movs	r2, #2
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	2302      	movs	r3, #2
 800717c:	e1b1      	b.n	80074e2 <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007184:	d107      	bne.n	8007196 <f_write+0x192>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800718c:	3307      	adds	r3, #7
 800718e:	2201      	movs	r2, #1
 8007190:	701a      	strb	r2, [r3, #0]
 8007192:	2301      	movs	r3, #1
 8007194:	e1a5      	b.n	80074e2 <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800719c:	3314      	adds	r3, #20
 800719e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a0:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a8:	3310      	adds	r3, #16
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d105      	bne.n	80071bc <f_write+0x1b8>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b6:	3310      	adds	r3, #16
 80071b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ba:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c2:	3306      	adds	r3, #6
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d028      	beq.n	8007220 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071da:	3301      	adds	r3, #1
 80071dc:	7818      	ldrb	r0, [r3, #0]
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e6:	3318      	adds	r3, #24
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	2301      	movs	r3, #1
 80071ec:	f7fc fcb0 	bl	8003b50 <disk_write>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d007      	beq.n	8007206 <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fc:	3307      	adds	r3, #7
 80071fe:	2201      	movs	r2, #1
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	2301      	movs	r3, #1
 8007204:	e16d      	b.n	80074e2 <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800720c:	3306      	adds	r3, #6
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007214:	b2da      	uxtb	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721c:	3306      	adds	r3, #6
 800721e:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722e:	3314      	adds	r3, #20
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4619      	mov	r1, r3
 8007234:	4610      	mov	r0, r2
 8007236:	f7fd f862 	bl	80042fe <clust2sect>
 800723a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d107      	bne.n	8007252 <f_write+0x24e>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007248:	3307      	adds	r3, #7
 800724a:	2202      	movs	r2, #2
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	2302      	movs	r3, #2
 8007250:	e147      	b.n	80074e2 <f_write+0x4de>
			sect += csect;
 8007252:	7dbb      	ldrb	r3, [r7, #22]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4413      	add	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007266:	330a      	adds	r3, #10
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007272:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d074      	beq.n	8007364 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800727a:	7dba      	ldrb	r2, [r7, #22]
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	441a      	add	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728c:	3302      	adds	r3, #2
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	429a      	cmp	r2, r3
 8007292:	d90b      	bls.n	80072ac <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a0:	3302      	adds	r3, #2
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	7dbb      	ldrb	r3, [r7, #22]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b8:	3301      	adds	r3, #1
 80072ba:	7818      	ldrb	r0, [r3, #0]
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	69b9      	ldr	r1, [r7, #24]
 80072c2:	f7fc fc45 	bl	8003b50 <disk_write>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d007      	beq.n	80072dc <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d2:	3307      	adds	r3, #7
 80072d4:	2201      	movs	r2, #1
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	2301      	movs	r3, #1
 80072da:	e102      	b.n	80074e2 <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e2:	3318      	adds	r3, #24
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d92b      	bls.n	8007348 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f8:	3318      	adds	r3, #24
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	1ad2      	subs	r2, r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730c:	330a      	adds	r3, #10
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	fb03 f302 	mul.w	r3, r3, r2
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	18d1      	adds	r1, r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007324:	330a      	adds	r3, #10
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	f7fc fc4f 	bl	8003bcc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007334:	3306      	adds	r3, #6
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733c:	b2da      	uxtb	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007344:	3306      	adds	r3, #6
 8007346:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007354:	330a      	adds	r3, #10
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	fb02 f303 	mul.w	r3, r2, r3
 8007360:	623b      	str	r3, [r7, #32]
				continue;
 8007362:	e07a      	b.n	800745a <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736a:	3318      	adds	r3, #24
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	429a      	cmp	r2, r3
 8007372:	d023      	beq.n	80073bc <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800737a:	3308      	adds	r3, #8
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007384:	330c      	adds	r3, #12
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d217      	bcs.n	80073bc <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007398:	3301      	adds	r3, #1
 800739a:	7818      	ldrb	r0, [r3, #0]
 800739c:	68f9      	ldr	r1, [r7, #12]
 800739e:	2301      	movs	r3, #1
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	f7fc fbb5 	bl	8003b10 <disk_read>
 80073a6:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d007      	beq.n	80073bc <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b2:	3307      	adds	r3, #7
 80073b4:	2201      	movs	r2, #1
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	2301      	movs	r3, #1
 80073ba:	e092      	b.n	80074e2 <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c2:	3318      	adds	r3, #24
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d4:	330a      	adds	r3, #10
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	4618      	mov	r0, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e0:	3308      	adds	r3, #8
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f0:	330a      	adds	r3, #10
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80073f8:	fb03 f301 	mul.w	r3, r3, r1
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	1ac3      	subs	r3, r0, r3
 8007400:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007402:	6a3a      	ldr	r2, [r7, #32]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	429a      	cmp	r2, r3
 8007408:	d901      	bls.n	800740e <f_write+0x40a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007414:	3308      	adds	r3, #8
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007424:	330a      	adds	r3, #10
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	fbb2 f1f3 	udiv	r1, r2, r3
 800742c:	fb03 f301 	mul.w	r3, r3, r1
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	6a3a      	ldr	r2, [r7, #32]
 8007438:	69b9      	ldr	r1, [r7, #24]
 800743a:	4618      	mov	r0, r3
 800743c:	f7fc fbc6 	bl	8003bcc <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007446:	3306      	adds	r3, #6
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800744e:	b2da      	uxtb	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007456:	3306      	adds	r3, #6
 8007458:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	4413      	add	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007468:	3308      	adds	r3, #8
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	441a      	add	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007476:	3308      	adds	r3, #8
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	441a      	add	r2, r3
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	f47f adf7 	bne.w	8007084 <f_write+0x80>
 8007496:	e000      	b.n	800749a <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007498:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a0:	3308      	adds	r3, #8
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074aa:	330c      	adds	r3, #12
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d909      	bls.n	80074c6 <f_write+0x4c2>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b8:	3308      	adds	r3, #8
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c2:	330c      	adds	r3, #12
 80074c4:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074cc:	3306      	adds	r3, #6
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	f043 0320 	orr.w	r3, r3, #32
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074dc:	3306      	adds	r3, #6
 80074de:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3728      	adds	r7, #40	; 0x28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7fe ffae 	bl	8006454 <validate>
 80074f8:	4603      	mov	r3, r0
 80074fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f040 80cc 	bne.w	800769c <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750a:	3306      	adds	r3, #6
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f003 0320 	and.w	r3, r3, #32
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 80c2 	beq.w	800769c <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751e:	3306      	adds	r3, #6
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	d022      	beq.n	8007570 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007536:	3301      	adds	r3, #1
 8007538:	7818      	ldrb	r0, [r3, #0]
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007542:	3318      	adds	r3, #24
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	2301      	movs	r3, #1
 8007548:	f7fc fb02 	bl	8003b50 <disk_write>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007552:	2301      	movs	r3, #1
 8007554:	e0a3      	b.n	800769e <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755c:	3306      	adds	r3, #6
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007564:	b2da      	uxtb	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800756c:	3306      	adds	r3, #6
 800756e:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757e:	331c      	adds	r3, #28
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4619      	mov	r1, r3
 8007584:	4610      	mov	r0, r2
 8007586:	f7fc fdb7 	bl	80040f8 <move_window>
 800758a:	4603      	mov	r3, r0
 800758c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800758e:	7dfb      	ldrb	r3, [r7, #23]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f040 8083 	bne.w	800769c <f_sync+0x1b2>
				dir = fp->dir_ptr;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	330b      	adds	r3, #11
 80075a4:	781a      	ldrb	r2, [r3, #0]
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	330b      	adds	r3, #11
 80075aa:	f042 0220 	orr.w	r2, r2, #32
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b8:	330c      	adds	r3, #12
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	331c      	adds	r3, #28
 80075c0:	b2d2      	uxtb	r2, r2
 80075c2:	701a      	strb	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ca:	330c      	adds	r3, #12
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	0a1b      	lsrs	r3, r3, #8
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	331d      	adds	r3, #29
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	701a      	strb	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e2:	330c      	adds	r3, #12
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	0c1a      	lsrs	r2, r3, #16
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	331e      	adds	r3, #30
 80075ec:	b2d2      	uxtb	r2, r2
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f6:	330c      	adds	r3, #12
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	0e1a      	lsrs	r2, r3, #24
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	331f      	adds	r3, #31
 8007600:	b2d2      	uxtb	r2, r2
 8007602:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760a:	3310      	adds	r3, #16
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4619      	mov	r1, r3
 8007610:	6938      	ldr	r0, [r7, #16]
 8007612:	f7fd fd18 	bl	8005046 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007616:	f7fc f9df 	bl	80039d8 <get_fattime>
 800761a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	3316      	adds	r3, #22
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	b29b      	uxth	r3, r3
 800762a:	0a1b      	lsrs	r3, r3, #8
 800762c:	b29a      	uxth	r2, r3
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	3317      	adds	r3, #23
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	0c1a      	lsrs	r2, r3, #16
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	3318      	adds	r3, #24
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	701a      	strb	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	0e1a      	lsrs	r2, r3, #24
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	3319      	adds	r3, #25
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	3312      	adds	r3, #18
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	3313      	adds	r3, #19
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007664:	3306      	adds	r3, #6
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	f023 0320 	bic.w	r3, r3, #32
 800766c:	b2da      	uxtb	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007674:	3306      	adds	r3, #6
 8007676:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007684:	3304      	adds	r3, #4
 8007686:	2201      	movs	r2, #1
 8007688:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4618      	mov	r0, r3
 8007694:	f7fc fd64 	bl	8004160 <sync_fs>
 8007698:	4603      	mov	r3, r0
 800769a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800769c:	7dfb      	ldrb	r3, [r7, #23]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff ff1b 	bl	80074ea <f_sync>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d119      	bne.n	80076f2 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fe fec8 	bl	8006454 <validate>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d111      	bne.n	80076f2 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80076d4:	3308      	adds	r3, #8
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fc fc45 	bl	8003f68 <dec_lock>
 80076de:	4603      	mov	r3, r0
 80076e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b090      	sub	sp, #64	; 0x40
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fe fea4 	bl	8006454 <validate>
 800770c:	4603      	mov	r3, r0
 800770e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007712:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <f_lseek+0x24>
 800771a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800771e:	e31d      	b.n	8007d5c <f_lseek+0x660>
	if (fp->err)						/* Check error */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007726:	3307      	adds	r3, #7
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d005      	beq.n	800773a <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007734:	3307      	adds	r3, #7
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	e310      	b.n	8007d5c <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007740:	3304      	adds	r3, #4
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 813c 	beq.w	80079c2 <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007750:	d172      	bne.n	8007838 <f_lseek+0x13c>
			tbl = fp->cltbl;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007758:	3304      	adds	r3, #4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	1d1a      	adds	r2, r3, #4
 8007762:	627a      	str	r2, [r7, #36]	; 0x24
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	2302      	movs	r3, #2
 800776a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007772:	3310      	adds	r3, #16
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	2b00      	cmp	r3, #0
 800777c:	d049      	beq.n	8007812 <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	2300      	movs	r3, #0
 8007784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	3302      	adds	r3, #2
 800778a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	3301      	adds	r3, #1
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fc fdd3 	bl	800434c <get_fat>
 80077a6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d807      	bhi.n	80077be <f_lseek+0xc2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b4:	3307      	adds	r3, #7
 80077b6:	2202      	movs	r2, #2
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	2302      	movs	r3, #2
 80077bc:	e2ce      	b.n	8007d5c <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c4:	d107      	bne.n	80077d6 <f_lseek+0xda>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077cc:	3307      	adds	r3, #7
 80077ce:	2201      	movs	r2, #1
 80077d0:	701a      	strb	r2, [r3, #0]
 80077d2:	2301      	movs	r3, #1
 80077d4:	e2c2      	b.n	8007d5c <f_lseek+0x660>
					} while (cl == pcl + 1);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3301      	adds	r3, #1
 80077da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077dc:	429a      	cmp	r2, r3
 80077de:	d0d5      	beq.n	800778c <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80077e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d809      	bhi.n	80077fc <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	1d1a      	adds	r2, r3, #4
 80077ec:	627a      	str	r2, [r7, #36]	; 0x24
 80077ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	1d1a      	adds	r2, r3, #4
 80077f6:	627a      	str	r2, [r7, #36]	; 0x24
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007808:	3314      	adds	r3, #20
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800780e:	429a      	cmp	r2, r3
 8007810:	d3b5      	bcc.n	800777e <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007818:	3304      	adds	r3, #4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800781e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8007820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	429a      	cmp	r2, r3
 8007826:	d803      	bhi.n	8007830 <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	e293      	b.n	8007d58 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007830:	2311      	movs	r3, #17
 8007832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007836:	e28f      	b.n	8007d58 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800783e:	330c      	adds	r3, #12
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d905      	bls.n	8007854 <f_lseek+0x158>
				ofs = fp->fsize;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784e:	330c      	adds	r3, #12
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785a:	3308      	adds	r3, #8
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	601a      	str	r2, [r3, #0]
			if (ofs) {
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 8278 	beq.w	8007d58 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	3b01      	subs	r3, #1
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fd f8ea 	bl	8004a48 <clmt_clust>
 8007874:	4602      	mov	r2, r0
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787c:	3314      	adds	r3, #20
 800787e:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800788e:	3314      	adds	r3, #20
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4619      	mov	r1, r3
 8007894:	4610      	mov	r0, r2
 8007896:	f7fc fd32 	bl	80042fe <clust2sect>
 800789a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d107      	bne.n	80078b2 <f_lseek+0x1b6>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078a8:	3307      	adds	r3, #7
 80078aa:	2202      	movs	r2, #2
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	2302      	movs	r3, #2
 80078b0:	e254      	b.n	8007d5c <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	1e5a      	subs	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c2:	330a      	adds	r3, #10
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d6:	3302      	adds	r3, #2
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	3b01      	subs	r3, #1
 80078dc:	4013      	ands	r3, r2
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	4413      	add	r3, r2
 80078e2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ea:	3308      	adds	r3, #8
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fa:	330a      	adds	r3, #10
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8007902:	fb03 f301 	mul.w	r3, r3, r1
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8225 	beq.w	8007d58 <f_lseek+0x65c>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007914:	3318      	adds	r3, #24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	429a      	cmp	r2, r3
 800791c:	f000 821c 	beq.w	8007d58 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007926:	3306      	adds	r3, #6
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d028      	beq.n	8007984 <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793e:	3301      	adds	r3, #1
 8007940:	7818      	ldrb	r0, [r3, #0]
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800794a:	3318      	adds	r3, #24
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	2301      	movs	r3, #1
 8007950:	f7fc f8fe 	bl	8003b50 <disk_write>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d007      	beq.n	800796a <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007960:	3307      	adds	r3, #7
 8007962:	2201      	movs	r2, #1
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	2301      	movs	r3, #1
 8007968:	e1f8      	b.n	8007d5c <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007970:	3306      	adds	r3, #6
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007978:	b2da      	uxtb	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007980:	3306      	adds	r3, #6
 8007982:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007990:	3301      	adds	r3, #1
 8007992:	7818      	ldrb	r0, [r3, #0]
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	2301      	movs	r3, #1
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	f7fc f8b9 	bl	8003b10 <disk_read>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d007      	beq.n	80079b4 <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079aa:	3307      	adds	r3, #7
 80079ac:	2201      	movs	r2, #1
 80079ae:	701a      	strb	r2, [r3, #0]
 80079b0:	2301      	movs	r3, #1
 80079b2:	e1d3      	b.n	8007d5c <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ba:	3318      	adds	r3, #24
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	e1ca      	b.n	8007d58 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c8:	330c      	adds	r3, #12
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d90e      	bls.n	80079f0 <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d8:	3306      	adds	r3, #6
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d105      	bne.n	80079f0 <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ea:	330c      	adds	r3, #12
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079f6:	3308      	adds	r3, #8
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a06:	3308      	adds	r3, #8
 8007a08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a0a:	601a      	str	r2, [r3, #0]
		if (ofs) {
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 8113 	beq.w	8007c3a <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a20:	3302      	adds	r3, #2
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	461a      	mov	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a32:	330a      	adds	r3, #10
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	fb03 f302 	mul.w	r3, r3, r2
 8007a3a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d024      	beq.n	8007a8c <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	1e5a      	subs	r2, r3, #1
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	1e59      	subs	r1, r3, #1
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d318      	bcc.n	8007a8c <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	1e5a      	subs	r2, r3, #1
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	425b      	negs	r3, r3
 8007a62:	401a      	ands	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a74:	3308      	adds	r3, #8
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a84:	3314      	adds	r3, #20
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a8a:	e034      	b.n	8007af6 <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a92:	3310      	adds	r3, #16
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d125      	bne.n	8007aea <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fc ff1c 	bl	80048e6 <create_chain>
 8007aae:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d107      	bne.n	8007ac6 <f_lseek+0x3ca>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007abc:	3307      	adds	r3, #7
 8007abe:	2202      	movs	r2, #2
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	e14a      	b.n	8007d5c <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007acc:	d107      	bne.n	8007ade <f_lseek+0x3e2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad4:	3307      	adds	r3, #7
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	2301      	movs	r3, #1
 8007adc:	e13e      	b.n	8007d5c <f_lseek+0x660>
					fp->sclust = clst;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae4:	3310      	adds	r3, #16
 8007ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae8:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007af0:	3314      	adds	r3, #20
 8007af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007af4:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 8007af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 809e 	beq.w	8007c3a <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 8007afe:	e058      	b.n	8007bb2 <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b06:	3306      	adds	r3, #6
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00e      	beq.n	8007b30 <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fc fee2 	bl	80048e6 <create_chain>
 8007b22:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10b      	bne.n	8007b42 <f_lseek+0x446>
							ofs = bcs; break;
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	603b      	str	r3, [r7, #0]
 8007b2e:	e044      	b.n	8007bba <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fc fc06 	bl	800434c <get_fat>
 8007b40:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b48:	d107      	bne.n	8007b5a <f_lseek+0x45e>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b50:	3307      	adds	r3, #7
 8007b52:	2201      	movs	r2, #1
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	2301      	movs	r3, #1
 8007b58:	e100      	b.n	8007d5c <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d90a      	bls.n	8007b76 <f_lseek+0x47a>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6c:	3314      	adds	r3, #20
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d307      	bcc.n	8007b86 <f_lseek+0x48a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7c:	3307      	adds	r3, #7
 8007b7e:	2202      	movs	r2, #2
 8007b80:	701a      	strb	r2, [r3, #0]
 8007b82:	2302      	movs	r3, #2
 8007b84:	e0ea      	b.n	8007d5c <f_lseek+0x660>
					fp->clust = clst;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b8c:	3314      	adds	r3, #20
 8007b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b90:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b98:	3308      	adds	r3, #8
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	441a      	add	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d8a2      	bhi.n	8007b00 <f_lseek+0x404>
				}
				fp->fptr += ofs;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	441a      	add	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bce:	3308      	adds	r3, #8
 8007bd0:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bde:	330a      	adds	r3, #10
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bea:	fb02 f201 	mul.w	r2, r2, r1
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d022      	beq.n	8007c3a <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fc fb7d 	bl	80042fe <clust2sect>
 8007c04:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d107      	bne.n	8007c1c <f_lseek+0x520>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c12:	3307      	adds	r3, #7
 8007c14:	2202      	movs	r2, #2
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e09f      	b.n	8007d5c <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c28:	330a      	adds	r3, #10
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c36:	4413      	add	r3, r2
 8007c38:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c40:	3308      	adds	r3, #8
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c50:	330a      	adds	r3, #10
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c58:	fb03 f301 	mul.w	r3, r3, r1
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d057      	beq.n	8007d12 <f_lseek+0x616>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c68:	3318      	adds	r3, #24
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d04f      	beq.n	8007d12 <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c78:	3306      	adds	r3, #6
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d028      	beq.n	8007cd6 <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c90:	3301      	adds	r3, #1
 8007c92:	7818      	ldrb	r0, [r3, #0]
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9c:	3318      	adds	r3, #24
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f7fb ff55 	bl	8003b50 <disk_write>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d007      	beq.n	8007cbc <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb2:	3307      	adds	r3, #7
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	701a      	strb	r2, [r3, #0]
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e04f      	b.n	8007d5c <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc2:	3306      	adds	r3, #6
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd2:	3306      	adds	r3, #6
 8007cd4:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	7818      	ldrb	r0, [r3, #0]
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	2301      	movs	r3, #1
 8007cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cec:	f7fb ff10 	bl	8003b10 <disk_read>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d007      	beq.n	8007d06 <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfc:	3307      	adds	r3, #7
 8007cfe:	2201      	movs	r2, #1
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	2301      	movs	r3, #1
 8007d04:	e02a      	b.n	8007d5c <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0c:	3318      	adds	r3, #24
 8007d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d10:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d18:	3308      	adds	r3, #8
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d22:	330c      	adds	r3, #12
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d916      	bls.n	8007d58 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d30:	3308      	adds	r3, #8
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d44:	3306      	adds	r3, #6
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f043 0320 	orr.w	r3, r3, #32
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d54:	3306      	adds	r3, #6
 8007d56:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007d58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3740      	adds	r7, #64	; 0x40
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	2b0a      	cmp	r3, #10
 8007d74:	d103      	bne.n	8007d7e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007d76:	210d      	movs	r1, #13
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff fff3 	bl	8007d64 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	db25      	blt.n	8007dd6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	60fa      	str	r2, [r7, #12]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	4413      	add	r3, r2
 8007d94:	78fa      	ldrb	r2, [r7, #3]
 8007d96:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b3c      	cmp	r3, #60	; 0x3c
 8007d9c:	dd12      	ble.n	8007dc4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f103 010c 	add.w	r1, r3, #12
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	f107 0308 	add.w	r3, r7, #8
 8007dae:	f7ff f929 	bl	8007004 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d101      	bne.n	8007dbe <putc_bfd+0x5a>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e001      	b.n	8007dc2 <putc_bfd+0x5e>
 8007dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dc2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	609a      	str	r2, [r3, #8]
 8007dd4:	e000      	b.n	8007dd8 <putc_bfd+0x74>
	if (i < 0) return;
 8007dd6:	bf00      	nop
}
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007dde:	b590      	push	{r4, r7, lr}
 8007de0:	b097      	sub	sp, #92	; 0x5c
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	613b      	str	r3, [r7, #16]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8007df4:	e009      	b.n	8007e0a <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	781a      	ldrb	r2, [r3, #0]
 8007dfe:	f107 030c 	add.w	r3, r7, #12
 8007e02:	4611      	mov	r1, r2
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff ffad 	bl	8007d64 <putc_bfd>
	while (*str)			/* Put the string */
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f1      	bne.n	8007df6 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	db15      	blt.n	8007e44 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	461c      	mov	r4, r3
 8007e1e:	f107 0208 	add.w	r2, r7, #8
 8007e22:	f107 030c 	add.w	r3, r7, #12
 8007e26:	f103 010c 	add.w	r1, r3, #12
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	f7ff f8e9 	bl	8007004 <f_write>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d105      	bne.n	8007e44 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d101      	bne.n	8007e44 <f_puts+0x66>
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	e001      	b.n	8007e48 <f_puts+0x6a>
	return EOF;
 8007e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	375c      	adds	r7, #92	; 0x5c
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd90      	pop	{r4, r7, pc}

08007e50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007e66:	4b1e      	ldr	r3, [pc, #120]	; (8007ee0 <FATFS_LinkDriverEx+0x90>)
 8007e68:	7a5b      	ldrb	r3, [r3, #9]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d831      	bhi.n	8007ed4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e70:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <FATFS_LinkDriverEx+0x90>)
 8007e72:	7a5b      	ldrb	r3, [r3, #9]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	461a      	mov	r2, r3
 8007e78:	4b19      	ldr	r3, [pc, #100]	; (8007ee0 <FATFS_LinkDriverEx+0x90>)
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007e7e:	4b18      	ldr	r3, [pc, #96]	; (8007ee0 <FATFS_LinkDriverEx+0x90>)
 8007e80:	7a5b      	ldrb	r3, [r3, #9]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	4a16      	ldr	r2, [pc, #88]	; (8007ee0 <FATFS_LinkDriverEx+0x90>)
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007e8e:	4b14      	ldr	r3, [pc, #80]	; (8007ee0 <FATFS_LinkDriverEx+0x90>)
 8007e90:	7a5b      	ldrb	r3, [r3, #9]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <FATFS_LinkDriverEx+0x90>)
 8007e98:	4413      	add	r3, r2
 8007e9a:	79fa      	ldrb	r2, [r7, #7]
 8007e9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e9e:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <FATFS_LinkDriverEx+0x90>)
 8007ea0:	7a5b      	ldrb	r3, [r3, #9]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	b2d1      	uxtb	r1, r2
 8007ea8:	4a0d      	ldr	r2, [pc, #52]	; (8007ee0 <FATFS_LinkDriverEx+0x90>)
 8007eaa:	7251      	strb	r1, [r2, #9]
 8007eac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007eae:	7dbb      	ldrb	r3, [r7, #22]
 8007eb0:	3330      	adds	r3, #48	; 0x30
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	223a      	movs	r2, #58	; 0x3a
 8007ebe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	3302      	adds	r3, #2
 8007ec4:	222f      	movs	r2, #47	; 0x2f
 8007ec6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	3303      	adds	r3, #3
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bc80      	pop	{r7}
 8007ede:	4770      	bx	lr
 8007ee0:	200002dc 	.word	0x200002dc

08007ee4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff ffac 	bl	8007e50 <FATFS_LinkDriverEx>
 8007ef8:	4603      	mov	r3, r0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	6039      	str	r1, [r7, #0]
 8007f0e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007f10:	88fb      	ldrh	r3, [r7, #6]
 8007f12:	2b7f      	cmp	r3, #127	; 0x7f
 8007f14:	d802      	bhi.n	8007f1c <ff_convert+0x18>
		c = chr;
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	81fb      	strh	r3, [r7, #14]
 8007f1a:	e025      	b.n	8007f68 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007f22:	88fb      	ldrh	r3, [r7, #6]
 8007f24:	2bff      	cmp	r3, #255	; 0xff
 8007f26:	d805      	bhi.n	8007f34 <ff_convert+0x30>
 8007f28:	88fb      	ldrh	r3, [r7, #6]
 8007f2a:	3b80      	subs	r3, #128	; 0x80
 8007f2c:	4a11      	ldr	r2, [pc, #68]	; (8007f74 <ff_convert+0x70>)
 8007f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f32:	e000      	b.n	8007f36 <ff_convert+0x32>
 8007f34:	2300      	movs	r3, #0
 8007f36:	81fb      	strh	r3, [r7, #14]
 8007f38:	e016      	b.n	8007f68 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	81fb      	strh	r3, [r7, #14]
 8007f3e:	e009      	b.n	8007f54 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007f40:	89fb      	ldrh	r3, [r7, #14]
 8007f42:	4a0c      	ldr	r2, [pc, #48]	; (8007f74 <ff_convert+0x70>)
 8007f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f48:	88fa      	ldrh	r2, [r7, #6]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d006      	beq.n	8007f5c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007f4e:	89fb      	ldrh	r3, [r7, #14]
 8007f50:	3301      	adds	r3, #1
 8007f52:	81fb      	strh	r3, [r7, #14]
 8007f54:	89fb      	ldrh	r3, [r7, #14]
 8007f56:	2b7f      	cmp	r3, #127	; 0x7f
 8007f58:	d9f2      	bls.n	8007f40 <ff_convert+0x3c>
 8007f5a:	e000      	b.n	8007f5e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007f5c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007f5e:	89fb      	ldrh	r3, [r7, #14]
 8007f60:	3380      	adds	r3, #128	; 0x80
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007f68:	89fb      	ldrh	r3, [r7, #14]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bc80      	pop	{r7}
 8007f72:	4770      	bx	lr
 8007f74:	08008b30 	.word	0x08008b30

08007f78 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	e002      	b.n	8007f8e <ff_wtoupper+0x16>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	4a0f      	ldr	r2, [pc, #60]	; (8007fcc <ff_wtoupper+0x54>)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d006      	beq.n	8007fa8 <ff_wtoupper+0x30>
 8007f9a:	4a0c      	ldr	r2, [pc, #48]	; (8007fcc <ff_wtoupper+0x54>)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fa2:	88fa      	ldrh	r2, [r7, #6]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d1ef      	bne.n	8007f88 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007fa8:	4a08      	ldr	r2, [pc, #32]	; (8007fcc <ff_wtoupper+0x54>)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <ff_wtoupper+0x46>
 8007fb4:	4a06      	ldr	r2, [pc, #24]	; (8007fd0 <ff_wtoupper+0x58>)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fbc:	e000      	b.n	8007fc0 <ff_wtoupper+0x48>
 8007fbe:	88fb      	ldrh	r3, [r7, #6]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	08008c30 	.word	0x08008c30
 8007fd0:	08008e10 	.word	0x08008e10

08007fd4 <__errno>:
 8007fd4:	4b01      	ldr	r3, [pc, #4]	; (8007fdc <__errno+0x8>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000034 	.word	0x20000034

08007fe0 <__libc_init_array>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	2600      	movs	r6, #0
 8007fe4:	4d0c      	ldr	r5, [pc, #48]	; (8008018 <__libc_init_array+0x38>)
 8007fe6:	4c0d      	ldr	r4, [pc, #52]	; (800801c <__libc_init_array+0x3c>)
 8007fe8:	1b64      	subs	r4, r4, r5
 8007fea:	10a4      	asrs	r4, r4, #2
 8007fec:	42a6      	cmp	r6, r4
 8007fee:	d109      	bne.n	8008004 <__libc_init_array+0x24>
 8007ff0:	f000 fce4 	bl	80089bc <_init>
 8007ff4:	2600      	movs	r6, #0
 8007ff6:	4d0a      	ldr	r5, [pc, #40]	; (8008020 <__libc_init_array+0x40>)
 8007ff8:	4c0a      	ldr	r4, [pc, #40]	; (8008024 <__libc_init_array+0x44>)
 8007ffa:	1b64      	subs	r4, r4, r5
 8007ffc:	10a4      	asrs	r4, r4, #2
 8007ffe:	42a6      	cmp	r6, r4
 8008000:	d105      	bne.n	800800e <__libc_init_array+0x2e>
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	f855 3b04 	ldr.w	r3, [r5], #4
 8008008:	4798      	blx	r3
 800800a:	3601      	adds	r6, #1
 800800c:	e7ee      	b.n	8007fec <__libc_init_array+0xc>
 800800e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008012:	4798      	blx	r3
 8008014:	3601      	adds	r6, #1
 8008016:	e7f2      	b.n	8007ffe <__libc_init_array+0x1e>
 8008018:	08009054 	.word	0x08009054
 800801c:	08009054 	.word	0x08009054
 8008020:	08009054 	.word	0x08009054
 8008024:	08009058 	.word	0x08009058

08008028 <memset>:
 8008028:	4603      	mov	r3, r0
 800802a:	4402      	add	r2, r0
 800802c:	4293      	cmp	r3, r2
 800802e:	d100      	bne.n	8008032 <memset+0xa>
 8008030:	4770      	bx	lr
 8008032:	f803 1b01 	strb.w	r1, [r3], #1
 8008036:	e7f9      	b.n	800802c <memset+0x4>

08008038 <_puts_r>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	460e      	mov	r6, r1
 800803c:	4605      	mov	r5, r0
 800803e:	b118      	cbz	r0, 8008048 <_puts_r+0x10>
 8008040:	6983      	ldr	r3, [r0, #24]
 8008042:	b90b      	cbnz	r3, 8008048 <_puts_r+0x10>
 8008044:	f000 fa48 	bl	80084d8 <__sinit>
 8008048:	69ab      	ldr	r3, [r5, #24]
 800804a:	68ac      	ldr	r4, [r5, #8]
 800804c:	b913      	cbnz	r3, 8008054 <_puts_r+0x1c>
 800804e:	4628      	mov	r0, r5
 8008050:	f000 fa42 	bl	80084d8 <__sinit>
 8008054:	4b2c      	ldr	r3, [pc, #176]	; (8008108 <_puts_r+0xd0>)
 8008056:	429c      	cmp	r4, r3
 8008058:	d120      	bne.n	800809c <_puts_r+0x64>
 800805a:	686c      	ldr	r4, [r5, #4]
 800805c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800805e:	07db      	lsls	r3, r3, #31
 8008060:	d405      	bmi.n	800806e <_puts_r+0x36>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	0598      	lsls	r0, r3, #22
 8008066:	d402      	bmi.n	800806e <_puts_r+0x36>
 8008068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806a:	f000 fad3 	bl	8008614 <__retarget_lock_acquire_recursive>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	0719      	lsls	r1, r3, #28
 8008072:	d51d      	bpl.n	80080b0 <_puts_r+0x78>
 8008074:	6923      	ldr	r3, [r4, #16]
 8008076:	b1db      	cbz	r3, 80080b0 <_puts_r+0x78>
 8008078:	3e01      	subs	r6, #1
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008080:	3b01      	subs	r3, #1
 8008082:	60a3      	str	r3, [r4, #8]
 8008084:	bb39      	cbnz	r1, 80080d6 <_puts_r+0x9e>
 8008086:	2b00      	cmp	r3, #0
 8008088:	da38      	bge.n	80080fc <_puts_r+0xc4>
 800808a:	4622      	mov	r2, r4
 800808c:	210a      	movs	r1, #10
 800808e:	4628      	mov	r0, r5
 8008090:	f000 f848 	bl	8008124 <__swbuf_r>
 8008094:	3001      	adds	r0, #1
 8008096:	d011      	beq.n	80080bc <_puts_r+0x84>
 8008098:	250a      	movs	r5, #10
 800809a:	e011      	b.n	80080c0 <_puts_r+0x88>
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <_puts_r+0xd4>)
 800809e:	429c      	cmp	r4, r3
 80080a0:	d101      	bne.n	80080a6 <_puts_r+0x6e>
 80080a2:	68ac      	ldr	r4, [r5, #8]
 80080a4:	e7da      	b.n	800805c <_puts_r+0x24>
 80080a6:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <_puts_r+0xd8>)
 80080a8:	429c      	cmp	r4, r3
 80080aa:	bf08      	it	eq
 80080ac:	68ec      	ldreq	r4, [r5, #12]
 80080ae:	e7d5      	b.n	800805c <_puts_r+0x24>
 80080b0:	4621      	mov	r1, r4
 80080b2:	4628      	mov	r0, r5
 80080b4:	f000 f888 	bl	80081c8 <__swsetup_r>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d0dd      	beq.n	8008078 <_puts_r+0x40>
 80080bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80080c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080c2:	07da      	lsls	r2, r3, #31
 80080c4:	d405      	bmi.n	80080d2 <_puts_r+0x9a>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	059b      	lsls	r3, r3, #22
 80080ca:	d402      	bmi.n	80080d2 <_puts_r+0x9a>
 80080cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ce:	f000 faa2 	bl	8008616 <__retarget_lock_release_recursive>
 80080d2:	4628      	mov	r0, r5
 80080d4:	bd70      	pop	{r4, r5, r6, pc}
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	da04      	bge.n	80080e4 <_puts_r+0xac>
 80080da:	69a2      	ldr	r2, [r4, #24]
 80080dc:	429a      	cmp	r2, r3
 80080de:	dc06      	bgt.n	80080ee <_puts_r+0xb6>
 80080e0:	290a      	cmp	r1, #10
 80080e2:	d004      	beq.n	80080ee <_puts_r+0xb6>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	6022      	str	r2, [r4, #0]
 80080ea:	7019      	strb	r1, [r3, #0]
 80080ec:	e7c5      	b.n	800807a <_puts_r+0x42>
 80080ee:	4622      	mov	r2, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 f817 	bl	8008124 <__swbuf_r>
 80080f6:	3001      	adds	r0, #1
 80080f8:	d1bf      	bne.n	800807a <_puts_r+0x42>
 80080fa:	e7df      	b.n	80080bc <_puts_r+0x84>
 80080fc:	250a      	movs	r5, #10
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	6022      	str	r2, [r4, #0]
 8008104:	701d      	strb	r5, [r3, #0]
 8008106:	e7db      	b.n	80080c0 <_puts_r+0x88>
 8008108:	08009014 	.word	0x08009014
 800810c:	08009034 	.word	0x08009034
 8008110:	08008ff4 	.word	0x08008ff4

08008114 <puts>:
 8008114:	4b02      	ldr	r3, [pc, #8]	; (8008120 <puts+0xc>)
 8008116:	4601      	mov	r1, r0
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	f7ff bf8d 	b.w	8008038 <_puts_r>
 800811e:	bf00      	nop
 8008120:	20000034 	.word	0x20000034

08008124 <__swbuf_r>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	460e      	mov	r6, r1
 8008128:	4614      	mov	r4, r2
 800812a:	4605      	mov	r5, r0
 800812c:	b118      	cbz	r0, 8008136 <__swbuf_r+0x12>
 800812e:	6983      	ldr	r3, [r0, #24]
 8008130:	b90b      	cbnz	r3, 8008136 <__swbuf_r+0x12>
 8008132:	f000 f9d1 	bl	80084d8 <__sinit>
 8008136:	4b21      	ldr	r3, [pc, #132]	; (80081bc <__swbuf_r+0x98>)
 8008138:	429c      	cmp	r4, r3
 800813a:	d12b      	bne.n	8008194 <__swbuf_r+0x70>
 800813c:	686c      	ldr	r4, [r5, #4]
 800813e:	69a3      	ldr	r3, [r4, #24]
 8008140:	60a3      	str	r3, [r4, #8]
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	071a      	lsls	r2, r3, #28
 8008146:	d52f      	bpl.n	80081a8 <__swbuf_r+0x84>
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	b36b      	cbz	r3, 80081a8 <__swbuf_r+0x84>
 800814c:	6923      	ldr	r3, [r4, #16]
 800814e:	6820      	ldr	r0, [r4, #0]
 8008150:	b2f6      	uxtb	r6, r6
 8008152:	1ac0      	subs	r0, r0, r3
 8008154:	6963      	ldr	r3, [r4, #20]
 8008156:	4637      	mov	r7, r6
 8008158:	4283      	cmp	r3, r0
 800815a:	dc04      	bgt.n	8008166 <__swbuf_r+0x42>
 800815c:	4621      	mov	r1, r4
 800815e:	4628      	mov	r0, r5
 8008160:	f000 f926 	bl	80083b0 <_fflush_r>
 8008164:	bb30      	cbnz	r0, 80081b4 <__swbuf_r+0x90>
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	3001      	adds	r0, #1
 800816a:	3b01      	subs	r3, #1
 800816c:	60a3      	str	r3, [r4, #8]
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	6022      	str	r2, [r4, #0]
 8008174:	701e      	strb	r6, [r3, #0]
 8008176:	6963      	ldr	r3, [r4, #20]
 8008178:	4283      	cmp	r3, r0
 800817a:	d004      	beq.n	8008186 <__swbuf_r+0x62>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	07db      	lsls	r3, r3, #31
 8008180:	d506      	bpl.n	8008190 <__swbuf_r+0x6c>
 8008182:	2e0a      	cmp	r6, #10
 8008184:	d104      	bne.n	8008190 <__swbuf_r+0x6c>
 8008186:	4621      	mov	r1, r4
 8008188:	4628      	mov	r0, r5
 800818a:	f000 f911 	bl	80083b0 <_fflush_r>
 800818e:	b988      	cbnz	r0, 80081b4 <__swbuf_r+0x90>
 8008190:	4638      	mov	r0, r7
 8008192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008194:	4b0a      	ldr	r3, [pc, #40]	; (80081c0 <__swbuf_r+0x9c>)
 8008196:	429c      	cmp	r4, r3
 8008198:	d101      	bne.n	800819e <__swbuf_r+0x7a>
 800819a:	68ac      	ldr	r4, [r5, #8]
 800819c:	e7cf      	b.n	800813e <__swbuf_r+0x1a>
 800819e:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <__swbuf_r+0xa0>)
 80081a0:	429c      	cmp	r4, r3
 80081a2:	bf08      	it	eq
 80081a4:	68ec      	ldreq	r4, [r5, #12]
 80081a6:	e7ca      	b.n	800813e <__swbuf_r+0x1a>
 80081a8:	4621      	mov	r1, r4
 80081aa:	4628      	mov	r0, r5
 80081ac:	f000 f80c 	bl	80081c8 <__swsetup_r>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d0cb      	beq.n	800814c <__swbuf_r+0x28>
 80081b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80081b8:	e7ea      	b.n	8008190 <__swbuf_r+0x6c>
 80081ba:	bf00      	nop
 80081bc:	08009014 	.word	0x08009014
 80081c0:	08009034 	.word	0x08009034
 80081c4:	08008ff4 	.word	0x08008ff4

080081c8 <__swsetup_r>:
 80081c8:	4b32      	ldr	r3, [pc, #200]	; (8008294 <__swsetup_r+0xcc>)
 80081ca:	b570      	push	{r4, r5, r6, lr}
 80081cc:	681d      	ldr	r5, [r3, #0]
 80081ce:	4606      	mov	r6, r0
 80081d0:	460c      	mov	r4, r1
 80081d2:	b125      	cbz	r5, 80081de <__swsetup_r+0x16>
 80081d4:	69ab      	ldr	r3, [r5, #24]
 80081d6:	b913      	cbnz	r3, 80081de <__swsetup_r+0x16>
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 f97d 	bl	80084d8 <__sinit>
 80081de:	4b2e      	ldr	r3, [pc, #184]	; (8008298 <__swsetup_r+0xd0>)
 80081e0:	429c      	cmp	r4, r3
 80081e2:	d10f      	bne.n	8008204 <__swsetup_r+0x3c>
 80081e4:	686c      	ldr	r4, [r5, #4]
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081ec:	0719      	lsls	r1, r3, #28
 80081ee:	d42c      	bmi.n	800824a <__swsetup_r+0x82>
 80081f0:	06dd      	lsls	r5, r3, #27
 80081f2:	d411      	bmi.n	8008218 <__swsetup_r+0x50>
 80081f4:	2309      	movs	r3, #9
 80081f6:	6033      	str	r3, [r6, #0]
 80081f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008200:	81a3      	strh	r3, [r4, #12]
 8008202:	e03e      	b.n	8008282 <__swsetup_r+0xba>
 8008204:	4b25      	ldr	r3, [pc, #148]	; (800829c <__swsetup_r+0xd4>)
 8008206:	429c      	cmp	r4, r3
 8008208:	d101      	bne.n	800820e <__swsetup_r+0x46>
 800820a:	68ac      	ldr	r4, [r5, #8]
 800820c:	e7eb      	b.n	80081e6 <__swsetup_r+0x1e>
 800820e:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <__swsetup_r+0xd8>)
 8008210:	429c      	cmp	r4, r3
 8008212:	bf08      	it	eq
 8008214:	68ec      	ldreq	r4, [r5, #12]
 8008216:	e7e6      	b.n	80081e6 <__swsetup_r+0x1e>
 8008218:	0758      	lsls	r0, r3, #29
 800821a:	d512      	bpl.n	8008242 <__swsetup_r+0x7a>
 800821c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800821e:	b141      	cbz	r1, 8008232 <__swsetup_r+0x6a>
 8008220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008224:	4299      	cmp	r1, r3
 8008226:	d002      	beq.n	800822e <__swsetup_r+0x66>
 8008228:	4630      	mov	r0, r6
 800822a:	f000 fa59 	bl	80086e0 <_free_r>
 800822e:	2300      	movs	r3, #0
 8008230:	6363      	str	r3, [r4, #52]	; 0x34
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008238:	81a3      	strh	r3, [r4, #12]
 800823a:	2300      	movs	r3, #0
 800823c:	6063      	str	r3, [r4, #4]
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	89a3      	ldrh	r3, [r4, #12]
 8008244:	f043 0308 	orr.w	r3, r3, #8
 8008248:	81a3      	strh	r3, [r4, #12]
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	b94b      	cbnz	r3, 8008262 <__swsetup_r+0x9a>
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008258:	d003      	beq.n	8008262 <__swsetup_r+0x9a>
 800825a:	4621      	mov	r1, r4
 800825c:	4630      	mov	r0, r6
 800825e:	f000 f9ff 	bl	8008660 <__smakebuf_r>
 8008262:	89a0      	ldrh	r0, [r4, #12]
 8008264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008268:	f010 0301 	ands.w	r3, r0, #1
 800826c:	d00a      	beq.n	8008284 <__swsetup_r+0xbc>
 800826e:	2300      	movs	r3, #0
 8008270:	60a3      	str	r3, [r4, #8]
 8008272:	6963      	ldr	r3, [r4, #20]
 8008274:	425b      	negs	r3, r3
 8008276:	61a3      	str	r3, [r4, #24]
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	b943      	cbnz	r3, 800828e <__swsetup_r+0xc6>
 800827c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008280:	d1ba      	bne.n	80081f8 <__swsetup_r+0x30>
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	0781      	lsls	r1, r0, #30
 8008286:	bf58      	it	pl
 8008288:	6963      	ldrpl	r3, [r4, #20]
 800828a:	60a3      	str	r3, [r4, #8]
 800828c:	e7f4      	b.n	8008278 <__swsetup_r+0xb0>
 800828e:	2000      	movs	r0, #0
 8008290:	e7f7      	b.n	8008282 <__swsetup_r+0xba>
 8008292:	bf00      	nop
 8008294:	20000034 	.word	0x20000034
 8008298:	08009014 	.word	0x08009014
 800829c:	08009034 	.word	0x08009034
 80082a0:	08008ff4 	.word	0x08008ff4

080082a4 <__sflush_r>:
 80082a4:	898a      	ldrh	r2, [r1, #12]
 80082a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082aa:	4605      	mov	r5, r0
 80082ac:	0710      	lsls	r0, r2, #28
 80082ae:	460c      	mov	r4, r1
 80082b0:	d458      	bmi.n	8008364 <__sflush_r+0xc0>
 80082b2:	684b      	ldr	r3, [r1, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dc05      	bgt.n	80082c4 <__sflush_r+0x20>
 80082b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dc02      	bgt.n	80082c4 <__sflush_r+0x20>
 80082be:	2000      	movs	r0, #0
 80082c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082c6:	2e00      	cmp	r6, #0
 80082c8:	d0f9      	beq.n	80082be <__sflush_r+0x1a>
 80082ca:	2300      	movs	r3, #0
 80082cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082d0:	682f      	ldr	r7, [r5, #0]
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	d032      	beq.n	800833c <__sflush_r+0x98>
 80082d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	075a      	lsls	r2, r3, #29
 80082dc:	d505      	bpl.n	80082ea <__sflush_r+0x46>
 80082de:	6863      	ldr	r3, [r4, #4]
 80082e0:	1ac0      	subs	r0, r0, r3
 80082e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082e4:	b10b      	cbz	r3, 80082ea <__sflush_r+0x46>
 80082e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082e8:	1ac0      	subs	r0, r0, r3
 80082ea:	2300      	movs	r3, #0
 80082ec:	4602      	mov	r2, r0
 80082ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082f0:	4628      	mov	r0, r5
 80082f2:	6a21      	ldr	r1, [r4, #32]
 80082f4:	47b0      	blx	r6
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	d106      	bne.n	800830a <__sflush_r+0x66>
 80082fc:	6829      	ldr	r1, [r5, #0]
 80082fe:	291d      	cmp	r1, #29
 8008300:	d82c      	bhi.n	800835c <__sflush_r+0xb8>
 8008302:	4a2a      	ldr	r2, [pc, #168]	; (80083ac <__sflush_r+0x108>)
 8008304:	40ca      	lsrs	r2, r1
 8008306:	07d6      	lsls	r6, r2, #31
 8008308:	d528      	bpl.n	800835c <__sflush_r+0xb8>
 800830a:	2200      	movs	r2, #0
 800830c:	6062      	str	r2, [r4, #4]
 800830e:	6922      	ldr	r2, [r4, #16]
 8008310:	04d9      	lsls	r1, r3, #19
 8008312:	6022      	str	r2, [r4, #0]
 8008314:	d504      	bpl.n	8008320 <__sflush_r+0x7c>
 8008316:	1c42      	adds	r2, r0, #1
 8008318:	d101      	bne.n	800831e <__sflush_r+0x7a>
 800831a:	682b      	ldr	r3, [r5, #0]
 800831c:	b903      	cbnz	r3, 8008320 <__sflush_r+0x7c>
 800831e:	6560      	str	r0, [r4, #84]	; 0x54
 8008320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008322:	602f      	str	r7, [r5, #0]
 8008324:	2900      	cmp	r1, #0
 8008326:	d0ca      	beq.n	80082be <__sflush_r+0x1a>
 8008328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800832c:	4299      	cmp	r1, r3
 800832e:	d002      	beq.n	8008336 <__sflush_r+0x92>
 8008330:	4628      	mov	r0, r5
 8008332:	f000 f9d5 	bl	80086e0 <_free_r>
 8008336:	2000      	movs	r0, #0
 8008338:	6360      	str	r0, [r4, #52]	; 0x34
 800833a:	e7c1      	b.n	80082c0 <__sflush_r+0x1c>
 800833c:	6a21      	ldr	r1, [r4, #32]
 800833e:	2301      	movs	r3, #1
 8008340:	4628      	mov	r0, r5
 8008342:	47b0      	blx	r6
 8008344:	1c41      	adds	r1, r0, #1
 8008346:	d1c7      	bne.n	80082d8 <__sflush_r+0x34>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0c4      	beq.n	80082d8 <__sflush_r+0x34>
 800834e:	2b1d      	cmp	r3, #29
 8008350:	d001      	beq.n	8008356 <__sflush_r+0xb2>
 8008352:	2b16      	cmp	r3, #22
 8008354:	d101      	bne.n	800835a <__sflush_r+0xb6>
 8008356:	602f      	str	r7, [r5, #0]
 8008358:	e7b1      	b.n	80082be <__sflush_r+0x1a>
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008360:	81a3      	strh	r3, [r4, #12]
 8008362:	e7ad      	b.n	80082c0 <__sflush_r+0x1c>
 8008364:	690f      	ldr	r7, [r1, #16]
 8008366:	2f00      	cmp	r7, #0
 8008368:	d0a9      	beq.n	80082be <__sflush_r+0x1a>
 800836a:	0793      	lsls	r3, r2, #30
 800836c:	bf18      	it	ne
 800836e:	2300      	movne	r3, #0
 8008370:	680e      	ldr	r6, [r1, #0]
 8008372:	bf08      	it	eq
 8008374:	694b      	ldreq	r3, [r1, #20]
 8008376:	eba6 0807 	sub.w	r8, r6, r7
 800837a:	600f      	str	r7, [r1, #0]
 800837c:	608b      	str	r3, [r1, #8]
 800837e:	f1b8 0f00 	cmp.w	r8, #0
 8008382:	dd9c      	ble.n	80082be <__sflush_r+0x1a>
 8008384:	4643      	mov	r3, r8
 8008386:	463a      	mov	r2, r7
 8008388:	4628      	mov	r0, r5
 800838a:	6a21      	ldr	r1, [r4, #32]
 800838c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800838e:	47b0      	blx	r6
 8008390:	2800      	cmp	r0, #0
 8008392:	dc06      	bgt.n	80083a2 <__sflush_r+0xfe>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800839a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	e78e      	b.n	80082c0 <__sflush_r+0x1c>
 80083a2:	4407      	add	r7, r0
 80083a4:	eba8 0800 	sub.w	r8, r8, r0
 80083a8:	e7e9      	b.n	800837e <__sflush_r+0xda>
 80083aa:	bf00      	nop
 80083ac:	20400001 	.word	0x20400001

080083b0 <_fflush_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	690b      	ldr	r3, [r1, #16]
 80083b4:	4605      	mov	r5, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	b913      	cbnz	r3, 80083c0 <_fflush_r+0x10>
 80083ba:	2500      	movs	r5, #0
 80083bc:	4628      	mov	r0, r5
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	b118      	cbz	r0, 80083ca <_fflush_r+0x1a>
 80083c2:	6983      	ldr	r3, [r0, #24]
 80083c4:	b90b      	cbnz	r3, 80083ca <_fflush_r+0x1a>
 80083c6:	f000 f887 	bl	80084d8 <__sinit>
 80083ca:	4b14      	ldr	r3, [pc, #80]	; (800841c <_fflush_r+0x6c>)
 80083cc:	429c      	cmp	r4, r3
 80083ce:	d11b      	bne.n	8008408 <_fflush_r+0x58>
 80083d0:	686c      	ldr	r4, [r5, #4]
 80083d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d0ef      	beq.n	80083ba <_fflush_r+0xa>
 80083da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083dc:	07d0      	lsls	r0, r2, #31
 80083de:	d404      	bmi.n	80083ea <_fflush_r+0x3a>
 80083e0:	0599      	lsls	r1, r3, #22
 80083e2:	d402      	bmi.n	80083ea <_fflush_r+0x3a>
 80083e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083e6:	f000 f915 	bl	8008614 <__retarget_lock_acquire_recursive>
 80083ea:	4628      	mov	r0, r5
 80083ec:	4621      	mov	r1, r4
 80083ee:	f7ff ff59 	bl	80082a4 <__sflush_r>
 80083f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083f4:	4605      	mov	r5, r0
 80083f6:	07da      	lsls	r2, r3, #31
 80083f8:	d4e0      	bmi.n	80083bc <_fflush_r+0xc>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	059b      	lsls	r3, r3, #22
 80083fe:	d4dd      	bmi.n	80083bc <_fflush_r+0xc>
 8008400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008402:	f000 f908 	bl	8008616 <__retarget_lock_release_recursive>
 8008406:	e7d9      	b.n	80083bc <_fflush_r+0xc>
 8008408:	4b05      	ldr	r3, [pc, #20]	; (8008420 <_fflush_r+0x70>)
 800840a:	429c      	cmp	r4, r3
 800840c:	d101      	bne.n	8008412 <_fflush_r+0x62>
 800840e:	68ac      	ldr	r4, [r5, #8]
 8008410:	e7df      	b.n	80083d2 <_fflush_r+0x22>
 8008412:	4b04      	ldr	r3, [pc, #16]	; (8008424 <_fflush_r+0x74>)
 8008414:	429c      	cmp	r4, r3
 8008416:	bf08      	it	eq
 8008418:	68ec      	ldreq	r4, [r5, #12]
 800841a:	e7da      	b.n	80083d2 <_fflush_r+0x22>
 800841c:	08009014 	.word	0x08009014
 8008420:	08009034 	.word	0x08009034
 8008424:	08008ff4 	.word	0x08008ff4

08008428 <std>:
 8008428:	2300      	movs	r3, #0
 800842a:	b510      	push	{r4, lr}
 800842c:	4604      	mov	r4, r0
 800842e:	e9c0 3300 	strd	r3, r3, [r0]
 8008432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008436:	6083      	str	r3, [r0, #8]
 8008438:	8181      	strh	r1, [r0, #12]
 800843a:	6643      	str	r3, [r0, #100]	; 0x64
 800843c:	81c2      	strh	r2, [r0, #14]
 800843e:	6183      	str	r3, [r0, #24]
 8008440:	4619      	mov	r1, r3
 8008442:	2208      	movs	r2, #8
 8008444:	305c      	adds	r0, #92	; 0x5c
 8008446:	f7ff fdef 	bl	8008028 <memset>
 800844a:	4b05      	ldr	r3, [pc, #20]	; (8008460 <std+0x38>)
 800844c:	6224      	str	r4, [r4, #32]
 800844e:	6263      	str	r3, [r4, #36]	; 0x24
 8008450:	4b04      	ldr	r3, [pc, #16]	; (8008464 <std+0x3c>)
 8008452:	62a3      	str	r3, [r4, #40]	; 0x28
 8008454:	4b04      	ldr	r3, [pc, #16]	; (8008468 <std+0x40>)
 8008456:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008458:	4b04      	ldr	r3, [pc, #16]	; (800846c <std+0x44>)
 800845a:	6323      	str	r3, [r4, #48]	; 0x30
 800845c:	bd10      	pop	{r4, pc}
 800845e:	bf00      	nop
 8008460:	0800884d 	.word	0x0800884d
 8008464:	0800886f 	.word	0x0800886f
 8008468:	080088a7 	.word	0x080088a7
 800846c:	080088cb 	.word	0x080088cb

08008470 <_cleanup_r>:
 8008470:	4901      	ldr	r1, [pc, #4]	; (8008478 <_cleanup_r+0x8>)
 8008472:	f000 b8af 	b.w	80085d4 <_fwalk_reent>
 8008476:	bf00      	nop
 8008478:	080083b1 	.word	0x080083b1

0800847c <__sfmoreglue>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	2568      	movs	r5, #104	; 0x68
 8008480:	1e4a      	subs	r2, r1, #1
 8008482:	4355      	muls	r5, r2
 8008484:	460e      	mov	r6, r1
 8008486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800848a:	f000 f975 	bl	8008778 <_malloc_r>
 800848e:	4604      	mov	r4, r0
 8008490:	b140      	cbz	r0, 80084a4 <__sfmoreglue+0x28>
 8008492:	2100      	movs	r1, #0
 8008494:	e9c0 1600 	strd	r1, r6, [r0]
 8008498:	300c      	adds	r0, #12
 800849a:	60a0      	str	r0, [r4, #8]
 800849c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084a0:	f7ff fdc2 	bl	8008028 <memset>
 80084a4:	4620      	mov	r0, r4
 80084a6:	bd70      	pop	{r4, r5, r6, pc}

080084a8 <__sfp_lock_acquire>:
 80084a8:	4801      	ldr	r0, [pc, #4]	; (80084b0 <__sfp_lock_acquire+0x8>)
 80084aa:	f000 b8b3 	b.w	8008614 <__retarget_lock_acquire_recursive>
 80084ae:	bf00      	nop
 80084b0:	200045a8 	.word	0x200045a8

080084b4 <__sfp_lock_release>:
 80084b4:	4801      	ldr	r0, [pc, #4]	; (80084bc <__sfp_lock_release+0x8>)
 80084b6:	f000 b8ae 	b.w	8008616 <__retarget_lock_release_recursive>
 80084ba:	bf00      	nop
 80084bc:	200045a8 	.word	0x200045a8

080084c0 <__sinit_lock_acquire>:
 80084c0:	4801      	ldr	r0, [pc, #4]	; (80084c8 <__sinit_lock_acquire+0x8>)
 80084c2:	f000 b8a7 	b.w	8008614 <__retarget_lock_acquire_recursive>
 80084c6:	bf00      	nop
 80084c8:	200045a3 	.word	0x200045a3

080084cc <__sinit_lock_release>:
 80084cc:	4801      	ldr	r0, [pc, #4]	; (80084d4 <__sinit_lock_release+0x8>)
 80084ce:	f000 b8a2 	b.w	8008616 <__retarget_lock_release_recursive>
 80084d2:	bf00      	nop
 80084d4:	200045a3 	.word	0x200045a3

080084d8 <__sinit>:
 80084d8:	b510      	push	{r4, lr}
 80084da:	4604      	mov	r4, r0
 80084dc:	f7ff fff0 	bl	80084c0 <__sinit_lock_acquire>
 80084e0:	69a3      	ldr	r3, [r4, #24]
 80084e2:	b11b      	cbz	r3, 80084ec <__sinit+0x14>
 80084e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e8:	f7ff bff0 	b.w	80084cc <__sinit_lock_release>
 80084ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084f0:	6523      	str	r3, [r4, #80]	; 0x50
 80084f2:	4b13      	ldr	r3, [pc, #76]	; (8008540 <__sinit+0x68>)
 80084f4:	4a13      	ldr	r2, [pc, #76]	; (8008544 <__sinit+0x6c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80084fa:	42a3      	cmp	r3, r4
 80084fc:	bf08      	it	eq
 80084fe:	2301      	moveq	r3, #1
 8008500:	4620      	mov	r0, r4
 8008502:	bf08      	it	eq
 8008504:	61a3      	streq	r3, [r4, #24]
 8008506:	f000 f81f 	bl	8008548 <__sfp>
 800850a:	6060      	str	r0, [r4, #4]
 800850c:	4620      	mov	r0, r4
 800850e:	f000 f81b 	bl	8008548 <__sfp>
 8008512:	60a0      	str	r0, [r4, #8]
 8008514:	4620      	mov	r0, r4
 8008516:	f000 f817 	bl	8008548 <__sfp>
 800851a:	2200      	movs	r2, #0
 800851c:	2104      	movs	r1, #4
 800851e:	60e0      	str	r0, [r4, #12]
 8008520:	6860      	ldr	r0, [r4, #4]
 8008522:	f7ff ff81 	bl	8008428 <std>
 8008526:	2201      	movs	r2, #1
 8008528:	2109      	movs	r1, #9
 800852a:	68a0      	ldr	r0, [r4, #8]
 800852c:	f7ff ff7c 	bl	8008428 <std>
 8008530:	2202      	movs	r2, #2
 8008532:	2112      	movs	r1, #18
 8008534:	68e0      	ldr	r0, [r4, #12]
 8008536:	f7ff ff77 	bl	8008428 <std>
 800853a:	2301      	movs	r3, #1
 800853c:	61a3      	str	r3, [r4, #24]
 800853e:	e7d1      	b.n	80084e4 <__sinit+0xc>
 8008540:	08008ff0 	.word	0x08008ff0
 8008544:	08008471 	.word	0x08008471

08008548 <__sfp>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	4607      	mov	r7, r0
 800854c:	f7ff ffac 	bl	80084a8 <__sfp_lock_acquire>
 8008550:	4b1e      	ldr	r3, [pc, #120]	; (80085cc <__sfp+0x84>)
 8008552:	681e      	ldr	r6, [r3, #0]
 8008554:	69b3      	ldr	r3, [r6, #24]
 8008556:	b913      	cbnz	r3, 800855e <__sfp+0x16>
 8008558:	4630      	mov	r0, r6
 800855a:	f7ff ffbd 	bl	80084d8 <__sinit>
 800855e:	3648      	adds	r6, #72	; 0x48
 8008560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008564:	3b01      	subs	r3, #1
 8008566:	d503      	bpl.n	8008570 <__sfp+0x28>
 8008568:	6833      	ldr	r3, [r6, #0]
 800856a:	b30b      	cbz	r3, 80085b0 <__sfp+0x68>
 800856c:	6836      	ldr	r6, [r6, #0]
 800856e:	e7f7      	b.n	8008560 <__sfp+0x18>
 8008570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008574:	b9d5      	cbnz	r5, 80085ac <__sfp+0x64>
 8008576:	4b16      	ldr	r3, [pc, #88]	; (80085d0 <__sfp+0x88>)
 8008578:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800857c:	60e3      	str	r3, [r4, #12]
 800857e:	6665      	str	r5, [r4, #100]	; 0x64
 8008580:	f000 f847 	bl	8008612 <__retarget_lock_init_recursive>
 8008584:	f7ff ff96 	bl	80084b4 <__sfp_lock_release>
 8008588:	2208      	movs	r2, #8
 800858a:	4629      	mov	r1, r5
 800858c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008594:	6025      	str	r5, [r4, #0]
 8008596:	61a5      	str	r5, [r4, #24]
 8008598:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800859c:	f7ff fd44 	bl	8008028 <memset>
 80085a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085a8:	4620      	mov	r0, r4
 80085aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ac:	3468      	adds	r4, #104	; 0x68
 80085ae:	e7d9      	b.n	8008564 <__sfp+0x1c>
 80085b0:	2104      	movs	r1, #4
 80085b2:	4638      	mov	r0, r7
 80085b4:	f7ff ff62 	bl	800847c <__sfmoreglue>
 80085b8:	4604      	mov	r4, r0
 80085ba:	6030      	str	r0, [r6, #0]
 80085bc:	2800      	cmp	r0, #0
 80085be:	d1d5      	bne.n	800856c <__sfp+0x24>
 80085c0:	f7ff ff78 	bl	80084b4 <__sfp_lock_release>
 80085c4:	230c      	movs	r3, #12
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	e7ee      	b.n	80085a8 <__sfp+0x60>
 80085ca:	bf00      	nop
 80085cc:	08008ff0 	.word	0x08008ff0
 80085d0:	ffff0001 	.word	0xffff0001

080085d4 <_fwalk_reent>:
 80085d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d8:	4606      	mov	r6, r0
 80085da:	4688      	mov	r8, r1
 80085dc:	2700      	movs	r7, #0
 80085de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085e6:	f1b9 0901 	subs.w	r9, r9, #1
 80085ea:	d505      	bpl.n	80085f8 <_fwalk_reent+0x24>
 80085ec:	6824      	ldr	r4, [r4, #0]
 80085ee:	2c00      	cmp	r4, #0
 80085f0:	d1f7      	bne.n	80085e2 <_fwalk_reent+0xe>
 80085f2:	4638      	mov	r0, r7
 80085f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f8:	89ab      	ldrh	r3, [r5, #12]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d907      	bls.n	800860e <_fwalk_reent+0x3a>
 80085fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008602:	3301      	adds	r3, #1
 8008604:	d003      	beq.n	800860e <_fwalk_reent+0x3a>
 8008606:	4629      	mov	r1, r5
 8008608:	4630      	mov	r0, r6
 800860a:	47c0      	blx	r8
 800860c:	4307      	orrs	r7, r0
 800860e:	3568      	adds	r5, #104	; 0x68
 8008610:	e7e9      	b.n	80085e6 <_fwalk_reent+0x12>

08008612 <__retarget_lock_init_recursive>:
 8008612:	4770      	bx	lr

08008614 <__retarget_lock_acquire_recursive>:
 8008614:	4770      	bx	lr

08008616 <__retarget_lock_release_recursive>:
 8008616:	4770      	bx	lr

08008618 <__swhatbuf_r>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	460e      	mov	r6, r1
 800861c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008620:	4614      	mov	r4, r2
 8008622:	2900      	cmp	r1, #0
 8008624:	461d      	mov	r5, r3
 8008626:	b096      	sub	sp, #88	; 0x58
 8008628:	da07      	bge.n	800863a <__swhatbuf_r+0x22>
 800862a:	2300      	movs	r3, #0
 800862c:	602b      	str	r3, [r5, #0]
 800862e:	89b3      	ldrh	r3, [r6, #12]
 8008630:	061a      	lsls	r2, r3, #24
 8008632:	d410      	bmi.n	8008656 <__swhatbuf_r+0x3e>
 8008634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008638:	e00e      	b.n	8008658 <__swhatbuf_r+0x40>
 800863a:	466a      	mov	r2, sp
 800863c:	f000 f96c 	bl	8008918 <_fstat_r>
 8008640:	2800      	cmp	r0, #0
 8008642:	dbf2      	blt.n	800862a <__swhatbuf_r+0x12>
 8008644:	9a01      	ldr	r2, [sp, #4]
 8008646:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800864a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800864e:	425a      	negs	r2, r3
 8008650:	415a      	adcs	r2, r3
 8008652:	602a      	str	r2, [r5, #0]
 8008654:	e7ee      	b.n	8008634 <__swhatbuf_r+0x1c>
 8008656:	2340      	movs	r3, #64	; 0x40
 8008658:	2000      	movs	r0, #0
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	b016      	add	sp, #88	; 0x58
 800865e:	bd70      	pop	{r4, r5, r6, pc}

08008660 <__smakebuf_r>:
 8008660:	898b      	ldrh	r3, [r1, #12]
 8008662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008664:	079d      	lsls	r5, r3, #30
 8008666:	4606      	mov	r6, r0
 8008668:	460c      	mov	r4, r1
 800866a:	d507      	bpl.n	800867c <__smakebuf_r+0x1c>
 800866c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	6123      	str	r3, [r4, #16]
 8008674:	2301      	movs	r3, #1
 8008676:	6163      	str	r3, [r4, #20]
 8008678:	b002      	add	sp, #8
 800867a:	bd70      	pop	{r4, r5, r6, pc}
 800867c:	466a      	mov	r2, sp
 800867e:	ab01      	add	r3, sp, #4
 8008680:	f7ff ffca 	bl	8008618 <__swhatbuf_r>
 8008684:	9900      	ldr	r1, [sp, #0]
 8008686:	4605      	mov	r5, r0
 8008688:	4630      	mov	r0, r6
 800868a:	f000 f875 	bl	8008778 <_malloc_r>
 800868e:	b948      	cbnz	r0, 80086a4 <__smakebuf_r+0x44>
 8008690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008694:	059a      	lsls	r2, r3, #22
 8008696:	d4ef      	bmi.n	8008678 <__smakebuf_r+0x18>
 8008698:	f023 0303 	bic.w	r3, r3, #3
 800869c:	f043 0302 	orr.w	r3, r3, #2
 80086a0:	81a3      	strh	r3, [r4, #12]
 80086a2:	e7e3      	b.n	800866c <__smakebuf_r+0xc>
 80086a4:	4b0d      	ldr	r3, [pc, #52]	; (80086dc <__smakebuf_r+0x7c>)
 80086a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	6020      	str	r0, [r4, #0]
 80086ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b0:	81a3      	strh	r3, [r4, #12]
 80086b2:	9b00      	ldr	r3, [sp, #0]
 80086b4:	6120      	str	r0, [r4, #16]
 80086b6:	6163      	str	r3, [r4, #20]
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	b15b      	cbz	r3, 80086d4 <__smakebuf_r+0x74>
 80086bc:	4630      	mov	r0, r6
 80086be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086c2:	f000 f93b 	bl	800893c <_isatty_r>
 80086c6:	b128      	cbz	r0, 80086d4 <__smakebuf_r+0x74>
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	f023 0303 	bic.w	r3, r3, #3
 80086ce:	f043 0301 	orr.w	r3, r3, #1
 80086d2:	81a3      	strh	r3, [r4, #12]
 80086d4:	89a0      	ldrh	r0, [r4, #12]
 80086d6:	4305      	orrs	r5, r0
 80086d8:	81a5      	strh	r5, [r4, #12]
 80086da:	e7cd      	b.n	8008678 <__smakebuf_r+0x18>
 80086dc:	08008471 	.word	0x08008471

080086e0 <_free_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4605      	mov	r5, r0
 80086e4:	2900      	cmp	r1, #0
 80086e6:	d043      	beq.n	8008770 <_free_r+0x90>
 80086e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ec:	1f0c      	subs	r4, r1, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bfb8      	it	lt
 80086f2:	18e4      	addlt	r4, r4, r3
 80086f4:	f000 f944 	bl	8008980 <__malloc_lock>
 80086f8:	4a1e      	ldr	r2, [pc, #120]	; (8008774 <_free_r+0x94>)
 80086fa:	6813      	ldr	r3, [r2, #0]
 80086fc:	4610      	mov	r0, r2
 80086fe:	b933      	cbnz	r3, 800870e <_free_r+0x2e>
 8008700:	6063      	str	r3, [r4, #4]
 8008702:	6014      	str	r4, [r2, #0]
 8008704:	4628      	mov	r0, r5
 8008706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800870a:	f000 b93f 	b.w	800898c <__malloc_unlock>
 800870e:	42a3      	cmp	r3, r4
 8008710:	d90a      	bls.n	8008728 <_free_r+0x48>
 8008712:	6821      	ldr	r1, [r4, #0]
 8008714:	1862      	adds	r2, r4, r1
 8008716:	4293      	cmp	r3, r2
 8008718:	bf01      	itttt	eq
 800871a:	681a      	ldreq	r2, [r3, #0]
 800871c:	685b      	ldreq	r3, [r3, #4]
 800871e:	1852      	addeq	r2, r2, r1
 8008720:	6022      	streq	r2, [r4, #0]
 8008722:	6063      	str	r3, [r4, #4]
 8008724:	6004      	str	r4, [r0, #0]
 8008726:	e7ed      	b.n	8008704 <_free_r+0x24>
 8008728:	461a      	mov	r2, r3
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	b10b      	cbz	r3, 8008732 <_free_r+0x52>
 800872e:	42a3      	cmp	r3, r4
 8008730:	d9fa      	bls.n	8008728 <_free_r+0x48>
 8008732:	6811      	ldr	r1, [r2, #0]
 8008734:	1850      	adds	r0, r2, r1
 8008736:	42a0      	cmp	r0, r4
 8008738:	d10b      	bne.n	8008752 <_free_r+0x72>
 800873a:	6820      	ldr	r0, [r4, #0]
 800873c:	4401      	add	r1, r0
 800873e:	1850      	adds	r0, r2, r1
 8008740:	4283      	cmp	r3, r0
 8008742:	6011      	str	r1, [r2, #0]
 8008744:	d1de      	bne.n	8008704 <_free_r+0x24>
 8008746:	6818      	ldr	r0, [r3, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	4401      	add	r1, r0
 800874c:	6011      	str	r1, [r2, #0]
 800874e:	6053      	str	r3, [r2, #4]
 8008750:	e7d8      	b.n	8008704 <_free_r+0x24>
 8008752:	d902      	bls.n	800875a <_free_r+0x7a>
 8008754:	230c      	movs	r3, #12
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	e7d4      	b.n	8008704 <_free_r+0x24>
 800875a:	6820      	ldr	r0, [r4, #0]
 800875c:	1821      	adds	r1, r4, r0
 800875e:	428b      	cmp	r3, r1
 8008760:	bf01      	itttt	eq
 8008762:	6819      	ldreq	r1, [r3, #0]
 8008764:	685b      	ldreq	r3, [r3, #4]
 8008766:	1809      	addeq	r1, r1, r0
 8008768:	6021      	streq	r1, [r4, #0]
 800876a:	6063      	str	r3, [r4, #4]
 800876c:	6054      	str	r4, [r2, #4]
 800876e:	e7c9      	b.n	8008704 <_free_r+0x24>
 8008770:	bd38      	pop	{r3, r4, r5, pc}
 8008772:	bf00      	nop
 8008774:	200002e8 	.word	0x200002e8

08008778 <_malloc_r>:
 8008778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877a:	1ccd      	adds	r5, r1, #3
 800877c:	f025 0503 	bic.w	r5, r5, #3
 8008780:	3508      	adds	r5, #8
 8008782:	2d0c      	cmp	r5, #12
 8008784:	bf38      	it	cc
 8008786:	250c      	movcc	r5, #12
 8008788:	2d00      	cmp	r5, #0
 800878a:	4606      	mov	r6, r0
 800878c:	db01      	blt.n	8008792 <_malloc_r+0x1a>
 800878e:	42a9      	cmp	r1, r5
 8008790:	d903      	bls.n	800879a <_malloc_r+0x22>
 8008792:	230c      	movs	r3, #12
 8008794:	6033      	str	r3, [r6, #0]
 8008796:	2000      	movs	r0, #0
 8008798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800879a:	f000 f8f1 	bl	8008980 <__malloc_lock>
 800879e:	4921      	ldr	r1, [pc, #132]	; (8008824 <_malloc_r+0xac>)
 80087a0:	680a      	ldr	r2, [r1, #0]
 80087a2:	4614      	mov	r4, r2
 80087a4:	b99c      	cbnz	r4, 80087ce <_malloc_r+0x56>
 80087a6:	4f20      	ldr	r7, [pc, #128]	; (8008828 <_malloc_r+0xb0>)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	b923      	cbnz	r3, 80087b6 <_malloc_r+0x3e>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4630      	mov	r0, r6
 80087b0:	f000 f83c 	bl	800882c <_sbrk_r>
 80087b4:	6038      	str	r0, [r7, #0]
 80087b6:	4629      	mov	r1, r5
 80087b8:	4630      	mov	r0, r6
 80087ba:	f000 f837 	bl	800882c <_sbrk_r>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	d123      	bne.n	800880a <_malloc_r+0x92>
 80087c2:	230c      	movs	r3, #12
 80087c4:	4630      	mov	r0, r6
 80087c6:	6033      	str	r3, [r6, #0]
 80087c8:	f000 f8e0 	bl	800898c <__malloc_unlock>
 80087cc:	e7e3      	b.n	8008796 <_malloc_r+0x1e>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	1b5b      	subs	r3, r3, r5
 80087d2:	d417      	bmi.n	8008804 <_malloc_r+0x8c>
 80087d4:	2b0b      	cmp	r3, #11
 80087d6:	d903      	bls.n	80087e0 <_malloc_r+0x68>
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	441c      	add	r4, r3
 80087dc:	6025      	str	r5, [r4, #0]
 80087de:	e004      	b.n	80087ea <_malloc_r+0x72>
 80087e0:	6863      	ldr	r3, [r4, #4]
 80087e2:	42a2      	cmp	r2, r4
 80087e4:	bf0c      	ite	eq
 80087e6:	600b      	streq	r3, [r1, #0]
 80087e8:	6053      	strne	r3, [r2, #4]
 80087ea:	4630      	mov	r0, r6
 80087ec:	f000 f8ce 	bl	800898c <__malloc_unlock>
 80087f0:	f104 000b 	add.w	r0, r4, #11
 80087f4:	1d23      	adds	r3, r4, #4
 80087f6:	f020 0007 	bic.w	r0, r0, #7
 80087fa:	1ac2      	subs	r2, r0, r3
 80087fc:	d0cc      	beq.n	8008798 <_malloc_r+0x20>
 80087fe:	1a1b      	subs	r3, r3, r0
 8008800:	50a3      	str	r3, [r4, r2]
 8008802:	e7c9      	b.n	8008798 <_malloc_r+0x20>
 8008804:	4622      	mov	r2, r4
 8008806:	6864      	ldr	r4, [r4, #4]
 8008808:	e7cc      	b.n	80087a4 <_malloc_r+0x2c>
 800880a:	1cc4      	adds	r4, r0, #3
 800880c:	f024 0403 	bic.w	r4, r4, #3
 8008810:	42a0      	cmp	r0, r4
 8008812:	d0e3      	beq.n	80087dc <_malloc_r+0x64>
 8008814:	1a21      	subs	r1, r4, r0
 8008816:	4630      	mov	r0, r6
 8008818:	f000 f808 	bl	800882c <_sbrk_r>
 800881c:	3001      	adds	r0, #1
 800881e:	d1dd      	bne.n	80087dc <_malloc_r+0x64>
 8008820:	e7cf      	b.n	80087c2 <_malloc_r+0x4a>
 8008822:	bf00      	nop
 8008824:	200002e8 	.word	0x200002e8
 8008828:	200002ec 	.word	0x200002ec

0800882c <_sbrk_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	2300      	movs	r3, #0
 8008830:	4d05      	ldr	r5, [pc, #20]	; (8008848 <_sbrk_r+0x1c>)
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	602b      	str	r3, [r5, #0]
 8008838:	f7f8 fece 	bl	80015d8 <_sbrk>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d102      	bne.n	8008846 <_sbrk_r+0x1a>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b103      	cbz	r3, 8008846 <_sbrk_r+0x1a>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	200045ac 	.word	0x200045ac

0800884c <__sread>:
 800884c:	b510      	push	{r4, lr}
 800884e:	460c      	mov	r4, r1
 8008850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008854:	f000 f8a0 	bl	8008998 <_read_r>
 8008858:	2800      	cmp	r0, #0
 800885a:	bfab      	itete	ge
 800885c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800885e:	89a3      	ldrhlt	r3, [r4, #12]
 8008860:	181b      	addge	r3, r3, r0
 8008862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008866:	bfac      	ite	ge
 8008868:	6563      	strge	r3, [r4, #84]	; 0x54
 800886a:	81a3      	strhlt	r3, [r4, #12]
 800886c:	bd10      	pop	{r4, pc}

0800886e <__swrite>:
 800886e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008872:	461f      	mov	r7, r3
 8008874:	898b      	ldrh	r3, [r1, #12]
 8008876:	4605      	mov	r5, r0
 8008878:	05db      	lsls	r3, r3, #23
 800887a:	460c      	mov	r4, r1
 800887c:	4616      	mov	r6, r2
 800887e:	d505      	bpl.n	800888c <__swrite+0x1e>
 8008880:	2302      	movs	r3, #2
 8008882:	2200      	movs	r2, #0
 8008884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008888:	f000 f868 	bl	800895c <_lseek_r>
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	4632      	mov	r2, r6
 8008890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008894:	81a3      	strh	r3, [r4, #12]
 8008896:	4628      	mov	r0, r5
 8008898:	463b      	mov	r3, r7
 800889a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800889e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088a2:	f000 b817 	b.w	80088d4 <_write_r>

080088a6 <__sseek>:
 80088a6:	b510      	push	{r4, lr}
 80088a8:	460c      	mov	r4, r1
 80088aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ae:	f000 f855 	bl	800895c <_lseek_r>
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	bf15      	itete	ne
 80088b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80088ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088c2:	81a3      	strheq	r3, [r4, #12]
 80088c4:	bf18      	it	ne
 80088c6:	81a3      	strhne	r3, [r4, #12]
 80088c8:	bd10      	pop	{r4, pc}

080088ca <__sclose>:
 80088ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ce:	f000 b813 	b.w	80088f8 <_close_r>
	...

080088d4 <_write_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	4611      	mov	r1, r2
 80088dc:	2200      	movs	r2, #0
 80088de:	4d05      	ldr	r5, [pc, #20]	; (80088f4 <_write_r+0x20>)
 80088e0:	602a      	str	r2, [r5, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f7f8 f94c 	bl	8000b80 <_write>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d102      	bne.n	80088f2 <_write_r+0x1e>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b103      	cbz	r3, 80088f2 <_write_r+0x1e>
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	200045ac 	.word	0x200045ac

080088f8 <_close_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	2300      	movs	r3, #0
 80088fc:	4d05      	ldr	r5, [pc, #20]	; (8008914 <_close_r+0x1c>)
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	602b      	str	r3, [r5, #0]
 8008904:	f7f8 fe37 	bl	8001576 <_close>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_close_r+0x1a>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_close_r+0x1a>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	200045ac 	.word	0x200045ac

08008918 <_fstat_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	2300      	movs	r3, #0
 800891c:	4d06      	ldr	r5, [pc, #24]	; (8008938 <_fstat_r+0x20>)
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	4611      	mov	r1, r2
 8008924:	602b      	str	r3, [r5, #0]
 8008926:	f7f8 fe31 	bl	800158c <_fstat>
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	d102      	bne.n	8008934 <_fstat_r+0x1c>
 800892e:	682b      	ldr	r3, [r5, #0]
 8008930:	b103      	cbz	r3, 8008934 <_fstat_r+0x1c>
 8008932:	6023      	str	r3, [r4, #0]
 8008934:	bd38      	pop	{r3, r4, r5, pc}
 8008936:	bf00      	nop
 8008938:	200045ac 	.word	0x200045ac

0800893c <_isatty_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	2300      	movs	r3, #0
 8008940:	4d05      	ldr	r5, [pc, #20]	; (8008958 <_isatty_r+0x1c>)
 8008942:	4604      	mov	r4, r0
 8008944:	4608      	mov	r0, r1
 8008946:	602b      	str	r3, [r5, #0]
 8008948:	f7f8 fe2f 	bl	80015aa <_isatty>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_isatty_r+0x1a>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_isatty_r+0x1a>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	200045ac 	.word	0x200045ac

0800895c <_lseek_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4604      	mov	r4, r0
 8008960:	4608      	mov	r0, r1
 8008962:	4611      	mov	r1, r2
 8008964:	2200      	movs	r2, #0
 8008966:	4d05      	ldr	r5, [pc, #20]	; (800897c <_lseek_r+0x20>)
 8008968:	602a      	str	r2, [r5, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	f7f8 fe27 	bl	80015be <_lseek>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_lseek_r+0x1e>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_lseek_r+0x1e>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	200045ac 	.word	0x200045ac

08008980 <__malloc_lock>:
 8008980:	4801      	ldr	r0, [pc, #4]	; (8008988 <__malloc_lock+0x8>)
 8008982:	f7ff be47 	b.w	8008614 <__retarget_lock_acquire_recursive>
 8008986:	bf00      	nop
 8008988:	200045a4 	.word	0x200045a4

0800898c <__malloc_unlock>:
 800898c:	4801      	ldr	r0, [pc, #4]	; (8008994 <__malloc_unlock+0x8>)
 800898e:	f7ff be42 	b.w	8008616 <__retarget_lock_release_recursive>
 8008992:	bf00      	nop
 8008994:	200045a4 	.word	0x200045a4

08008998 <_read_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4604      	mov	r4, r0
 800899c:	4608      	mov	r0, r1
 800899e:	4611      	mov	r1, r2
 80089a0:	2200      	movs	r2, #0
 80089a2:	4d05      	ldr	r5, [pc, #20]	; (80089b8 <_read_r+0x20>)
 80089a4:	602a      	str	r2, [r5, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f7f8 fdc8 	bl	800153c <_read>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_read_r+0x1e>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_read_r+0x1e>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	200045ac 	.word	0x200045ac

080089bc <_init>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr

080089c8 <_fini>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr
