
Firmware_CDPulsos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c4  080050c4  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  080050c4  080050c4  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050c4  080050c4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c4  080050c4  000150c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080050cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004318  20000098  08005164  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043b0  08005164  000243b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f8f  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333c  00000000  00000000  00035050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00038390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  000396f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b213  00000000  00000000  0003a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f87  00000000  00000000  00055b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000943dc  00000000  00000000  0006ca92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100e6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000569c  00000000  00000000  00100ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004fdc 	.word	0x08004fdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004fdc 	.word	0x08004fdc

0800014c <get_pressed_button>:

// TODO: definir os GPIOS que serão utilizados
// nos botões

uint8_t get_pressed_button()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

}
 8000150:	bf00      	nop
 8000152:	4618      	mov	r0, r3
 8000154:	46bd      	mov	sp, r7
 8000156:	bc80      	pop	{r7}
 8000158:	4770      	bx	lr

0800015a <init>:
{
	//TODO: Chamar a função da biblioteca do gringo youtuber
}

void init()
{
 800015a:	b480      	push	{r7}
 800015c:	af00      	add	r7, sp, #0
	//TODO: Chamar a função da biblioteca do gringo youtuber
}
 800015e:	bf00      	nop
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr

08000166 <print_sensors_menu>:

void print_sensors_menu(uint8_t menu_choice)
{
 8000166:	b480      	push	{r7}
 8000168:	b083      	sub	sp, #12
 800016a:	af00      	add	r7, sp, #0
 800016c:	4603      	mov	r3, r0
 800016e:	71fb      	strb	r3, [r7, #7]
	//TODO: Definir menu principal de seleção dos sensores
}
 8000170:	bf00      	nop
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
	...

0800017c <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2101      	movs	r1, #1
 8000184:	4802      	ldr	r0, [pc, #8]	; (8000190 <SELECT+0x14>)
 8000186:	f001 ff39 	bl	8001ffc <HAL_GPIO_WritePin>
}
 800018a:	bf00      	nop
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	40010c00 	.word	0x40010c00

08000194 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000198:	2201      	movs	r2, #1
 800019a:	2101      	movs	r1, #1
 800019c:	4802      	ldr	r0, [pc, #8]	; (80001a8 <DESELECT+0x14>)
 800019e:	f001 ff2d 	bl	8001ffc <HAL_GPIO_WritePin>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010c00 	.word	0x40010c00

080001ac <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80001b6:	bf00      	nop
 80001b8:	4808      	ldr	r0, [pc, #32]	; (80001dc <SPI_TxByte+0x30>)
 80001ba:	f002 ff69 	bl	8003090 <HAL_SPI_GetState>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d1f9      	bne.n	80001b8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80001c4:	1df9      	adds	r1, r7, #7
 80001c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ca:	2201      	movs	r2, #1
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <SPI_TxByte+0x30>)
 80001ce:	f002 fc81 	bl	8002ad4 <HAL_SPI_Transmit>
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20001260 	.word	0x20001260

080001e0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80001e6:	23ff      	movs	r3, #255	; 0xff
 80001e8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80001ee:	bf00      	nop
 80001f0:	4809      	ldr	r0, [pc, #36]	; (8000218 <SPI_RxByte+0x38>)
 80001f2:	f002 ff4d 	bl	8003090 <HAL_SPI_GetState>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d1f9      	bne.n	80001f0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80001fc:	1dba      	adds	r2, r7, #6
 80001fe:	1df9      	adds	r1, r7, #7
 8000200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2301      	movs	r3, #1
 8000208:	4803      	ldr	r0, [pc, #12]	; (8000218 <SPI_RxByte+0x38>)
 800020a:	f002 fd9f 	bl	8002d4c <HAL_SPI_TransmitReceive>

  return data;
 800020e:	79bb      	ldrb	r3, [r7, #6]
}
 8000210:	4618      	mov	r0, r3
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	20001260 	.word	0x20001260

0800021c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000224:	f7ff ffdc 	bl	80001e0 <SPI_RxByte>
 8000228:	4603      	mov	r3, r0
 800022a:	461a      	mov	r2, r3
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	701a      	strb	r2, [r3, #0]
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <SD_ReadyWait+0x34>)
 8000240:	2232      	movs	r2, #50	; 0x32
 8000242:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000244:	f7ff ffcc 	bl	80001e0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000248:	f7ff ffca 	bl	80001e0 <SPI_RxByte>
 800024c:	4603      	mov	r3, r0
 800024e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	2bff      	cmp	r3, #255	; 0xff
 8000254:	d004      	beq.n	8000260 <SD_ReadyWait+0x28>
 8000256:	4b05      	ldr	r3, [pc, #20]	; (800026c <SD_ReadyWait+0x34>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1f3      	bne.n	8000248 <SD_ReadyWait+0x10>

  return res;
 8000260:	79fb      	ldrb	r3, [r7, #7]
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	20002334 	.word	0x20002334

08000270 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000276:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800027a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800027c:	f7ff ff8a 	bl	8000194 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000280:	2300      	movs	r3, #0
 8000282:	613b      	str	r3, [r7, #16]
 8000284:	e005      	b.n	8000292 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000286:	20ff      	movs	r0, #255	; 0xff
 8000288:	f7ff ff90 	bl	80001ac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800028c:	693b      	ldr	r3, [r7, #16]
 800028e:	3301      	adds	r3, #1
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	2b09      	cmp	r3, #9
 8000296:	ddf6      	ble.n	8000286 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000298:	f7ff ff70 	bl	800017c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800029c:	2340      	movs	r3, #64	; 0x40
 800029e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80002b0:	2395      	movs	r3, #149	; 0x95
 80002b2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	e009      	b.n	80002ce <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80002ba:	1d3a      	adds	r2, r7, #4
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	4413      	add	r3, r2
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ff72 	bl	80001ac <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	2b05      	cmp	r3, #5
 80002d2:	ddf2      	ble.n	80002ba <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80002d4:	e002      	b.n	80002dc <SD_PowerOn+0x6c>
  {
    Count--;
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	3b01      	subs	r3, #1
 80002da:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80002dc:	f7ff ff80 	bl	80001e0 <SPI_RxByte>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d002      	beq.n	80002ec <SD_PowerOn+0x7c>
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1f4      	bne.n	80002d6 <SD_PowerOn+0x66>
  }

  DESELECT();
 80002ec:	f7ff ff52 	bl	8000194 <DESELECT>
  SPI_TxByte(0XFF);
 80002f0:	20ff      	movs	r0, #255	; 0xff
 80002f2:	f7ff ff5b 	bl	80001ac <SPI_TxByte>

  PowerFlag = 1;
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <SD_PowerOn+0x94>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
}
 80002fc:	bf00      	nop
 80002fe:	3718      	adds	r7, #24
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200000b5 	.word	0x200000b5

08000308 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <SD_PowerOff+0x14>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	200000b5 	.word	0x200000b5

08000320 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000324:	4b02      	ldr	r3, [pc, #8]	; (8000330 <SD_CheckPower+0x10>)
 8000326:	781b      	ldrb	r3, [r3, #0]
}
 8000328:	4618      	mov	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	200000b5 	.word	0x200000b5

08000334 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <SD_RxDataBlock+0x68>)
 8000340:	220a      	movs	r2, #10
 8000342:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000344:	f7ff ff4c 	bl	80001e0 <SPI_RxByte>
 8000348:	4603      	mov	r3, r0
 800034a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	2bff      	cmp	r3, #255	; 0xff
 8000350:	d104      	bne.n	800035c <SD_RxDataBlock+0x28>
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <SD_RxDataBlock+0x68>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	b2db      	uxtb	r3, r3
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1f3      	bne.n	8000344 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	2bfe      	cmp	r3, #254	; 0xfe
 8000360:	d001      	beq.n	8000366 <SD_RxDataBlock+0x32>
    return FALSE;
 8000362:	2300      	movs	r3, #0
 8000364:	e016      	b.n	8000394 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	1c5a      	adds	r2, r3, #1
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff55 	bl	800021c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff4f 	bl	800021c <SPI_RxBytePtr>
  } while(btr -= 2);
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	3b02      	subs	r3, #2
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d1ed      	bne.n	8000366 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800038a:	f7ff ff29 	bl	80001e0 <SPI_RxByte>
  SPI_RxByte();
 800038e:	f7ff ff27 	bl	80001e0 <SPI_RxByte>

  return TRUE;
 8000392:	2301      	movs	r3, #1
}
 8000394:	4618      	mov	r0, r3
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20002335 	.word	0x20002335

080003a0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80003b0:	f7ff ff42 	bl	8000238 <SD_ReadyWait>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2bff      	cmp	r3, #255	; 0xff
 80003b8:	d001      	beq.n	80003be <SD_TxDataBlock+0x1e>
    return FALSE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	e040      	b.n	8000440 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80003be:	78fb      	ldrb	r3, [r7, #3]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff fef3 	bl	80001ac <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80003c6:	78fb      	ldrb	r3, [r7, #3]
 80003c8:	2bfd      	cmp	r3, #253	; 0xfd
 80003ca:	d031      	beq.n	8000430 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	1c5a      	adds	r2, r3, #1
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff fee7 	bl	80001ac <SPI_TxByte>
      SPI_TxByte(*buff++);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	1c5a      	adds	r2, r3, #1
 80003e2:	607a      	str	r2, [r7, #4]
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff fee0 	bl	80001ac <SPI_TxByte>
    } while (--wc);
 80003ec:	7bbb      	ldrb	r3, [r7, #14]
 80003ee:	3b01      	subs	r3, #1
 80003f0:	73bb      	strb	r3, [r7, #14]
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1eb      	bne.n	80003d0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80003f8:	f7ff fef2 	bl	80001e0 <SPI_RxByte>
    SPI_RxByte();
 80003fc:	f7ff fef0 	bl	80001e0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000400:	e00b      	b.n	800041a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000402:	f7ff feed 	bl	80001e0 <SPI_RxByte>
 8000406:	4603      	mov	r3, r0
 8000408:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	f003 031f 	and.w	r3, r3, #31
 8000410:	2b05      	cmp	r3, #5
 8000412:	d006      	beq.n	8000422 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000414:	7b7b      	ldrb	r3, [r7, #13]
 8000416:	3301      	adds	r3, #1
 8000418:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800041a:	7b7b      	ldrb	r3, [r7, #13]
 800041c:	2b40      	cmp	r3, #64	; 0x40
 800041e:	d9f0      	bls.n	8000402 <SD_TxDataBlock+0x62>
 8000420:	e000      	b.n	8000424 <SD_TxDataBlock+0x84>
        break;
 8000422:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000424:	bf00      	nop
 8000426:	f7ff fedb 	bl	80001e0 <SPI_RxByte>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d0fa      	beq.n	8000426 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	f003 031f 	and.w	r3, r3, #31
 8000436:	2b05      	cmp	r3, #5
 8000438:	d101      	bne.n	800043e <SD_TxDataBlock+0x9e>
    return TRUE;
 800043a:	2301      	movs	r3, #1
 800043c:	e000      	b.n	8000440 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	6039      	str	r1, [r7, #0]
 8000452:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000454:	f7ff fef0 	bl	8000238 <SD_ReadyWait>
 8000458:	4603      	mov	r3, r0
 800045a:	2bff      	cmp	r3, #255	; 0xff
 800045c:	d001      	beq.n	8000462 <SD_SendCmd+0x1a>
    return 0xFF;
 800045e:	23ff      	movs	r3, #255	; 0xff
 8000460:	e040      	b.n	80004e4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff fea1 	bl	80001ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	0e1b      	lsrs	r3, r3, #24
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fe9b 	bl	80001ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	0c1b      	lsrs	r3, r3, #16
 800047a:	b2db      	uxtb	r3, r3
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fe95 	bl	80001ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	0a1b      	lsrs	r3, r3, #8
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fe8f 	bl	80001ac <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff fe8a 	bl	80001ac <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	2b40      	cmp	r3, #64	; 0x40
 80004a0:	d101      	bne.n	80004a6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80004a2:	2395      	movs	r3, #149	; 0x95
 80004a4:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2b48      	cmp	r3, #72	; 0x48
 80004aa:	d101      	bne.n	80004b0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80004ac:	2387      	movs	r3, #135	; 0x87
 80004ae:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fe7a 	bl	80001ac <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	2b4c      	cmp	r3, #76	; 0x4c
 80004bc:	d101      	bne.n	80004c2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80004be:	f7ff fe8f 	bl	80001e0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80004c2:	230a      	movs	r3, #10
 80004c4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80004c6:	f7ff fe8b 	bl	80001e0 <SPI_RxByte>
 80004ca:	4603      	mov	r3, r0
 80004cc:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80004ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	da05      	bge.n	80004e2 <SD_SendCmd+0x9a>
 80004d6:	7bbb      	ldrb	r3, [r7, #14]
 80004d8:	3b01      	subs	r3, #1
 80004da:	73bb      	strb	r3, [r7, #14]
 80004dc:	7bbb      	ldrb	r3, [r7, #14]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d1f1      	bne.n	80004c6 <SD_SendCmd+0x7e>

  return res;
 80004e2:	7b7b      	ldrb	r3, [r7, #13]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3710      	adds	r7, #16
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80004fc:	2301      	movs	r3, #1
 80004fe:	e0d5      	b.n	80006ac <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000500:	4b6c      	ldr	r3, [pc, #432]	; (80006b4 <SD_disk_initialize+0x1c8>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	2b00      	cmp	r3, #0
 800050c:	d003      	beq.n	8000516 <SD_disk_initialize+0x2a>
    return Stat;
 800050e:	4b69      	ldr	r3, [pc, #420]	; (80006b4 <SD_disk_initialize+0x1c8>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	e0ca      	b.n	80006ac <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000516:	f7ff feab 	bl	8000270 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800051a:	f7ff fe2f 	bl	800017c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000522:	2100      	movs	r1, #0
 8000524:	2040      	movs	r0, #64	; 0x40
 8000526:	f7ff ff8f 	bl	8000448 <SD_SendCmd>
 800052a:	4603      	mov	r3, r0
 800052c:	2b01      	cmp	r3, #1
 800052e:	f040 80a5 	bne.w	800067c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000532:	4b61      	ldr	r3, [pc, #388]	; (80006b8 <SD_disk_initialize+0x1cc>)
 8000534:	2264      	movs	r2, #100	; 0x64
 8000536:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000538:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800053c:	2048      	movs	r0, #72	; 0x48
 800053e:	f7ff ff83 	bl	8000448 <SD_SendCmd>
 8000542:	4603      	mov	r3, r0
 8000544:	2b01      	cmp	r3, #1
 8000546:	d158      	bne.n	80005fa <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]
 800054c:	e00c      	b.n	8000568 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800054e:	7bfc      	ldrb	r4, [r7, #15]
 8000550:	f7ff fe46 	bl	80001e0 <SPI_RxByte>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4423      	add	r3, r4
 800055e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	3301      	adds	r3, #1
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	2b03      	cmp	r3, #3
 800056c:	d9ef      	bls.n	800054e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800056e:	7abb      	ldrb	r3, [r7, #10]
 8000570:	2b01      	cmp	r3, #1
 8000572:	f040 8083 	bne.w	800067c <SD_disk_initialize+0x190>
 8000576:	7afb      	ldrb	r3, [r7, #11]
 8000578:	2baa      	cmp	r3, #170	; 0xaa
 800057a:	d17f      	bne.n	800067c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800057c:	2100      	movs	r1, #0
 800057e:	2077      	movs	r0, #119	; 0x77
 8000580:	f7ff ff62 	bl	8000448 <SD_SendCmd>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	d807      	bhi.n	800059a <SD_disk_initialize+0xae>
 800058a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800058e:	2069      	movs	r0, #105	; 0x69
 8000590:	f7ff ff5a 	bl	8000448 <SD_SendCmd>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d005      	beq.n	80005a6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800059a:	4b47      	ldr	r3, [pc, #284]	; (80006b8 <SD_disk_initialize+0x1cc>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1eb      	bne.n	800057c <SD_disk_initialize+0x90>
 80005a4:	e000      	b.n	80005a8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80005a6:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80005a8:	4b43      	ldr	r3, [pc, #268]	; (80006b8 <SD_disk_initialize+0x1cc>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d064      	beq.n	800067c <SD_disk_initialize+0x190>
 80005b2:	2100      	movs	r1, #0
 80005b4:	207a      	movs	r0, #122	; 0x7a
 80005b6:	f7ff ff47 	bl	8000448 <SD_SendCmd>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d15d      	bne.n	800067c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e00c      	b.n	80005e0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80005c6:	7bfc      	ldrb	r4, [r7, #15]
 80005c8:	f7ff fe0a 	bl	80001e0 <SPI_RxByte>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4423      	add	r3, r4
 80005d6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	3301      	adds	r3, #1
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d9ef      	bls.n	80005c6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80005e6:	7a3b      	ldrb	r3, [r7, #8]
 80005e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SD_disk_initialize+0x108>
 80005f0:	2306      	movs	r3, #6
 80005f2:	e000      	b.n	80005f6 <SD_disk_initialize+0x10a>
 80005f4:	2302      	movs	r3, #2
 80005f6:	73bb      	strb	r3, [r7, #14]
 80005f8:	e040      	b.n	800067c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80005fa:	2100      	movs	r1, #0
 80005fc:	2077      	movs	r0, #119	; 0x77
 80005fe:	f7ff ff23 	bl	8000448 <SD_SendCmd>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d808      	bhi.n	800061a <SD_disk_initialize+0x12e>
 8000608:	2100      	movs	r1, #0
 800060a:	2069      	movs	r0, #105	; 0x69
 800060c:	f7ff ff1c 	bl	8000448 <SD_SendCmd>
 8000610:	4603      	mov	r3, r0
 8000612:	2b01      	cmp	r3, #1
 8000614:	d801      	bhi.n	800061a <SD_disk_initialize+0x12e>
 8000616:	2302      	movs	r3, #2
 8000618:	e000      	b.n	800061c <SD_disk_initialize+0x130>
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d10e      	bne.n	8000642 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000624:	2100      	movs	r1, #0
 8000626:	2077      	movs	r0, #119	; 0x77
 8000628:	f7ff ff0e 	bl	8000448 <SD_SendCmd>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d80e      	bhi.n	8000650 <SD_disk_initialize+0x164>
 8000632:	2100      	movs	r1, #0
 8000634:	2069      	movs	r0, #105	; 0x69
 8000636:	f7ff ff07 	bl	8000448 <SD_SendCmd>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d107      	bne.n	8000650 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000640:	e00d      	b.n	800065e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000642:	2100      	movs	r1, #0
 8000644:	2041      	movs	r0, #65	; 0x41
 8000646:	f7ff feff 	bl	8000448 <SD_SendCmd>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d005      	beq.n	800065c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <SD_disk_initialize+0x1cc>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e1      	bne.n	800061e <SD_disk_initialize+0x132>
 800065a:	e000      	b.n	800065e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800065c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <SD_disk_initialize+0x1cc>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d007      	beq.n	8000678 <SD_disk_initialize+0x18c>
 8000668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066c:	2050      	movs	r0, #80	; 0x50
 800066e:	f7ff feeb 	bl	8000448 <SD_SendCmd>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800067c:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <SD_disk_initialize+0x1d0>)
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000682:	f7ff fd87 	bl	8000194 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000686:	f7ff fdab 	bl	80001e0 <SPI_RxByte>

  if (type)
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d008      	beq.n	80006a2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SD_disk_initialize+0x1c8>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f023 0301 	bic.w	r3, r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <SD_disk_initialize+0x1c8>)
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e001      	b.n	80006a6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80006a2:	f7ff fe31 	bl	8000308 <SD_PowerOff>
  }

  return Stat;
 80006a6:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <SD_disk_initialize+0x1c8>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd90      	pop	{r4, r7, pc}
 80006b4:	20000010 	.word	0x20000010
 80006b8:	20002335 	.word	0x20002335
 80006bc:	200000b4 	.word	0x200000b4

080006c0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SD_disk_status+0x14>
    return STA_NOINIT;
 80006d0:	2301      	movs	r3, #1
 80006d2:	e002      	b.n	80006da <SD_disk_status+0x1a>

  return Stat;
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <SD_disk_status+0x24>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000010 	.word	0x20000010

080006e8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	4603      	mov	r3, r0
 80006f6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <SD_disk_read+0x1c>
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d101      	bne.n	8000708 <SD_disk_read+0x20>
    return RES_PARERR;
 8000704:	2304      	movs	r3, #4
 8000706:	e051      	b.n	80007ac <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <SD_disk_read+0xcc>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000716:	2303      	movs	r3, #3
 8000718:	e048      	b.n	80007ac <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <SD_disk_read+0xd0>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	2b00      	cmp	r3, #0
 8000724:	d102      	bne.n	800072c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	025b      	lsls	r3, r3, #9
 800072a:	607b      	str	r3, [r7, #4]

  SELECT();
 800072c:	f7ff fd26 	bl	800017c <SELECT>

  if (count == 1)
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d111      	bne.n	800075a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	2051      	movs	r0, #81	; 0x51
 800073a:	f7ff fe85 	bl	8000448 <SD_SendCmd>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d129      	bne.n	8000798 <SD_disk_read+0xb0>
 8000744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000748:	68b8      	ldr	r0, [r7, #8]
 800074a:	f7ff fdf3 	bl	8000334 <SD_RxDataBlock>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d021      	beq.n	8000798 <SD_disk_read+0xb0>
      count = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	e01e      	b.n	8000798 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	2052      	movs	r0, #82	; 0x52
 800075e:	f7ff fe73 	bl	8000448 <SD_SendCmd>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d117      	bne.n	8000798 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076c:	68b8      	ldr	r0, [r7, #8]
 800076e:	f7ff fde1 	bl	8000334 <SD_RxDataBlock>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00a      	beq.n	800078e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800077e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	3b01      	subs	r3, #1
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1ed      	bne.n	8000768 <SD_disk_read+0x80>
 800078c:	e000      	b.n	8000790 <SD_disk_read+0xa8>
          break;
 800078e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000790:	2100      	movs	r1, #0
 8000792:	204c      	movs	r0, #76	; 0x4c
 8000794:	f7ff fe58 	bl	8000448 <SD_SendCmd>
    }
  }

  DESELECT();
 8000798:	f7ff fcfc 	bl	8000194 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800079c:	f7ff fd20 	bl	80001e0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	bf14      	ite	ne
 80007a6:	2301      	movne	r3, #1
 80007a8:	2300      	moveq	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000010 	.word	0x20000010
 80007b8:	200000b4 	.word	0x200000b4

080007bc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4603      	mov	r3, r0
 80007ca:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d102      	bne.n	80007d8 <SD_disk_write+0x1c>
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d101      	bne.n	80007dc <SD_disk_write+0x20>
    return RES_PARERR;
 80007d8:	2304      	movs	r3, #4
 80007da:	e06b      	b.n	80008b4 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80007dc:	4b37      	ldr	r3, [pc, #220]	; (80008bc <SD_disk_write+0x100>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SD_disk_write+0x32>
    return RES_NOTRDY;
 80007ea:	2303      	movs	r3, #3
 80007ec:	e062      	b.n	80008b4 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80007ee:	4b33      	ldr	r3, [pc, #204]	; (80008bc <SD_disk_write+0x100>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SD_disk_write+0x44>
    return RES_WRPRT;
 80007fc:	2302      	movs	r3, #2
 80007fe:	e059      	b.n	80008b4 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <SD_disk_write+0x104>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	025b      	lsls	r3, r3, #9
 8000810:	607b      	str	r3, [r7, #4]

  SELECT();
 8000812:	f7ff fcb3 	bl	800017c <SELECT>

  if (count == 1)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d110      	bne.n	800083e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	2058      	movs	r0, #88	; 0x58
 8000820:	f7ff fe12 	bl	8000448 <SD_SendCmd>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d13a      	bne.n	80008a0 <SD_disk_write+0xe4>
 800082a:	21fe      	movs	r1, #254	; 0xfe
 800082c:	68b8      	ldr	r0, [r7, #8]
 800082e:	f7ff fdb7 	bl	80003a0 <SD_TxDataBlock>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d033      	beq.n	80008a0 <SD_disk_write+0xe4>
      count = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	e030      	b.n	80008a0 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <SD_disk_write+0x104>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	2b00      	cmp	r3, #0
 8000848:	d007      	beq.n	800085a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800084a:	2100      	movs	r1, #0
 800084c:	2077      	movs	r0, #119	; 0x77
 800084e:	f7ff fdfb 	bl	8000448 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000852:	6839      	ldr	r1, [r7, #0]
 8000854:	2057      	movs	r0, #87	; 0x57
 8000856:	f7ff fdf7 	bl	8000448 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	2059      	movs	r0, #89	; 0x59
 800085e:	f7ff fdf3 	bl	8000448 <SD_SendCmd>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d11b      	bne.n	80008a0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000868:	21fc      	movs	r1, #252	; 0xfc
 800086a:	68b8      	ldr	r0, [r7, #8]
 800086c:	f7ff fd98 	bl	80003a0 <SD_TxDataBlock>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00a      	beq.n	800088c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800087c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	3b01      	subs	r3, #1
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1ee      	bne.n	8000868 <SD_disk_write+0xac>
 800088a:	e000      	b.n	800088e <SD_disk_write+0xd2>
          break;
 800088c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800088e:	21fd      	movs	r1, #253	; 0xfd
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff fd85 	bl	80003a0 <SD_TxDataBlock>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d101      	bne.n	80008a0 <SD_disk_write+0xe4>
      {
        count = 1;
 800089c:	2301      	movs	r3, #1
 800089e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80008a0:	f7ff fc78 	bl	8000194 <DESELECT>
  SPI_RxByte();
 80008a4:	f7ff fc9c 	bl	80001e0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	bf14      	ite	ne
 80008ae:	2301      	movne	r3, #1
 80008b0:	2300      	moveq	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000010 	.word	0x20000010
 80008c0:	200000b4 	.word	0x200000b4

080008c4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b08b      	sub	sp, #44	; 0x2c
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	603a      	str	r2, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	460b      	mov	r3, r1
 80008d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80008de:	2304      	movs	r3, #4
 80008e0:	e11b      	b.n	8000b1a <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	2b05      	cmp	r3, #5
 80008ec:	d129      	bne.n	8000942 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80008ee:	6a3b      	ldr	r3, [r7, #32]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d017      	beq.n	8000926 <SD_disk_ioctl+0x62>
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	dc1f      	bgt.n	800093a <SD_disk_ioctl+0x76>
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <SD_disk_ioctl+0x40>
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d00b      	beq.n	800091a <SD_disk_ioctl+0x56>
 8000902:	e01a      	b.n	800093a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000904:	f7ff fd0c 	bl	8000320 <SD_CheckPower>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800090e:	f7ff fcfb 	bl	8000308 <SD_PowerOff>
      res = RES_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000918:	e0fd      	b.n	8000b16 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800091a:	f7ff fca9 	bl	8000270 <SD_PowerOn>
      res = RES_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000924:	e0f7      	b.n	8000b16 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	1c5c      	adds	r4, r3, #1
 800092a:	f7ff fcf9 	bl	8000320 <SD_CheckPower>
 800092e:	4603      	mov	r3, r0
 8000930:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000932:	2300      	movs	r3, #0
 8000934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000938:	e0ed      	b.n	8000b16 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800093a:	2304      	movs	r3, #4
 800093c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000940:	e0e9      	b.n	8000b16 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000942:	4b78      	ldr	r3, [pc, #480]	; (8000b24 <SD_disk_ioctl+0x260>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000950:	2303      	movs	r3, #3
 8000952:	e0e2      	b.n	8000b1a <SD_disk_ioctl+0x256>

    SELECT();
 8000954:	f7ff fc12 	bl	800017c <SELECT>

    switch (ctrl)
 8000958:	79bb      	ldrb	r3, [r7, #6]
 800095a:	2b0d      	cmp	r3, #13
 800095c:	f200 80cc 	bhi.w	8000af8 <SD_disk_ioctl+0x234>
 8000960:	a201      	add	r2, pc, #4	; (adr r2, 8000968 <SD_disk_ioctl+0xa4>)
 8000962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000966:	bf00      	nop
 8000968:	08000a63 	.word	0x08000a63
 800096c:	080009a1 	.word	0x080009a1
 8000970:	08000a53 	.word	0x08000a53
 8000974:	08000af9 	.word	0x08000af9
 8000978:	08000af9 	.word	0x08000af9
 800097c:	08000af9 	.word	0x08000af9
 8000980:	08000af9 	.word	0x08000af9
 8000984:	08000af9 	.word	0x08000af9
 8000988:	08000af9 	.word	0x08000af9
 800098c:	08000af9 	.word	0x08000af9
 8000990:	08000af9 	.word	0x08000af9
 8000994:	08000a75 	.word	0x08000a75
 8000998:	08000a99 	.word	0x08000a99
 800099c:	08000abd 	.word	0x08000abd
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80009a0:	2100      	movs	r1, #0
 80009a2:	2049      	movs	r0, #73	; 0x49
 80009a4:	f7ff fd50 	bl	8000448 <SD_SendCmd>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f040 80a8 	bne.w	8000b00 <SD_disk_ioctl+0x23c>
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2110      	movs	r1, #16
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fcbc 	bl	8000334 <SD_RxDataBlock>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 809e 	beq.w	8000b00 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80009c4:	7b3b      	ldrb	r3, [r7, #12]
 80009c6:	099b      	lsrs	r3, r3, #6
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d10e      	bne.n	80009ec <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80009ce:	7d7b      	ldrb	r3, [r7, #21]
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	7d3b      	ldrb	r3, [r7, #20]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	b29b      	uxth	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	b29b      	uxth	r3, r3
 80009de:	3301      	adds	r3, #1
 80009e0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80009e2:	8bfb      	ldrh	r3, [r7, #30]
 80009e4:	029a      	lsls	r2, r3, #10
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	e02e      	b.n	8000a4a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009ec:	7c7b      	ldrb	r3, [r7, #17]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	7dbb      	ldrb	r3, [r7, #22]
 80009f6:	09db      	lsrs	r3, r3, #7
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4413      	add	r3, r2
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	7d7b      	ldrb	r3, [r7, #21]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	f003 0306 	and.w	r3, r3, #6
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	3302      	adds	r3, #2
 8000a10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000a14:	7d3b      	ldrb	r3, [r7, #20]
 8000a16:	099b      	lsrs	r3, r3, #6
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	7cfb      	ldrb	r3, [r7, #19]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	7cbb      	ldrb	r3, [r7, #18]
 8000a2a:	029b      	lsls	r3, r3, #10
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	4413      	add	r3, r2
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	3301      	adds	r3, #1
 8000a3a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000a3c:	8bfa      	ldrh	r2, [r7, #30]
 8000a3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a42:	3b09      	subs	r3, #9
 8000a44:	409a      	lsls	r2, r3
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000a50:	e056      	b.n	8000b00 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a58:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a60:	e055      	b.n	8000b0e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000a62:	f7ff fbe9 	bl	8000238 <SD_ReadyWait>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2bff      	cmp	r3, #255	; 0xff
 8000a6a:	d14b      	bne.n	8000b04 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a72:	e047      	b.n	8000b04 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a74:	2100      	movs	r1, #0
 8000a76:	2049      	movs	r0, #73	; 0x49
 8000a78:	f7ff fce6 	bl	8000448 <SD_SendCmd>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d142      	bne.n	8000b08 <SD_disk_ioctl+0x244>
 8000a82:	2110      	movs	r1, #16
 8000a84:	6a38      	ldr	r0, [r7, #32]
 8000a86:	f7ff fc55 	bl	8000334 <SD_RxDataBlock>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d03b      	beq.n	8000b08 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a96:	e037      	b.n	8000b08 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a98:	2100      	movs	r1, #0
 8000a9a:	204a      	movs	r0, #74	; 0x4a
 8000a9c:	f7ff fcd4 	bl	8000448 <SD_SendCmd>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d132      	bne.n	8000b0c <SD_disk_ioctl+0x248>
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	6a38      	ldr	r0, [r7, #32]
 8000aaa:	f7ff fc43 	bl	8000334 <SD_RxDataBlock>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d02b      	beq.n	8000b0c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000aba:	e027      	b.n	8000b0c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000abc:	2100      	movs	r1, #0
 8000abe:	207a      	movs	r0, #122	; 0x7a
 8000ac0:	f7ff fcc2 	bl	8000448 <SD_SendCmd>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d116      	bne.n	8000af8 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ad0:	e00b      	b.n	8000aea <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000ad2:	6a3c      	ldr	r4, [r7, #32]
 8000ad4:	1c63      	adds	r3, r4, #1
 8000ad6:	623b      	str	r3, [r7, #32]
 8000ad8:	f7ff fb82 	bl	80001e0 <SPI_RxByte>
 8000adc:	4603      	mov	r3, r0
 8000ade:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ae0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000aea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d9ef      	bls.n	8000ad2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000af8:	2304      	movs	r3, #4
 8000afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000afe:	e006      	b.n	8000b0e <SD_disk_ioctl+0x24a>
      break;
 8000b00:	bf00      	nop
 8000b02:	e004      	b.n	8000b0e <SD_disk_ioctl+0x24a>
      break;
 8000b04:	bf00      	nop
 8000b06:	e002      	b.n	8000b0e <SD_disk_ioctl+0x24a>
      break;
 8000b08:	bf00      	nop
 8000b0a:	e000      	b.n	8000b0e <SD_disk_ioctl+0x24a>
      break;
 8000b0c:	bf00      	nop
    }

    DESELECT();
 8000b0e:	f7ff fb41 	bl	8000194 <DESELECT>
    SPI_RxByte();
 8000b12:	f7ff fb65 	bl	80001e0 <SPI_RxByte>
  }

  return res;
 8000b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	372c      	adds	r7, #44	; 0x2c
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000010 	.word	0x20000010

08000b28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d013      	beq.n	8000b68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00b      	beq.n	8000b68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b50:	e000      	b.n	8000b54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f9      	beq.n	8000b52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <_write>:
	for (int i=0; i<1024; i++)
		buffer[i] = '\0';
}

int _write(int file, char *ptr, int len)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	int i=0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e009      	b.n	8000b9e <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	60ba      	str	r2, [r7, #8]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ffc8 	bl	8000b28 <ITM_SendChar>
	for (i=0; i<len; i++)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	dbf1      	blt.n	8000b8a <_write+0x16>
	}
	return len;
 8000ba6:	687b      	ldr	r3, [r7, #4]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb6:	f000 fd21 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bba:	f000 f871 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbe:	f000 fa11 	bl	8000fe4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bc2:	f000 f8c9 	bl	8000d58 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000bc6:	f000 f905 	bl	8000dd4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000bca:	f000 f939 	bl	8000e40 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bce:	f000 f98d 	bl	8000eec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000bd2:	f000 f9dd 	bl	8000f90 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000bd6:	f002 fe9d 	bl	8003914 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  fresult = f_mount(&fs, "", 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4929      	ldr	r1, [pc, #164]	; (8000c84 <main+0xd4>)
 8000bde:	482a      	ldr	r0, [pc, #168]	; (8000c88 <main+0xd8>)
 8000be0:	f003 fc64 	bl	80044ac <f_mount>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <main+0xdc>)
 8000bea:	701a      	strb	r2, [r3, #0]
  if (fresult!=FR_OK) printf("error in mounting SD Card...\n");
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <main+0xdc>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <main+0x4c>
 8000bf4:	4826      	ldr	r0, [pc, #152]	; (8000c90 <main+0xe0>)
 8000bf6:	f003 fd9d 	bl	8004734 <puts>
 8000bfa:	e002      	b.n	8000c02 <main+0x52>
  else printf("SD Card mounted sucessfully...\n");
 8000bfc:	4825      	ldr	r0, [pc, #148]	; (8000c94 <main+0xe4>)
 8000bfe:	f003 fd99 	bl	8004734 <puts>
	  STATE_22_SENSOR2_FUNC,
	  STATE_23_SENSOR3_FUNC,
	  STATE_3_SAVE_DATA
  } main_state_machine;

  uint8_t opt = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	71bb      	strb	r3, [r7, #6]
  uint8_t b = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	717b      	strb	r3, [r7, #5]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(main_state_machine)
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b05      	cmp	r3, #5
 8000c0e:	d8fc      	bhi.n	8000c0a <main+0x5a>
 8000c10:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <main+0x68>)
 8000c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c16:	bf00      	nop
 8000c18:	08000c31 	.word	0x08000c31
 8000c1c:	08000c3d 	.word	0x08000c3d
 8000c20:	08000c0b 	.word	0x08000c0b
 8000c24:	08000c0b 	.word	0x08000c0b
 8000c28:	08000c0b 	.word	0x08000c0b
 8000c2c:	08000c0b 	.word	0x08000c0b
	  {
	  case STATE_0_INIT_PERIPHERALS:
		  init_peripherals();
 8000c30:	f000 fa3e 	bl	80010b0 <init_peripherals>

		  main_state_machine++;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	3301      	adds	r3, #1
 8000c38:	71fb      	strb	r3, [r7, #7]
		  break;
 8000c3a:	e022      	b.n	8000c82 <main+0xd2>

	  case STATE_1_WAIT_COMAND:
		  do {
			  lcd.print_sensors_menu(opt);
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <main+0xe8>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	79ba      	ldrb	r2, [r7, #6]
 8000c42:	4610      	mov	r0, r2
 8000c44:	4798      	blx	r3

			  b = buttons.get_pressed_button();
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <main+0xec>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4798      	blx	r3
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	717b      	strb	r3, [r7, #5]

			  switch(b)
 8000c50:	797b      	ldrb	r3, [r7, #5]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d008      	beq.n	8000c68 <main+0xb8>
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d110      	bne.n	8000c7c <main+0xcc>
			  {
			  case UP_BUTTON:
				  if (opt<1)
 8000c5a:	79bb      	ldrb	r3, [r7, #6]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10a      	bne.n	8000c76 <main+0xc6>
					  opt++;
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	3301      	adds	r3, #1
 8000c64:	71bb      	strb	r3, [r7, #6]
				  break;
 8000c66:	e006      	b.n	8000c76 <main+0xc6>
			  case DOWN_BUTTON:
				  if (opt>0)
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <main+0xca>
					  opt--;
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	71bb      	strb	r3, [r7, #6]
				  break;
 8000c74:	e001      	b.n	8000c7a <main+0xca>
				  break;
 8000c76:	bf00      	nop
 8000c78:	e000      	b.n	8000c7c <main+0xcc>
				  break;
 8000c7a:	bf00      	nop
			  }
		  } while(b =! ENTER_BUTTON);
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	717b      	strb	r3, [r7, #5]
	  case STATE_1_WAIT_COMAND:
 8000c80:	e7dc      	b.n	8000c3c <main+0x8c>
	  switch(main_state_machine)
 8000c82:	e7c2      	b.n	8000c0a <main+0x5a>
 8000c84:	08004ff4 	.word	0x08004ff4
 8000c88:	200000f4 	.word	0x200000f4
 8000c8c:	2000125c 	.word	0x2000125c
 8000c90:	08004ff8 	.word	0x08004ff8
 8000c94:	08005018 	.word	0x08005018
 8000c98:	20000004 	.word	0x20000004
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b094      	sub	sp, #80	; 0x50
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000caa:	2228      	movs	r2, #40	; 0x28
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 fcca 	bl	8004648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 f998 	bl	800202c <HAL_RCC_OscConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d02:	f000 f9cf 	bl	80010a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d06:	230f      	movs	r3, #15
 8000d08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2102      	movs	r1, #2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fc02 	bl	800252c <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d2e:	f000 f9b9 	bl	80010a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d32:	2302      	movs	r3, #2
 8000d34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fd8e 	bl	8002860 <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d4a:	f000 f9ab 	bl	80010a4 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3750      	adds	r7, #80	; 0x50
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_ADC1_Init+0x74>)
 8000d6a:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <MX_ADC1_Init+0x78>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_ADC1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_ADC1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_ADC1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_ADC1_Init+0x74>)
 8000d82:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_ADC1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_ADC1_Init+0x74>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MX_ADC1_Init+0x74>)
 8000d96:	f000 fcb7 	bl	8001708 <HAL_ADC_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000da0:	f000 f980 	bl	80010a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_ADC1_Init+0x74>)
 8000db6:	f000 fd7f 	bl	80018b8 <HAL_ADC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000dc0:	f000 f970 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000112c 	.word	0x2000112c
 8000dd0:	40012400 	.word	0x40012400

08000dd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dda:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <MX_SPI1_Init+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e08:	2210      	movs	r2, #16
 8000e0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e20:	220a      	movs	r2, #10
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e26:	f001 fdd1 	bl	80029cc <HAL_SPI_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e30:	f000 f938 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20001260 	.word	0x20001260
 8000e3c:	40013000 	.word	0x40013000

08000e40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e50:	463b      	mov	r3, r7
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_TIM1_Init+0xa4>)
 8000e5e:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <MX_TIM1_Init+0xa8>)
 8000e60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <MX_TIM1_Init+0xa4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_TIM1_Init+0xa4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_TIM1_Init+0xa4>)
 8000e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_TIM1_Init+0xa4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_TIM1_Init+0xa4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_TIM1_Init+0xa4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000e88:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <MX_TIM1_Init+0xa4>)
 8000e8a:	f002 f9b5 	bl	80031f8 <HAL_TIM_IC_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e94:	f000 f906 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480f      	ldr	r0, [pc, #60]	; (8000ee4 <MX_TIM1_Init+0xa4>)
 8000ea8:	f002 fbfa 	bl	80036a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000eb2:	f000 f8f7 	bl	80010a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_TIM1_Init+0xa4>)
 8000ece:	f002 f9e2 	bl	8003296 <HAL_TIM_IC_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000ed8:	f000 f8e4 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000120c 	.word	0x2000120c
 8000ee8:	40012c00 	.word	0x40012c00

08000eec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000efc:	463b      	mov	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_TIM2_Init+0xa0>)
 8000f0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_TIM2_Init+0xa0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_TIM2_Init+0xa0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_TIM2_Init+0xa0>)
 8000f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_TIM2_Init+0xa0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_TIM2_Init+0xa0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f30:	4816      	ldr	r0, [pc, #88]	; (8000f8c <MX_TIM2_Init+0xa0>)
 8000f32:	f002 f961 	bl	80031f8 <HAL_TIM_IC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f3c:	f000 f8b2 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480f      	ldr	r0, [pc, #60]	; (8000f8c <MX_TIM2_Init+0xa0>)
 8000f50:	f002 fba6 	bl	80036a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f5a:	f000 f8a3 	bl	80010a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f62:	2301      	movs	r3, #1
 8000f64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_TIM2_Init+0xa0>)
 8000f76:	f002 f98e 	bl	8003296 <HAL_TIM_IC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f80:	f000 f890 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200012b8 	.word	0x200012b8

08000f90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <MX_USART1_UART_Init+0x50>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000f9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_USART1_UART_Init+0x4c>)
 8000fc8:	f002 fbc8 	bl	800375c <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fd2:	f000 f867 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20001164 	.word	0x20001164
 8000fe0:	40013800 	.word	0x40013800

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <MX_GPIO_Init+0xb4>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a26      	ldr	r2, [pc, #152]	; (8001098 <MX_GPIO_Init+0xb4>)
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0320 	and.w	r3, r3, #32
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a20      	ldr	r2, [pc, #128]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <MX_GPIO_Init+0xb4>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_GPIO_Init+0xb4>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <MX_GPIO_Init+0xb4>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LCD_RS_Pin|D4_Pin|D5_Pin
 8001040:	2200      	movs	r2, #0
 8001042:	21f9      	movs	r1, #249	; 0xf9
 8001044:	4815      	ldr	r0, [pc, #84]	; (800109c <MX_GPIO_Init+0xb8>)
 8001046:	f000 ffd9 	bl	8001ffc <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_E_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001050:	4813      	ldr	r0, [pc, #76]	; (80010a0 <MX_GPIO_Init+0xbc>)
 8001052:	f000 ffd3 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin LCD_RS_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LCD_RS_Pin|D4_Pin|D5_Pin
 8001056:	23f9      	movs	r3, #249	; 0xf9
 8001058:	613b      	str	r3, [r7, #16]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2302      	movs	r3, #2
 8001064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	480b      	ldr	r0, [pc, #44]	; (800109c <MX_GPIO_Init+0xb8>)
 800106e:	f000 fe41 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RW_Pin;
 8001072:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2302      	movs	r3, #2
 8001082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4619      	mov	r1, r3
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_GPIO_Init+0xbc>)
 800108c:	f000 fe32 	bl	8001cf4 <HAL_GPIO_Init>

}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	40010800 	.word	0x40010800

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	e7fe      	b.n	80010ac <Error_Handler+0x8>
	...

080010b0 <init_peripherals>:
 *      Author: mathias
 */
#include "main_state_machine_functions.h"

void init_peripherals()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	lcd.init();
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <init_peripherals+0x28>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4798      	blx	r3
	HAL_Delay(10);
 80010ba:	200a      	movs	r0, #10
 80010bc:	f000 fb00 	bl	80016c0 <HAL_Delay>
	lcd.init();
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <init_peripherals+0x28>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4798      	blx	r3
	HAL_Delay(10);
 80010c6:	200a      	movs	r0, #10
 80010c8:	f000 fafa 	bl	80016c0 <HAL_Delay>

	lcd.clean();
 80010cc:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <init_peripherals+0x28>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4798      	blx	r3
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_MspInit+0x5c>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <HAL_MspInit+0x5c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_MspInit+0x5c>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_MspInit+0x5c>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_MspInit+0x5c>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_MspInit+0x5c>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_MspInit+0x60>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_MspInit+0x60>)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000

08001140 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_ADC_MspInit+0x6c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d121      	bne.n	80011a4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_ADC_MspInit+0x70>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <HAL_ADC_MspInit+0x70>)
 8001166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_ADC_MspInit+0x70>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_ADC_MspInit+0x70>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <HAL_ADC_MspInit+0x70>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_ADC_MspInit+0x70>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001190:	2301      	movs	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001194:	2303      	movs	r3, #3
 8001196:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_ADC_MspInit+0x74>)
 80011a0:	f000 fda8 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40012400 	.word	0x40012400
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010800 	.word	0x40010800

080011b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <HAL_SPI_MspInit+0x88>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d12f      	bne.n	8001238 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_SPI_MspInit+0x8c>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_SPI_MspInit+0x8c>)
 80011de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_SPI_MspInit+0x8c>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_SPI_MspInit+0x8c>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <HAL_SPI_MspInit+0x8c>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_SPI_MspInit+0x8c>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001208:	23a0      	movs	r3, #160	; 0xa0
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <HAL_SPI_MspInit+0x90>)
 800121c:	f000 fd6a 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001220:	2340      	movs	r3, #64	; 0x40
 8001222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_SPI_MspInit+0x90>)
 8001234:	f000 fd5e 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40013000 	.word	0x40013000
 8001244:	40021000 	.word	0x40021000
 8001248:	40010800 	.word	0x40010800

0800124c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a34      	ldr	r2, [pc, #208]	; (8001338 <HAL_TIM_IC_MspInit+0xec>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d125      	bne.n	80012b8 <HAL_TIM_IC_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800126c:	4b33      	ldr	r3, [pc, #204]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a32      	ldr	r2, [pc, #200]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 8001272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b30      	ldr	r3, [pc, #192]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a2c      	ldr	r2, [pc, #176]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800129c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	4823      	ldr	r0, [pc, #140]	; (8001340 <HAL_TIM_IC_MspInit+0xf4>)
 80012b2:	f000 fd1f 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012b6:	e03b      	b.n	8001330 <HAL_TIM_IC_MspInit+0xe4>
  else if(htim_ic->Instance==TIM2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c0:	d136      	bne.n	8001330 <HAL_TIM_IC_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	61d3      	str	r3, [r2, #28]
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6193      	str	r3, [r2, #24]
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_TIM_IC_MspInit+0xf0>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <HAL_TIM_IC_MspInit+0xf4>)
 8001308:	f000 fcf4 	bl	8001cf4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_TIM_IC_MspInit+0xf8>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800132a:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_TIM_IC_MspInit+0xf8>)
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	6053      	str	r3, [r2, #4]
}
 8001330:	bf00      	nop
 8001332:	3730      	adds	r7, #48	; 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40012c00 	.word	0x40012c00
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800
 8001344:	40010000 	.word	0x40010000

08001348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_UART_MspInit+0x8c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d131      	bne.n	80013cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_UART_MspInit+0x90>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <HAL_UART_MspInit+0x90>)
 800136e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_UART_MspInit+0x90>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x90>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0x90>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_UART_MspInit+0x90>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4619      	mov	r1, r3
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <HAL_UART_MspInit+0x94>)
 80013ae:	f000 fca1 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <HAL_UART_MspInit+0x94>)
 80013c8:	f000 fc94 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010800 	.word	0x40010800

080013e0 <SDTimer_Handler>:

volatile uint8_t Timer1, Timer2;                    /* 10ms 마다 감소하는 타이머 */
volatile uint8_t FatFsCnt = 0;

void SDTimer_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <SDTimer_Handler+0x3c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <SDTimer_Handler+0x1c>
		Timer1--;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <SDTimer_Handler+0x3c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <SDTimer_Handler+0x3c>)
 80013fa:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <SDTimer_Handler+0x40>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <SDTimer_Handler+0x34>
		Timer2--;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <SDTimer_Handler+0x40>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <SDTimer_Handler+0x40>)
 8001412:	701a      	strb	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	20002335 	.word	0x20002335
 8001420:	20002334 	.word	0x20002334

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <SysTick_Handler+0x30>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	3301      	adds	r3, #1
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <SysTick_Handler+0x30>)
 8001478:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <SysTick_Handler+0x30>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b09      	cmp	r3, #9
 8001482:	d904      	bls.n	800148e <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Handler+0x30>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800148a:	f7ff ffa9 	bl	80013e0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148e:	f000 f8fb 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000b6 	.word	0x200000b6

0800149c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e00a      	b.n	80014c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ae:	f3af 8000 	nop.w
 80014b2:	4601      	mov	r1, r0
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	60ba      	str	r2, [r7, #8]
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf0      	blt.n	80014ae <_read+0x12>
	}

return len;
 80014cc:	687b      	ldr	r3, [r7, #4]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fc:	605a      	str	r2, [r3, #4]
	return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <_isatty>:

int _isatty(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
	return 1;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
	return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
	...

08001538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <_sbrk+0x5c>)
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <_sbrk+0x60>)
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <_sbrk+0x64>)
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <_sbrk+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	429a      	cmp	r2, r3
 8001566:	d207      	bcs.n	8001578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001568:	f003 f844 	bl	80045f4 <__errno>
 800156c:	4603      	mov	r3, r0
 800156e:	220c      	movs	r2, #12
 8001570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001576:	e009      	b.n	800158c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <_sbrk+0x64>)
 8001588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20005000 	.word	0x20005000
 8001598:	00000400 	.word	0x00000400
 800159c:	200000b8 	.word	0x200000b8
 80015a0:	200043b0 	.word	0x200043b0

080015a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b2:	490d      	ldr	r1, [pc, #52]	; (80015e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c8:	4c0a      	ldr	r4, [pc, #40]	; (80015f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015d6:	f7ff ffe5 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015da:	f003 f811 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015de:	f7ff fae7 	bl	8000bb0 <main>
  bx lr
 80015e2:	4770      	bx	lr
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80015ec:	080050cc 	.word	0x080050cc
  ldr r2, =_sbss
 80015f0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80015f4:	200043b0 	.word	0x200043b0

080015f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC1_2_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x28>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x28>)
 8001606:	f043 0310 	orr.w	r3, r3, #16
 800160a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 fb3d 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	200f      	movs	r0, #15
 8001614:	f000 f808 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fd60 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fb47 	bl	8001cda <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001664:	f000 fb1d 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000014 	.word	0x20000014
 8001680:	2000001c 	.word	0x2000001c
 8001684:	20000018 	.word	0x20000018

08001688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x1c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_IncTick+0x20>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <HAL_IncTick+0x20>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	2000001c 	.word	0x2000001c
 80016a8:	20002338 	.word	0x20002338

080016ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b02      	ldr	r3, [pc, #8]	; (80016bc <HAL_GetTick+0x10>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20002338 	.word	0x20002338

080016c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff fff0 	bl	80016ac <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016d8:	d005      	beq.n	80016e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_Delay+0x44>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e6:	bf00      	nop
 80016e8:	f7ff ffe0 	bl	80016ac <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d8f7      	bhi.n	80016e8 <HAL_Delay+0x28>
  {
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000001c 	.word	0x2000001c

08001708 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0be      	b.n	80018a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	d109      	bne.n	800174c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fcfa 	bl	8001140 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f9ab 	bl	8001aa8 <ADC_ConversionStop_Disable>
 8001752:	4603      	mov	r3, r0
 8001754:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	f040 8099 	bne.w	8001896 <HAL_ADC_Init+0x18e>
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 8095 	bne.w	8001896 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001774:	f023 0302 	bic.w	r3, r3, #2
 8001778:	f043 0202 	orr.w	r2, r3, #2
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001788:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7b1b      	ldrb	r3, [r3, #12]
 800178e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001790:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	4313      	orrs	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a0:	d003      	beq.n	80017aa <HAL_ADC_Init+0xa2>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <HAL_ADC_Init+0xa8>
 80017aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ae:	e000      	b.n	80017b2 <HAL_ADC_Init+0xaa>
 80017b0:	2300      	movs	r3, #0
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7d1b      	ldrb	r3, [r3, #20]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d119      	bne.n	80017f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7b1b      	ldrb	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	035a      	lsls	r2, r3, #13
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e00b      	b.n	80017f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	f043 0220 	orr.w	r2, r3, #32
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HAL_ADC_Init+0x1a8>)
 8001810:	4013      	ands	r3, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	430b      	orrs	r3, r1
 800181a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001824:	d003      	beq.n	800182e <HAL_ADC_Init+0x126>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d104      	bne.n	8001838 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	3b01      	subs	r3, #1
 8001834:	051b      	lsls	r3, r3, #20
 8001836:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	430a      	orrs	r2, r1
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_ADC_Init+0x1ac>)
 8001854:	4013      	ands	r3, r2
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	429a      	cmp	r2, r3
 800185a:	d10b      	bne.n	8001874 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	f023 0303 	bic.w	r3, r3, #3
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001872:	e018      	b.n	80018a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	f023 0312 	bic.w	r3, r3, #18
 800187c:	f043 0210 	orr.w	r2, r3, #16
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001894:	e007      	b.n	80018a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	f043 0210 	orr.w	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	ffe1f7fd 	.word	0xffe1f7fd
 80018b4:	ff1f0efe 	.word	0xff1f0efe

080018b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x20>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e0dc      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1da>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b06      	cmp	r3, #6
 80018e6:	d81c      	bhi.n	8001922 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3b05      	subs	r3, #5
 80018fa:	221f      	movs	r2, #31
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	4019      	ands	r1, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3b05      	subs	r3, #5
 8001914:	fa00 f203 	lsl.w	r2, r0, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	635a      	str	r2, [r3, #52]	; 0x34
 8001920:	e03c      	b.n	800199c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d81c      	bhi.n	8001964 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	3b23      	subs	r3, #35	; 0x23
 800193c:	221f      	movs	r2, #31
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	4019      	ands	r1, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	3b23      	subs	r3, #35	; 0x23
 8001956:	fa00 f203 	lsl.w	r2, r0, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
 8001962:	e01b      	b.n	800199c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3b41      	subs	r3, #65	; 0x41
 8001976:	221f      	movs	r2, #31
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	4019      	ands	r1, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3b41      	subs	r3, #65	; 0x41
 8001990:	fa00 f203 	lsl.w	r2, r0, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d91c      	bls.n	80019de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68d9      	ldr	r1, [r3, #12]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	3b1e      	subs	r3, #30
 80019b6:	2207      	movs	r2, #7
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	4019      	ands	r1, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6898      	ldr	r0, [r3, #8]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	3b1e      	subs	r3, #30
 80019d0:	fa00 f203 	lsl.w	r2, r0, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	e019      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6919      	ldr	r1, [r3, #16]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	2207      	movs	r2, #7
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4019      	ands	r1, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6898      	ldr	r0, [r3, #8]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d003      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a1e:	2b11      	cmp	r3, #17
 8001a20:	d132      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_ADC_ConfigChannel+0x1e4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d125      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d126      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a48:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d11a      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c9a      	lsrs	r2, r3, #18
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a68:	e002      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f9      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x1b2>
 8001a76:	e007      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40012400 	.word	0x40012400
 8001aa0:	20000014 	.word	0x20000014
 8001aa4:	431bde83 	.word	0x431bde83

08001aa8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d12e      	bne.n	8001b20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ad2:	f7ff fdeb 	bl	80016ac <HAL_GetTick>
 8001ad6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ad8:	e01b      	b.n	8001b12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ada:	f7ff fde7 	bl	80016ac <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d914      	bls.n	8001b12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d10d      	bne.n	8001b12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	f043 0210 	orr.w	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e007      	b.n	8001b22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d0dc      	beq.n	8001ada <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <__NVIC_SetPriorityGrouping>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_SetPriority>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <SysTick_Config>:
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c6c:	f7ff ff90 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff49 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff5e 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff90 	bl	8001be4 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5f 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffb0 	bl	8001c48 <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b08b      	sub	sp, #44	; 0x2c
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d06:	e169      	b.n	8001fdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f040 8158 	bne.w	8001fd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4a9a      	ldr	r2, [pc, #616]	; (8001f94 <HAL_GPIO_Init+0x2a0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d05e      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
 8001d30:	4a98      	ldr	r2, [pc, #608]	; (8001f94 <HAL_GPIO_Init+0x2a0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d875      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d36:	4a98      	ldr	r2, [pc, #608]	; (8001f98 <HAL_GPIO_Init+0x2a4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d058      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
 8001d3c:	4a96      	ldr	r2, [pc, #600]	; (8001f98 <HAL_GPIO_Init+0x2a4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d86f      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d42:	4a96      	ldr	r2, [pc, #600]	; (8001f9c <HAL_GPIO_Init+0x2a8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d052      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
 8001d48:	4a94      	ldr	r2, [pc, #592]	; (8001f9c <HAL_GPIO_Init+0x2a8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d869      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d4e:	4a94      	ldr	r2, [pc, #592]	; (8001fa0 <HAL_GPIO_Init+0x2ac>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d04c      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
 8001d54:	4a92      	ldr	r2, [pc, #584]	; (8001fa0 <HAL_GPIO_Init+0x2ac>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d863      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d5a:	4a92      	ldr	r2, [pc, #584]	; (8001fa4 <HAL_GPIO_Init+0x2b0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d046      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
 8001d60:	4a90      	ldr	r2, [pc, #576]	; (8001fa4 <HAL_GPIO_Init+0x2b0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d85d      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d66:	2b12      	cmp	r3, #18
 8001d68:	d82a      	bhi.n	8001dc0 <HAL_GPIO_Init+0xcc>
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	d859      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d6e:	a201      	add	r2, pc, #4	; (adr r2, 8001d74 <HAL_GPIO_Init+0x80>)
 8001d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d74:	08001def 	.word	0x08001def
 8001d78:	08001dc9 	.word	0x08001dc9
 8001d7c:	08001ddb 	.word	0x08001ddb
 8001d80:	08001e1d 	.word	0x08001e1d
 8001d84:	08001e23 	.word	0x08001e23
 8001d88:	08001e23 	.word	0x08001e23
 8001d8c:	08001e23 	.word	0x08001e23
 8001d90:	08001e23 	.word	0x08001e23
 8001d94:	08001e23 	.word	0x08001e23
 8001d98:	08001e23 	.word	0x08001e23
 8001d9c:	08001e23 	.word	0x08001e23
 8001da0:	08001e23 	.word	0x08001e23
 8001da4:	08001e23 	.word	0x08001e23
 8001da8:	08001e23 	.word	0x08001e23
 8001dac:	08001e23 	.word	0x08001e23
 8001db0:	08001e23 	.word	0x08001e23
 8001db4:	08001e23 	.word	0x08001e23
 8001db8:	08001dd1 	.word	0x08001dd1
 8001dbc:	08001de5 	.word	0x08001de5
 8001dc0:	4a79      	ldr	r2, [pc, #484]	; (8001fa8 <HAL_GPIO_Init+0x2b4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dc6:	e02c      	b.n	8001e22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	623b      	str	r3, [r7, #32]
          break;
 8001dce:	e029      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e024      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	3308      	adds	r3, #8
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e01f      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	330c      	adds	r3, #12
 8001dea:	623b      	str	r3, [r7, #32]
          break;
 8001dec:	e01a      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001df6:	2304      	movs	r3, #4
 8001df8:	623b      	str	r3, [r7, #32]
          break;
 8001dfa:	e013      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d105      	bne.n	8001e10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e04:	2308      	movs	r3, #8
 8001e06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	611a      	str	r2, [r3, #16]
          break;
 8001e0e:	e009      	b.n	8001e24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e10:	2308      	movs	r3, #8
 8001e12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	615a      	str	r2, [r3, #20]
          break;
 8001e1a:	e003      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
          break;
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          break;
 8001e22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2bff      	cmp	r3, #255	; 0xff
 8001e28:	d801      	bhi.n	8001e2e <HAL_GPIO_Init+0x13a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	e001      	b.n	8001e32 <HAL_GPIO_Init+0x13e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3304      	adds	r3, #4
 8001e32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2bff      	cmp	r3, #255	; 0xff
 8001e38:	d802      	bhi.n	8001e40 <HAL_GPIO_Init+0x14c>
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	e002      	b.n	8001e46 <HAL_GPIO_Init+0x152>
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	3b08      	subs	r3, #8
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	210f      	movs	r1, #15
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	401a      	ands	r2, r3
 8001e58:	6a39      	ldr	r1, [r7, #32]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	431a      	orrs	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80b1 	beq.w	8001fd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e74:	4b4d      	ldr	r3, [pc, #308]	; (8001fac <HAL_GPIO_Init+0x2b8>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a4c      	ldr	r2, [pc, #304]	; (8001fac <HAL_GPIO_Init+0x2b8>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6193      	str	r3, [r2, #24]
 8001e80:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <HAL_GPIO_Init+0x2b8>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e8c:	4a48      	ldr	r2, [pc, #288]	; (8001fb0 <HAL_GPIO_Init+0x2bc>)
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	220f      	movs	r2, #15
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4013      	ands	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <HAL_GPIO_Init+0x2c0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d013      	beq.n	8001ee0 <HAL_GPIO_Init+0x1ec>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3f      	ldr	r2, [pc, #252]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00d      	beq.n	8001edc <HAL_GPIO_Init+0x1e8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3e      	ldr	r2, [pc, #248]	; (8001fbc <HAL_GPIO_Init+0x2c8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <HAL_GPIO_Init+0x1e4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3d      	ldr	r2, [pc, #244]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d101      	bne.n	8001ed4 <HAL_GPIO_Init+0x1e0>
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e006      	b.n	8001ee2 <HAL_GPIO_Init+0x1ee>
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	e004      	b.n	8001ee2 <HAL_GPIO_Init+0x1ee>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_GPIO_Init+0x1ee>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_GPIO_Init+0x1ee>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee4:	f002 0203 	and.w	r2, r2, #3
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	4093      	lsls	r3, r2
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ef2:	492f      	ldr	r1, [pc, #188]	; (8001fb0 <HAL_GPIO_Init+0x2bc>)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	492c      	ldr	r1, [pc, #176]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4928      	ldr	r1, [pc, #160]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4922      	ldr	r1, [pc, #136]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	491e      	ldr	r1, [pc, #120]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	4918      	ldr	r1, [pc, #96]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4914      	ldr	r1, [pc, #80]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d021      	beq.n	8001fc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e021      	b.n	8001fd6 <HAL_GPIO_Init+0x2e2>
 8001f92:	bf00      	nop
 8001f94:	10320000 	.word	0x10320000
 8001f98:	10310000 	.word	0x10310000
 8001f9c:	10220000 	.word	0x10220000
 8001fa0:	10210000 	.word	0x10210000
 8001fa4:	10120000 	.word	0x10120000
 8001fa8:	10110000 	.word	0x10110000
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40010800 	.word	0x40010800
 8001fb8:	40010c00 	.word	0x40010c00
 8001fbc:	40011000 	.word	0x40011000
 8001fc0:	40011400 	.word	0x40011400
 8001fc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_GPIO_Init+0x304>)
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	4909      	ldr	r1, [pc, #36]	; (8001ff8 <HAL_GPIO_Init+0x304>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	3301      	adds	r3, #1
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f47f ae8e 	bne.w	8001d08 <HAL_GPIO_Init+0x14>
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	372c      	adds	r7, #44	; 0x2c
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	40010400 	.word	0x40010400

08001ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
 8002008:	4613      	mov	r3, r2
 800200a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800200c:	787b      	ldrb	r3, [r7, #1]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002018:	e003      	b.n	8002022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	041a      	lsls	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	611a      	str	r2, [r3, #16]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e26c      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8087 	beq.w	800215a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800204c:	4b92      	ldr	r3, [pc, #584]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	2b04      	cmp	r3, #4
 8002056:	d00c      	beq.n	8002072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002058:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b08      	cmp	r3, #8
 8002062:	d112      	bne.n	800208a <HAL_RCC_OscConfig+0x5e>
 8002064:	4b8c      	ldr	r3, [pc, #560]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d10b      	bne.n	800208a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002072:	4b89      	ldr	r3, [pc, #548]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d06c      	beq.n	8002158 <HAL_RCC_OscConfig+0x12c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d168      	bne.n	8002158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e246      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x76>
 8002094:	4b80      	ldr	r3, [pc, #512]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a7f      	ldr	r2, [pc, #508]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e02e      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x98>
 80020aa:	4b7b      	ldr	r3, [pc, #492]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7a      	ldr	r2, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b78      	ldr	r3, [pc, #480]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a77      	ldr	r2, [pc, #476]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e01d      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0xbc>
 80020ce:	4b72      	ldr	r3, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a71      	ldr	r2, [pc, #452]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020e8:	4b6b      	ldr	r3, [pc, #428]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a6a      	ldr	r2, [pc, #424]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b68      	ldr	r3, [pc, #416]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a67      	ldr	r2, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fad0 	bl	80016ac <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff facc 	bl	80016ac <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1fa      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b5d      	ldr	r3, [pc, #372]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0xe4>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff fabc 	bl	80016ac <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fab8 	bl	80016ac <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1e6      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	4b53      	ldr	r3, [pc, #332]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x10c>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d063      	beq.n	800222e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002166:	4b4c      	ldr	r3, [pc, #304]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002172:	4b49      	ldr	r3, [pc, #292]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b08      	cmp	r3, #8
 800217c:	d11c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x18c>
 800217e:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x176>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e1ba      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4939      	ldr	r1, [pc, #228]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	e03a      	b.n	800222e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7ff fa71 	bl	80016ac <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff fa6d 	bl	80016ac <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e19b      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4927      	ldr	r1, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fa50 	bl	80016ac <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002210:	f7ff fa4c 	bl	80016ac <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e17a      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03a      	beq.n	80022b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d019      	beq.n	8002276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_RCC_OscConfig+0x274>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7ff fa30 	bl	80016ac <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fa2c 	bl	80016ac <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e15a      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800226e:	2001      	movs	r0, #1
 8002270:	f000 fad8 	bl	8002824 <RCC_Delay>
 8002274:	e01c      	b.n	80022b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_OscConfig+0x274>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7ff fa16 	bl	80016ac <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002282:	e00f      	b.n	80022a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff fa12 	bl	80016ac <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d908      	bls.n	80022a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e140      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	42420000 	.word	0x42420000
 80022a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	4b9e      	ldr	r3, [pc, #632]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1e9      	bne.n	8002284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a6 	beq.w	800240a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4b97      	ldr	r3, [pc, #604]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10d      	bne.n	80022ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4b94      	ldr	r3, [pc, #592]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	4a93      	ldr	r2, [pc, #588]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	61d3      	str	r3, [r2, #28]
 80022da:	4b91      	ldr	r3, [pc, #580]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b8e      	ldr	r3, [pc, #568]	; (8002524 <HAL_RCC_OscConfig+0x4f8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b8b      	ldr	r3, [pc, #556]	; (8002524 <HAL_RCC_OscConfig+0x4f8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a8a      	ldr	r2, [pc, #552]	; (8002524 <HAL_RCC_OscConfig+0x4f8>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7ff f9d3 	bl	80016ac <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7ff f9cf 	bl	80016ac <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b64      	cmp	r3, #100	; 0x64
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0fd      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b81      	ldr	r3, [pc, #516]	; (8002524 <HAL_RCC_OscConfig+0x4f8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x312>
 8002330:	4b7b      	ldr	r3, [pc, #492]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a7a      	ldr	r2, [pc, #488]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	e02d      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x334>
 8002346:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a75      	ldr	r2, [pc, #468]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	4b73      	ldr	r3, [pc, #460]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a72      	ldr	r2, [pc, #456]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6213      	str	r3, [r2, #32]
 800235e:	e01c      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b05      	cmp	r3, #5
 8002366:	d10c      	bne.n	8002382 <HAL_RCC_OscConfig+0x356>
 8002368:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4a69      	ldr	r2, [pc, #420]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	e00b      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 8002382:	4b67      	ldr	r3, [pc, #412]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a66      	ldr	r2, [pc, #408]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	4b64      	ldr	r3, [pc, #400]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a63      	ldr	r2, [pc, #396]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d015      	beq.n	80023ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7ff f983 	bl	80016ac <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7ff f97f 	bl	80016ac <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0ab      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	4b57      	ldr	r3, [pc, #348]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ee      	beq.n	80023aa <HAL_RCC_OscConfig+0x37e>
 80023cc:	e014      	b.n	80023f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7ff f96d 	bl	80016ac <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7ff f969 	bl	80016ac <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e095      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ee      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fe:	4b48      	ldr	r3, [pc, #288]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a47      	ldr	r2, [pc, #284]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002408:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8081 	beq.w	8002516 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002414:	4b42      	ldr	r3, [pc, #264]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d061      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d146      	bne.n	80024b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002428:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <HAL_RCC_OscConfig+0x4fc>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7ff f93d 	bl	80016ac <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002436:	f7ff f939 	bl	80016ac <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e067      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002448:	4b35      	ldr	r3, [pc, #212]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f0      	bne.n	8002436 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d108      	bne.n	8002470 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800245e:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	492d      	ldr	r1, [pc, #180]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a19      	ldr	r1, [r3, #32]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	430b      	orrs	r3, r1
 8002482:	4927      	ldr	r1, [pc, #156]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_OscConfig+0x4fc>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7ff f90d 	bl	80016ac <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7ff f909 	bl	80016ac <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e037      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x46a>
 80024b4:	e02f      	b.n	8002516 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HAL_RCC_OscConfig+0x4fc>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff f8f6 	bl	80016ac <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7ff f8f2 	bl	80016ac <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e020      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x498>
 80024e2:	e018      	b.n	8002516 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e013      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	429a      	cmp	r2, r3
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	40007000 	.word	0x40007000
 8002528:	42420060 	.word	0x42420060

0800252c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0d0      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	4965      	ldr	r1, [pc, #404]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4b59      	ldr	r3, [pc, #356]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	494d      	ldr	r1, [pc, #308]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d040      	beq.n	800264c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d115      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e073      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06b      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4936      	ldr	r1, [pc, #216]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7ff f846 	bl	80016ac <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7ff f842 	bl	80016ac <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e053      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d210      	bcs.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	4922      	ldr	r1, [pc, #136]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e032      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4916      	ldr	r1, [pc, #88]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	490e      	ldr	r1, [pc, #56]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ba:	f000 f821 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	490a      	ldr	r1, [pc, #40]	; (80026f4 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1cc>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe ffa4 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08005048 	.word	0x08005048
 80026f8:	20000014 	.word	0x20000014
 80026fc:	20000018 	.word	0x20000018

08002700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b490      	push	{r4, r7}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002706:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002708:	1d3c      	adds	r4, r7, #4
 800270a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800270c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002710:	f240 2301 	movw	r3, #513	; 0x201
 8002714:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b04      	cmp	r3, #4
 8002738:	d002      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x40>
 800273a:	2b08      	cmp	r3, #8
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0x46>
 800273e:	e02d      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002742:	623b      	str	r3, [r7, #32]
      break;
 8002744:	e02d      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	0c9b      	lsrs	r3, r3, #18
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002752:	4413      	add	r3, r2
 8002754:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002758:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	0c5b      	lsrs	r3, r3, #17
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002772:	4413      	add	r3, r2
 8002774:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002778:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800277e:	fb02 f203 	mul.w	r2, r2, r3
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	e004      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	623b      	str	r3, [r7, #32]
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800279e:	623b      	str	r3, [r7, #32]
      break;
 80027a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc90      	pop	{r4, r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	08005038 	.word	0x08005038
 80027b4:	40021000 	.word	0x40021000
 80027b8:	007a1200 	.word	0x007a1200
 80027bc:	003d0900 	.word	0x003d0900

080027c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c4:	4b02      	ldr	r3, [pc, #8]	; (80027d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	20000014 	.word	0x20000014

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d8:	f7ff fff2 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08005058 	.word	0x08005058

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002800:	f7ff ffde 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	0adb      	lsrs	r3, r3, #11
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	08005058 	.word	0x08005058

08002824 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <RCC_Delay+0x34>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <RCC_Delay+0x38>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0a5b      	lsrs	r3, r3, #9
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002840:	bf00      	nop
  }
  while (Delay --);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1e5a      	subs	r2, r3, #1
 8002846:	60fa      	str	r2, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f9      	bne.n	8002840 <RCC_Delay+0x1c>
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	20000014 	.word	0x20000014
 800285c:	10624dd3 	.word	0x10624dd3

08002860 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d07d      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002880:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10d      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b4c      	ldr	r3, [pc, #304]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4a4b      	ldr	r2, [pc, #300]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	61d3      	str	r3, [r2, #28]
 8002898:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d118      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a42      	ldr	r2, [pc, #264]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c0:	f7fe fef4 	bl	80016ac <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c6:	e008      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c8:	f7fe fef0 	bl	80016ac <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e06d      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028e6:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d02e      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d027      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002904:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800290e:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002914:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800291a:	4a29      	ldr	r2, [pc, #164]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d014      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe febf 	bl	80016ac <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002930:	e00a      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7fe febb 	bl	80016ac <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e036      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ee      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4917      	ldr	r1, [pc, #92]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002962:	4313      	orrs	r3, r2
 8002964:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002976:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	490b      	ldr	r1, [pc, #44]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	4904      	ldr	r1, [pc, #16]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40007000 	.word	0x40007000
 80029c8:	42420440 	.word	0x42420440

080029cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e076      	b.n	8002acc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d108      	bne.n	80029f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ee:	d009      	beq.n	8002a04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
 80029f6:	e005      	b.n	8002a04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fbca 	bl	80011b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	ea42 0103 	orr.w	r1, r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	0c1a      	lsrs	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f002 0204 	and.w	r2, r2, #4
 8002aaa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_SPI_Transmit+0x22>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e126      	b.n	8002d44 <HAL_SPI_Transmit+0x270>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002afe:	f7fe fdd5 	bl	80016ac <HAL_GetTick>
 8002b02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d002      	beq.n	8002b1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
 8002b16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b18:	e10b      	b.n	8002d32 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_Transmit+0x52>
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b2a:	e102      	b.n	8002d32 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	88fa      	ldrh	r2, [r7, #6]
 8002b4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b72:	d10f      	bne.n	8002b94 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d007      	beq.n	8002bb2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bba:	d14b      	bne.n	8002c54 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_SPI_Transmit+0xf6>
 8002bc4:	8afb      	ldrh	r3, [r7, #22]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d13e      	bne.n	8002c48 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	881a      	ldrh	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	1c9a      	adds	r2, r3, #2
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bee:	e02b      	b.n	8002c48 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d112      	bne.n	8002c24 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	1c9a      	adds	r2, r3, #2
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c22:	e011      	b.n	8002c48 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c24:	f7fe fd42 	bl	80016ac <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d803      	bhi.n	8002c3c <HAL_SPI_Transmit+0x168>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c3a:	d102      	bne.n	8002c42 <HAL_SPI_Transmit+0x16e>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c46:	e074      	b.n	8002d32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1ce      	bne.n	8002bf0 <HAL_SPI_Transmit+0x11c>
 8002c52:	e04c      	b.n	8002cee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_SPI_Transmit+0x18e>
 8002c5c:	8afb      	ldrh	r3, [r7, #22]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d140      	bne.n	8002ce4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c88:	e02c      	b.n	8002ce4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d113      	bne.n	8002cc0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	7812      	ldrb	r2, [r2, #0]
 8002ca4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cbe:	e011      	b.n	8002ce4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc0:	f7fe fcf4 	bl	80016ac <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d803      	bhi.n	8002cd8 <HAL_SPI_Transmit+0x204>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd6:	d102      	bne.n	8002cde <HAL_SPI_Transmit+0x20a>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ce2:	e026      	b.n	8002d32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1cd      	bne.n	8002c8a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	6839      	ldr	r1, [r7, #0]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fa62 	bl	80031bc <SPI_EndRxTxTransaction>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	77fb      	strb	r3, [r7, #31]
 8002d2e:	e000      	b.n	8002d32 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d42:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	; 0x30
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_SPI_TransmitReceive+0x26>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e18a      	b.n	8003088 <HAL_SPI_TransmitReceive+0x33c>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d7a:	f7fe fc97 	bl	80016ac <HAL_GetTick>
 8002d7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d00f      	beq.n	8002dbc <HAL_SPI_TransmitReceive+0x70>
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002da2:	d107      	bne.n	8002db4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d103      	bne.n	8002db4 <HAL_SPI_TransmitReceive+0x68>
 8002dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d003      	beq.n	8002dbc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
 8002db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dba:	e15b      	b.n	8003074 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <HAL_SPI_TransmitReceive+0x82>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_SPI_TransmitReceive+0x82>
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dd4:	e14e      	b.n	8003074 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d003      	beq.n	8002dea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2205      	movs	r2, #5
 8002de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	887a      	ldrh	r2, [r7, #2]
 8002dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	887a      	ldrh	r2, [r7, #2]
 8002e12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d007      	beq.n	8002e3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e46:	d178      	bne.n	8002f3a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_SPI_TransmitReceive+0x10a>
 8002e50:	8b7b      	ldrh	r3, [r7, #26]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d166      	bne.n	8002f24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	881a      	ldrh	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	1c9a      	adds	r2, r3, #2
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e7a:	e053      	b.n	8002f24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d11b      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x176>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <HAL_SPI_TransmitReceive+0x176>
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d113      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	881a      	ldrh	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	1c9a      	adds	r2, r3, #2
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d119      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x1b8>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d014      	beq.n	8002f04 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	1c9a      	adds	r2, r3, #2
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f00:	2301      	movs	r3, #1
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f04:	f7fe fbd2 	bl	80016ac <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d807      	bhi.n	8002f24 <HAL_SPI_TransmitReceive+0x1d8>
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f1a:	d003      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f22:	e0a7      	b.n	8003074 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1a6      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0x130>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1a1      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0x130>
 8002f38:	e07c      	b.n	8003034 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_SPI_TransmitReceive+0x1fc>
 8002f42:	8b7b      	ldrh	r3, [r7, #26]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d16b      	bne.n	8003020 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	7812      	ldrb	r2, [r2, #0]
 8002f54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f6e:	e057      	b.n	8003020 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d11c      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x26c>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d017      	beq.n	8002fb8 <HAL_SPI_TransmitReceive+0x26c>
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d114      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d119      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x2ae>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d014      	beq.n	8002ffa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ffa:	f7fe fb57 	bl	80016ac <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003006:	429a      	cmp	r2, r3
 8003008:	d803      	bhi.n	8003012 <HAL_SPI_TransmitReceive+0x2c6>
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003010:	d102      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x2cc>
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800301e:	e029      	b.n	8003074 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1a2      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x224>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d19d      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f8bf 	bl	80031bc <SPI_EndRxTxTransaction>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003050:	e010      	b.n	8003074 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10b      	bne.n	8003072 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	e000      	b.n	8003074 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003088:	4618      	mov	r0, r3
 800308a:	3730      	adds	r7, #48	; 0x30
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800309e:	b2db      	uxtb	r3, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
	...

080030ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030bc:	f7fe faf6 	bl	80016ac <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030cc:	f7fe faee 	bl	80016ac <HAL_GetTick>
 80030d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030d2:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	015b      	lsls	r3, r3, #5
 80030d8:	0d1b      	lsrs	r3, r3, #20
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030e2:	e054      	b.n	800318e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ea:	d050      	beq.n	800318e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030ec:	f7fe fade 	bl	80016ac <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d902      	bls.n	8003102 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d13d      	bne.n	800317e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003110:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800311a:	d111      	bne.n	8003140 <SPI_WaitFlagStateUntilTimeout+0x94>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003124:	d004      	beq.n	8003130 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312e:	d107      	bne.n	8003140 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003148:	d10f      	bne.n	800316a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003168:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e017      	b.n	80031ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3b01      	subs	r3, #1
 800318c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4013      	ands	r3, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d19b      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000014 	.word	0x20000014

080031bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff ff6a 	bl	80030ac <SPI_WaitFlagStateUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	f043 0220 	orr.w	r2, r3, #32
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e000      	b.n	80031f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e041      	b.n	800328e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fe f814 	bl	800124c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f000 f8c2 	bl	80033c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e082      	b.n	80033b6 <HAL_TIM_IC_ConfigChannel+0x120>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d11b      	bne.n	80032f6 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f000 f8d9 	bl	8003484 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 020c 	bic.w	r2, r2, #12
 80032e0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6999      	ldr	r1, [r3, #24]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	619a      	str	r2, [r3, #24]
 80032f4:	e05a      	b.n	80033ac <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d11c      	bne.n	8003336 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	6819      	ldr	r1, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f000 f914 	bl	8003538 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800331e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	619a      	str	r2, [r3, #24]
 8003334:	e03a      	b.n	80033ac <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d11b      	bne.n	8003374 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f000 f930 	bl	80035b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 020c 	bic.w	r2, r2, #12
 800335e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69d9      	ldr	r1, [r3, #28]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	61da      	str	r2, [r3, #28]
 8003372:	e01b      	b.n	80033ac <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f000 f94f 	bl	8003626 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003396:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69d9      	ldr	r1, [r3, #28]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	021a      	lsls	r2, r3, #8
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a29      	ldr	r2, [pc, #164]	; (8003478 <TIM_Base_SetConfig+0xb8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <TIM_Base_SetConfig+0x30>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033de:	d007      	beq.n	80033f0 <TIM_Base_SetConfig+0x30>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a26      	ldr	r2, [pc, #152]	; (800347c <TIM_Base_SetConfig+0xbc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_Base_SetConfig+0x30>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a25      	ldr	r2, [pc, #148]	; (8003480 <TIM_Base_SetConfig+0xc0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <TIM_Base_SetConfig+0xb8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00b      	beq.n	8003422 <TIM_Base_SetConfig+0x62>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003410:	d007      	beq.n	8003422 <TIM_Base_SetConfig+0x62>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a19      	ldr	r2, [pc, #100]	; (800347c <TIM_Base_SetConfig+0xbc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <TIM_Base_SetConfig+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <TIM_Base_SetConfig+0xc0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d108      	bne.n	8003434 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a07      	ldr	r2, [pc, #28]	; (8003478 <TIM_Base_SetConfig+0xb8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d103      	bne.n	8003468 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	615a      	str	r2, [r3, #20]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800

08003484 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f023 0201 	bic.w	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a1f      	ldr	r2, [pc, #124]	; (800352c <TIM_TI1_SetConfig+0xa8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00b      	beq.n	80034ca <TIM_TI1_SetConfig+0x46>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b8:	d007      	beq.n	80034ca <TIM_TI1_SetConfig+0x46>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <TIM_TI1_SetConfig+0xac>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_TI1_SetConfig+0x46>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <TIM_TI1_SetConfig+0xb0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <TIM_TI1_SetConfig+0x4a>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <TIM_TI1_SetConfig+0x4c>
 80034ce:	2300      	movs	r3, #0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	e003      	b.n	80034ee <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f023 030a 	bic.w	r3, r3, #10
 8003508:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f003 030a 	and.w	r3, r3, #10
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800

08003538 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f023 0210 	bic.w	r2, r3, #16
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003576:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	031b      	lsls	r3, r3, #12
 800357c:	b29b      	uxth	r3, r3
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800358a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f023 0303 	bic.w	r3, r3, #3
 80035dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003600:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	621a      	str	r2, [r3, #32]
}
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003626:	b480      	push	{r7}
 8003628:	b087      	sub	sp, #28
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003652:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003664:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	031b      	lsls	r3, r3, #12
 800366a:	b29b      	uxth	r3, r3
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003678:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	031b      	lsls	r3, r3, #12
 800367e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	621a      	str	r2, [r3, #32]
}
 8003694:	bf00      	nop
 8003696:	371c      	adds	r7, #28
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e046      	b.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a16      	ldr	r2, [pc, #88]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00e      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003704:	d009      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a12      	ldr	r2, [pc, #72]	; (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d004      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a10      	ldr	r2, [pc, #64]	; (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d10c      	bne.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4313      	orrs	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800

0800375c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e03f      	b.n	80037ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fde0 	bl	8001348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800379e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f829 	bl	80037f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003832:	f023 030c 	bic.w	r3, r3, #12
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	430b      	orrs	r3, r1
 800383e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2c      	ldr	r2, [pc, #176]	; (800390c <UART_SetConfig+0x114>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d103      	bne.n	8003868 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003860:	f7fe ffcc 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	e002      	b.n	800386e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003868:	f7fe ffb4 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 800386c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	009a      	lsls	r2, r3, #2
 8003878:	441a      	add	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fbb2 f3f3 	udiv	r3, r2, r3
 8003884:	4a22      	ldr	r2, [pc, #136]	; (8003910 <UART_SetConfig+0x118>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	0119      	lsls	r1, r3, #4
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009a      	lsls	r2, r3, #2
 8003898:	441a      	add	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <UART_SetConfig+0x118>)
 80038a6:	fba3 0302 	umull	r0, r3, r3, r2
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	2064      	movs	r0, #100	; 0x64
 80038ae:	fb00 f303 	mul.w	r3, r0, r3
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	3332      	adds	r3, #50	; 0x32
 80038b8:	4a15      	ldr	r2, [pc, #84]	; (8003910 <UART_SetConfig+0x118>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c4:	4419      	add	r1, r3
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	009a      	lsls	r2, r3, #2
 80038d0:	441a      	add	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <UART_SetConfig+0x118>)
 80038de:	fba3 0302 	umull	r0, r3, r3, r2
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	2064      	movs	r0, #100	; 0x64
 80038e6:	fb00 f303 	mul.w	r3, r0, r3
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	3332      	adds	r3, #50	; 0x32
 80038f0:	4a07      	ldr	r2, [pc, #28]	; (8003910 <UART_SetConfig+0x118>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	f003 020f 	and.w	r2, r3, #15
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	440a      	add	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40013800 	.word	0x40013800
 8003910:	51eb851f 	.word	0x51eb851f

08003914 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003918:	4904      	ldr	r1, [pc, #16]	; (800392c <MX_FATFS_Init+0x18>)
 800391a:	4805      	ldr	r0, [pc, #20]	; (8003930 <MX_FATFS_Init+0x1c>)
 800391c:	f000 fe5a 	bl	80045d4 <FATFS_LinkDriver>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <MX_FATFS_Init+0x20>)
 8003926:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}
 800392c:	2000233c 	.word	0x2000233c
 8003930:	20000020 	.word	0x20000020
 8003934:	20002340 	.word	0x20002340

08003938 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fdd1 	bl	80004ec <SD_disk_initialize>
 800394a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fc fead 	bl	80006c0 <SD_disk_status>
 8003966:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	4603      	mov	r3, r0
 800397e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003980:	7bf8      	ldrb	r0, [r7, #15]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	f7fc feae 	bl	80006e8 <SD_disk_read>
 800398c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80039a6:	7bf8      	ldrb	r0, [r7, #15]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	f7fc ff05 	bl	80007bc <SD_disk_write>
 80039b2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	603a      	str	r2, [r7, #0]
 80039c6:	71fb      	strb	r3, [r7, #7]
 80039c8:	460b      	mov	r3, r1
 80039ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80039cc:	79b9      	ldrb	r1, [r7, #6]
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fc ff76 	bl	80008c4 <SD_disk_ioctl>
 80039d8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <disk_status+0x30>)
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	79fa      	ldrb	r2, [r7, #7]
 80039fc:	4905      	ldr	r1, [pc, #20]	; (8003a14 <disk_status+0x30>)
 80039fe:	440a      	add	r2, r1
 8003a00:	7a12      	ldrb	r2, [r2, #8]
 8003a02:	4610      	mov	r0, r2
 8003a04:	4798      	blx	r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	200000dc 	.word	0x200000dc

08003a18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	4a0d      	ldr	r2, [pc, #52]	; (8003a60 <disk_initialize+0x48>)
 8003a2a:	5cd3      	ldrb	r3, [r2, r3]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d111      	bne.n	8003a54 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	4a0b      	ldr	r2, [pc, #44]	; (8003a60 <disk_initialize+0x48>)
 8003a34:	2101      	movs	r1, #1
 8003a36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <disk_initialize+0x48>)
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	79fa      	ldrb	r2, [r7, #7]
 8003a46:	4906      	ldr	r1, [pc, #24]	; (8003a60 <disk_initialize+0x48>)
 8003a48:	440a      	add	r2, r1
 8003a4a:	7a12      	ldrb	r2, [r2, #8]
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4798      	blx	r3
 8003a50:	4603      	mov	r3, r0
 8003a52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	200000dc 	.word	0x200000dc

08003a64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003a64:	b590      	push	{r4, r7, lr}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4603      	mov	r3, r0
 8003a72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <disk_read+0x3c>)
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	689c      	ldr	r4, [r3, #8]
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	4a07      	ldr	r2, [pc, #28]	; (8003aa0 <disk_read+0x3c>)
 8003a84:	4413      	add	r3, r2
 8003a86:	7a18      	ldrb	r0, [r3, #8]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	47a0      	blx	r4
 8003a90:	4603      	mov	r3, r0
 8003a92:	75fb      	strb	r3, [r7, #23]
  return res;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd90      	pop	{r4, r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200000dc 	.word	0x200000dc

08003aa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <disk_write+0x3c>)
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	68dc      	ldr	r4, [r3, #12]
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	4a07      	ldr	r2, [pc, #28]	; (8003ae0 <disk_write+0x3c>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	7a18      	ldrb	r0, [r3, #8]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	47a0      	blx	r4
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd90      	pop	{r4, r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200000dc 	.word	0x200000dc

08003ae4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	603a      	str	r2, [r7, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
 8003af0:	460b      	mov	r3, r1
 8003af2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <disk_ioctl+0x38>)
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	79fa      	ldrb	r2, [r7, #7]
 8003b02:	4906      	ldr	r1, [pc, #24]	; (8003b1c <disk_ioctl+0x38>)
 8003b04:	440a      	add	r2, r1
 8003b06:	7a10      	ldrb	r0, [r2, #8]
 8003b08:	79b9      	ldrb	r1, [r7, #6]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	4798      	blx	r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73fb      	strb	r3, [r7, #15]
  return res;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	200000dc 	.word	0x200000dc

08003b20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e016      	b.n	8003b5c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003b2e:	4910      	ldr	r1, [pc, #64]	; (8003b70 <clear_lock+0x50>)
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4613      	mov	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d108      	bne.n	8003b56 <clear_lock+0x36>
 8003b44:	490a      	ldr	r1, [pc, #40]	; (8003b70 <clear_lock+0x50>)
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d9e5      	bls.n	8003b2e <clear_lock+0xe>
	}
}
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	200000c4 	.word	0x200000c4

08003b74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b86:	3304      	adds	r3, #4
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d047      	beq.n	8003c1e <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003b94:	330c      	adds	r3, #12
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	7818      	ldrb	r0, [r3, #0]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	f7ff ff7b 	bl	8003aa4 <disk_write>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <sync_window+0x46>
			res = FR_DISK_ERR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
 8003bb8:	e031      	b.n	8003c1e <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	1ad2      	subs	r2, r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd8:	3318      	adds	r3, #24
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d21e      	bcs.n	8003c1e <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be6:	3303      	adds	r3, #3
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e014      	b.n	8003c18 <sync_window+0xa4>
					wsect += fs->fsize;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf4:	3318      	adds	r3, #24
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c04:	3301      	adds	r3, #1
 8003c06:	7818      	ldrb	r0, [r3, #0]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	f7ff ff49 	bl	8003aa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d8e7      	bhi.n	8003bee <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d01f      	beq.n	8003c86 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff ff94 	bl	8003b74 <sync_window>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d117      	bne.n	8003c86 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	7818      	ldrb	r0, [r3, #0]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	2301      	movs	r3, #1
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	f7ff fefd 	bl	8003a64 <disk_read>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003c80:	330c      	adds	r3, #12
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c9c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d031      	beq.n	8003d0a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e002      	b.n	8003cb4 <get_ldnumber+0x24>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b1f      	cmp	r3, #31
 8003cba:	d903      	bls.n	8003cc4 <get_ldnumber+0x34>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b3a      	cmp	r3, #58	; 0x3a
 8003cc2:	d1f4      	bne.n	8003cae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b3a      	cmp	r3, #58	; 0x3a
 8003cca:	d11c      	bne.n	8003d06 <get_ldnumber+0x76>
			tp = *path;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	60fa      	str	r2, [r7, #12]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	3b30      	subs	r3, #48	; 0x30
 8003cdc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b09      	cmp	r3, #9
 8003ce2:	d80e      	bhi.n	8003d02 <get_ldnumber+0x72>
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d10a      	bne.n	8003d02 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d107      	bne.n	8003d02 <get_ldnumber+0x72>
					vol = (int)i;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	e002      	b.n	8003d0c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003d0a:	693b      	ldr	r3, [r7, #16]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr
	...

08003d18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003d34:	330c      	adds	r3, #12
 8003d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d3a:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8003d3c:	6839      	ldr	r1, [r7, #0]
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ff72 	bl	8003c28 <move_window>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <check_fs+0x36>
		return 3;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e04a      	b.n	8003de4 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003d54:	3301      	adds	r3, #1
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	b21a      	sxth	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8003d62:	b21b      	sxth	r3, r3
 8003d64:	4313      	orrs	r3, r2
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	4a20      	ldr	r2, [pc, #128]	; (8003dec <check_fs+0xd4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d001      	beq.n	8003d72 <check_fs+0x5a>
		return 2;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e038      	b.n	8003de4 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3336      	adds	r3, #54	; 0x36
 8003d76:	3303      	adds	r3, #3
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	061a      	lsls	r2, r3, #24
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3336      	adds	r3, #54	; 0x36
 8003d80:	3302      	adds	r3, #2
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	4313      	orrs	r3, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	3236      	adds	r2, #54	; 0x36
 8003d8c:	3201      	adds	r2, #1
 8003d8e:	7812      	ldrb	r2, [r2, #0]
 8003d90:	0212      	lsls	r2, r2, #8
 8003d92:	4313      	orrs	r3, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003da0:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <check_fs+0xd8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <check_fs+0x92>
		return 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e01c      	b.n	8003de4 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3352      	adds	r3, #82	; 0x52
 8003dae:	3303      	adds	r3, #3
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	061a      	lsls	r2, r3, #24
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3352      	adds	r3, #82	; 0x52
 8003db8:	3302      	adds	r3, #2
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	3252      	adds	r2, #82	; 0x52
 8003dc4:	3201      	adds	r2, #1
 8003dc6:	7812      	ldrb	r2, [r2, #0]
 8003dc8:	0212      	lsls	r2, r2, #8
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003dd8:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <check_fs+0xd8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <check_fs+0xca>
		return 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e000      	b.n	8003de4 <check_fs+0xcc>

	return 1;
 8003de2:	2301      	movs	r3, #1
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	ffffaa55 	.word	0xffffaa55
 8003df0:	00544146 	.word	0x00544146

08003df4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b096      	sub	sp, #88	; 0x58
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003e08:	68b8      	ldr	r0, [r7, #8]
 8003e0a:	f7ff ff41 	bl	8003c90 <get_ldnumber>
 8003e0e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	da01      	bge.n	8003e1a <find_volume+0x26>
 8003e16:	230b      	movs	r3, #11
 8003e18:	e33c      	b.n	8004494 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003e1a:	4ab3      	ldr	r2, [pc, #716]	; (80040e8 <find_volume+0x2f4>)
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e22:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <find_volume+0x3a>
 8003e2a:	230c      	movs	r3, #12
 8003e2c:	e332      	b.n	8004494 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e32:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8003e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01d      	beq.n	8003e7c <find_volume+0x88>
		stat = disk_status(fs->drv);
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e46:	3301      	adds	r3, #1
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fdca 	bl	80039e4 <disk_status>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003e56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10c      	bne.n	8003e7c <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <find_volume+0x84>
 8003e68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8003e74:	230a      	movs	r3, #10
 8003e76:	e30d      	b.n	8004494 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e30b      	b.n	8004494 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e82:	2200      	movs	r2, #0
 8003e84:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e90:	3301      	adds	r3, #1
 8003e92:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fdba 	bl	8003a18 <disk_initialize>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8003eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e2ec      	b.n	8004494 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <find_volume+0xdc>
 8003ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8003ecc:	230a      	movs	r3, #10
 8003ece:	e2e1      	b.n	8004494 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	7818      	ldrb	r0, [r3, #0]
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee0:	330a      	adds	r3, #10
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	f7ff fdfd 	bl	8003ae4 <disk_ioctl>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10f      	bne.n	8003f10 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef6:	330a      	adds	r3, #10
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efe:	d307      	bcc.n	8003f10 <find_volume+0x11c>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f06:	330a      	adds	r3, #10
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d901      	bls.n	8003f14 <find_volume+0x120>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e2bf      	b.n	8004494 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8003f18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f1c:	f7ff fefc 	bl	8003d18 <check_fs>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8003f26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d155      	bne.n	8003fda <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003f2e:	2300      	movs	r3, #0
 8003f30:	643b      	str	r3, [r7, #64]	; 0x40
 8003f32:	e029      	b.n	8003f88 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8003f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003f3e:	4413      	add	r3, r2
 8003f40:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	3304      	adds	r3, #4
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d012      	beq.n	8003f72 <find_volume+0x17e>
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	330b      	adds	r3, #11
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	061a      	lsls	r2, r3, #24
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	330a      	adds	r3, #10
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	041b      	lsls	r3, r3, #16
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f60:	3209      	adds	r2, #9
 8003f62:	7812      	ldrb	r2, [r2, #0]
 8003f64:	0212      	lsls	r2, r2, #8
 8003f66:	4313      	orrs	r3, r2
 8003f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f6a:	3208      	adds	r2, #8
 8003f6c:	7812      	ldrb	r2, [r2, #0]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	e000      	b.n	8003f74 <find_volume+0x180>
 8003f72:	2200      	movs	r2, #0
 8003f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003f7c:	440b      	add	r3, r1
 8003f7e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f84:	3301      	adds	r3, #1
 8003f86:	643b      	str	r3, [r7, #64]	; 0x40
 8003f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d9d2      	bls.n	8003f34 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8003f8e:	2300      	movs	r3, #0
 8003f90:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <find_volume+0x1aa>
 8003f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8003f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003fac:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8003fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <find_volume+0x1cc>
 8003fb4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003fb8:	f7ff feae 	bl	8003d18 <check_fs>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	e000      	b.n	8003fc2 <find_volume+0x1ce>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8003fc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <find_volume+0x1e6>
 8003fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8003fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d9e1      	bls.n	8003f9e <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003fda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d101      	bne.n	8003fe6 <find_volume+0x1f2>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e256      	b.n	8004494 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8003fe6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <find_volume+0x1fe>
 8003fee:	230d      	movs	r3, #13
 8003ff0:	e250      	b.n	8004494 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	7b1b      	ldrb	r3, [r3, #12]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	b21a      	sxth	r2, r3
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	7adb      	ldrb	r3, [r3, #11]
 8003ffe:	b21b      	sxth	r3, r3
 8004000:	4313      	orrs	r3, r2
 8004002:	b21a      	sxth	r2, r3
 8004004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400a:	330a      	adds	r3, #10
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	b21b      	sxth	r3, r3
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8004014:	230d      	movs	r3, #13
 8004016:	e23d      	b.n	8004494 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	7ddb      	ldrb	r3, [r3, #23]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	b21a      	sxth	r2, r3
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	7d9b      	ldrb	r3, [r3, #22]
 8004024:	b21b      	sxth	r3, r3
 8004026:	4313      	orrs	r3, r2
 8004028:	b21b      	sxth	r3, r3
 800402a:	b29b      	uxth	r3, r3
 800402c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d112      	bne.n	800405a <find_volume+0x266>
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800403a:	061a      	lsls	r2, r3, #24
 800403c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	4313      	orrs	r3, r2
 8004046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004048:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800404c:	0212      	lsls	r2, r2, #8
 800404e:	4313      	orrs	r3, r2
 8004050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004052:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004056:	4313      	orrs	r3, r2
 8004058:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004060:	3318      	adds	r3, #24
 8004062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004064:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004068:	7c1a      	ldrb	r2, [r3, #16]
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004070:	3303      	adds	r3, #3
 8004072:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407a:	3303      	adds	r3, #3
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d008      	beq.n	8004094 <find_volume+0x2a0>
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004088:	3303      	adds	r3, #3
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d001      	beq.n	8004094 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8004090:	230d      	movs	r3, #13
 8004092:	e1ff      	b.n	8004494 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409a:	3303      	adds	r3, #3
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80040a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040aa:	7b5a      	ldrb	r2, [r3, #13]
 80040ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b2:	3302      	adds	r3, #2
 80040b4:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040bc:	3302      	adds	r3, #2
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00e      	beq.n	80040e2 <find_volume+0x2ee>
 80040c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ca:	3302      	adds	r3, #2
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d6:	3302      	adds	r3, #2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	3b01      	subs	r3, #1
 80040dc:	4013      	ands	r3, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 80040e2:	230d      	movs	r3, #13
 80040e4:	e1d6      	b.n	8004494 <find_volume+0x6a0>
 80040e6:	bf00      	nop
 80040e8:	200000bc 	.word	0x200000bc

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	7c9b      	ldrb	r3, [r3, #18]
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	b21a      	sxth	r2, r3
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	7c5b      	ldrb	r3, [r3, #17]
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	4313      	orrs	r3, r2
 80040fc:	b21b      	sxth	r3, r3
 80040fe:	b29a      	uxth	r2, r3
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004106:	3308      	adds	r3, #8
 8004108:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004110:	3308      	adds	r3, #8
 8004112:	881a      	ldrh	r2, [r3, #0]
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411a:	330a      	adds	r3, #10
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	b29b      	uxth	r3, r3
 8004122:	fbb2 f1f3 	udiv	r1, r2, r3
 8004126:	fb03 f301 	mul.w	r3, r3, r1
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8004132:	230d      	movs	r3, #13
 8004134:	e1ae      	b.n	8004494 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	7d1b      	ldrb	r3, [r3, #20]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	b21a      	sxth	r2, r3
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	7cdb      	ldrb	r3, [r3, #19]
 8004142:	b21b      	sxth	r3, r3
 8004144:	4313      	orrs	r3, r2
 8004146:	b21b      	sxth	r3, r3
 8004148:	b29b      	uxth	r3, r3
 800414a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800414c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800414e:	2b00      	cmp	r3, #0
 8004150:	d112      	bne.n	8004178 <find_volume+0x384>
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004158:	061a      	lsls	r2, r3, #24
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	4313      	orrs	r3, r2
 8004164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004166:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800416a:	0212      	lsls	r2, r2, #8
 800416c:	4313      	orrs	r3, r2
 800416e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004170:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004174:	4313      	orrs	r3, r2
 8004176:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	7bdb      	ldrb	r3, [r3, #15]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	b21a      	sxth	r2, r3
 8004180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004182:	7b9b      	ldrb	r3, [r3, #14]
 8004184:	b21b      	sxth	r3, r3
 8004186:	4313      	orrs	r3, r2
 8004188:	b21b      	sxth	r3, r3
 800418a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800418c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <find_volume+0x3a2>
 8004192:	230d      	movs	r3, #13
 8004194:	e17e      	b.n	8004494 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004196:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419a:	441a      	add	r2, r3
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a2:	3308      	adds	r3, #8
 80041a4:	8819      	ldrh	r1, [r3, #0]
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ac:	330a      	adds	r3, #10
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80041be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d201      	bcs.n	80041ca <find_volume+0x3d6>
 80041c6:	230d      	movs	r3, #13
 80041c8:	e164      	b.n	8004494 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80041ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	1ad2      	subs	r2, r2, r3
 80041d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d6:	3302      	adds	r3, #2
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <find_volume+0x3f6>
 80041e6:	230d      	movs	r3, #13
 80041e8:	e154      	b.n	8004494 <find_volume+0x6a0>
	fmt = FS_FAT12;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d902      	bls.n	8004200 <find_volume+0x40c>
 80041fa:	2302      	movs	r3, #2
 80041fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004206:	4293      	cmp	r3, r2
 8004208:	d902      	bls.n	8004210 <find_volume+0x41c>
 800420a:	2303      	movs	r3, #3
 800420c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	1c9a      	adds	r2, r3, #2
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421a:	3314      	adds	r3, #20
 800421c:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004224:	331c      	adds	r3, #28
 8004226:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004228:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800422a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800422c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800422e:	441a      	add	r2, r3
 8004230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004232:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004236:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8004238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	441a      	add	r2, r3
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004244:	3308      	adds	r3, #8
 8004246:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8004248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800424c:	2b03      	cmp	r3, #3
 800424e:	d127      	bne.n	80042a0 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004256:	3308      	adds	r3, #8
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <find_volume+0x46e>
 800425e:	230d      	movs	r3, #13
 8004260:	e118      	b.n	8004494 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004268:	061a      	lsls	r2, r3, #24
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	4313      	orrs	r3, r2
 8004274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004276:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800427a:	0212      	lsls	r2, r2, #8
 800427c:	4313      	orrs	r3, r2
 800427e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004280:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8004284:	431a      	orrs	r2, r3
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800428c:	3304      	adds	r3, #4
 800428e:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004296:	3314      	adds	r3, #20
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
 800429e:	e030      	b.n	8004302 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80042a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a6:	3308      	adds	r3, #8
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <find_volume+0x4be>
 80042ae:	230d      	movs	r3, #13
 80042b0:	e0f0      	b.n	8004494 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042bc:	441a      	add	r2, r3
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80042c4:	3304      	adds	r3, #4
 80042c6:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80042c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d106      	bne.n	80042de <find_volume+0x4ea>
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d6:	3314      	adds	r3, #20
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	e010      	b.n	8004300 <find_volume+0x50c>
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e4:	3314      	adds	r3, #20
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	085a      	lsrs	r2, r3, #1
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f6:	3314      	adds	r3, #20
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004300:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004308:	3318      	adds	r3, #24
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004312:	330a      	adds	r3, #10
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431a:	440b      	add	r3, r1
 800431c:	1e59      	subs	r1, r3, #1
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004324:	330a      	adds	r3, #10
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	fbb1 f3f3 	udiv	r3, r1, r3
 800432c:	429a      	cmp	r2, r3
 800432e:	d201      	bcs.n	8004334 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8004330:	230d      	movs	r3, #13
 8004332:	e0af      	b.n	8004494 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433a:	3310      	adds	r3, #16
 800433c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004348:	3310      	adds	r3, #16
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004352:	330c      	adds	r3, #12
 8004354:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435c:	3305      	adds	r3, #5
 800435e:	2280      	movs	r2, #128	; 0x80
 8004360:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004362:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004366:	2b03      	cmp	r3, #3
 8004368:	d17d      	bne.n	8004466 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	b21a      	sxth	r2, r3
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800437a:	b21b      	sxth	r3, r3
 800437c:	4313      	orrs	r3, r2
 800437e:	b21b      	sxth	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d170      	bne.n	8004466 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004386:	3301      	adds	r3, #1
 8004388:	4619      	mov	r1, r3
 800438a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800438c:	f7ff fc4c 	bl	8003c28 <move_window>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d167      	bne.n	8004466 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439c:	3305      	adds	r3, #5
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	b21a      	sxth	r2, r3
 80043ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ae:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80043b2:	b21b      	sxth	r3, r3
 80043b4:	4313      	orrs	r3, r2
 80043b6:	b21b      	sxth	r3, r3
 80043b8:	4a38      	ldr	r2, [pc, #224]	; (800449c <find_volume+0x6a8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d153      	bne.n	8004466 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	78db      	ldrb	r3, [r3, #3]
 80043c2:	061a      	lsls	r2, r3, #24
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	789b      	ldrb	r3, [r3, #2]
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	4313      	orrs	r3, r2
 80043cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ce:	7852      	ldrb	r2, [r2, #1]
 80043d0:	0212      	lsls	r2, r2, #8
 80043d2:	4313      	orrs	r3, r2
 80043d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043d6:	7812      	ldrb	r2, [r2, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	4a31      	ldr	r2, [pc, #196]	; (80044a0 <find_volume+0x6ac>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d142      	bne.n	8004466 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80043e6:	061a      	lsls	r2, r3, #24
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	4313      	orrs	r3, r2
 80043f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043f4:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80043f8:	0212      	lsls	r2, r2, #8
 80043fa:	4313      	orrs	r3, r2
 80043fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043fe:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8004402:	4313      	orrs	r3, r2
 8004404:	4a27      	ldr	r2, [pc, #156]	; (80044a4 <find_volume+0x6b0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d12d      	bne.n	8004466 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8004410:	061a      	lsls	r2, r3, #24
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	4313      	orrs	r3, r2
 800441c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800441e:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8004422:	0212      	lsls	r2, r2, #8
 8004424:	4313      	orrs	r3, r2
 8004426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004428:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800442c:	431a      	orrs	r2, r3
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004434:	3310      	adds	r3, #16
 8004436:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800443e:	061a      	lsls	r2, r3, #24
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	4313      	orrs	r3, r2
 800444a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800444c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8004450:	0212      	lsls	r2, r2, #8
 8004452:	4313      	orrs	r3, r2
 8004454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004456:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800445a:	431a      	orrs	r2, r3
 800445c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004462:	330c      	adds	r3, #12
 8004464:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004470:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <find_volume+0x6b4>)
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	3301      	adds	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <find_volume+0x6b4>)
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <find_volume+0x6b4>)
 8004480:	881a      	ldrh	r2, [r3, #0]
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004488:	3306      	adds	r3, #6
 800448a:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800448c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800448e:	f7ff fb47 	bl	8003b20 <clear_lock>
#endif

	return FR_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3758      	adds	r7, #88	; 0x58
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	ffffaa55 	.word	0xffffaa55
 80044a0:	41615252 	.word	0x41615252
 80044a4:	61417272 	.word	0x61417272
 80044a8:	200000c0 	.word	0x200000c0

080044ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	4613      	mov	r3, r2
 80044b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80044be:	f107 0310 	add.w	r3, r7, #16
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fbe4 	bl	8003c90 <get_ldnumber>
 80044c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	da01      	bge.n	80044d4 <f_mount+0x28>
 80044d0:	230b      	movs	r3, #11
 80044d2:	e02f      	b.n	8004534 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80044d4:	4a19      	ldr	r2, [pc, #100]	; (800453c <f_mount+0x90>)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80044e4:	69b8      	ldr	r0, [r7, #24]
 80044e6:	f7ff fb1b 	bl	8003b20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	490d      	ldr	r1, [pc, #52]	; (800453c <f_mount+0x90>)
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <f_mount+0x6e>
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d001      	beq.n	800451e <f_mount+0x72>
 800451a:	2300      	movs	r3, #0
 800451c:	e00a      	b.n	8004534 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800451e:	f107 0108 	add.w	r1, r7, #8
 8004522:	f107 030c 	add.w	r3, r7, #12
 8004526:	2200      	movs	r2, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fc63 	bl	8003df4 <find_volume>
 800452e:	4603      	mov	r3, r0
 8004530:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004532:	7dfb      	ldrb	r3, [r7, #23]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	200000bc 	.word	0x200000bc

08004540 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004556:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <FATFS_LinkDriverEx+0x90>)
 8004558:	7a5b      	ldrb	r3, [r3, #9]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b01      	cmp	r3, #1
 800455e:	d831      	bhi.n	80045c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004560:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <FATFS_LinkDriverEx+0x90>)
 8004562:	7a5b      	ldrb	r3, [r3, #9]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <FATFS_LinkDriverEx+0x90>)
 800456a:	2100      	movs	r1, #0
 800456c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800456e:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <FATFS_LinkDriverEx+0x90>)
 8004570:	7a5b      	ldrb	r3, [r3, #9]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <FATFS_LinkDriverEx+0x90>)
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <FATFS_LinkDriverEx+0x90>)
 8004580:	7a5b      	ldrb	r3, [r3, #9]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <FATFS_LinkDriverEx+0x90>)
 8004588:	4413      	add	r3, r2
 800458a:	79fa      	ldrb	r2, [r7, #7]
 800458c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800458e:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <FATFS_LinkDriverEx+0x90>)
 8004590:	7a5b      	ldrb	r3, [r3, #9]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	b2d1      	uxtb	r1, r2
 8004598:	4a0d      	ldr	r2, [pc, #52]	; (80045d0 <FATFS_LinkDriverEx+0x90>)
 800459a:	7251      	strb	r1, [r2, #9]
 800459c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800459e:	7dbb      	ldrb	r3, [r7, #22]
 80045a0:	3330      	adds	r3, #48	; 0x30
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	3301      	adds	r3, #1
 80045ac:	223a      	movs	r2, #58	; 0x3a
 80045ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	3302      	adds	r3, #2
 80045b4:	222f      	movs	r2, #47	; 0x2f
 80045b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	3303      	adds	r3, #3
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	200000dc 	.word	0x200000dc

080045d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80045de:	2200      	movs	r2, #0
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff ffac 	bl	8004540 <FATFS_LinkDriverEx>
 80045e8:	4603      	mov	r3, r0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	; (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000034 	.word	0x20000034

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	2600      	movs	r6, #0
 8004604:	4d0c      	ldr	r5, [pc, #48]	; (8004638 <__libc_init_array+0x38>)
 8004606:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004608:	1b64      	subs	r4, r4, r5
 800460a:	10a4      	asrs	r4, r4, #2
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	f000 fce4 	bl	8004fdc <_init>
 8004614:	2600      	movs	r6, #0
 8004616:	4d0a      	ldr	r5, [pc, #40]	; (8004640 <__libc_init_array+0x40>)
 8004618:	4c0a      	ldr	r4, [pc, #40]	; (8004644 <__libc_init_array+0x44>)
 800461a:	1b64      	subs	r4, r4, r5
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	080050c4 	.word	0x080050c4
 800463c:	080050c4 	.word	0x080050c4
 8004640:	080050c4 	.word	0x080050c4
 8004644:	080050c8 	.word	0x080050c8

08004648 <memset>:
 8004648:	4603      	mov	r3, r0
 800464a:	4402      	add	r2, r0
 800464c:	4293      	cmp	r3, r2
 800464e:	d100      	bne.n	8004652 <memset+0xa>
 8004650:	4770      	bx	lr
 8004652:	f803 1b01 	strb.w	r1, [r3], #1
 8004656:	e7f9      	b.n	800464c <memset+0x4>

08004658 <_puts_r>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	460e      	mov	r6, r1
 800465c:	4605      	mov	r5, r0
 800465e:	b118      	cbz	r0, 8004668 <_puts_r+0x10>
 8004660:	6983      	ldr	r3, [r0, #24]
 8004662:	b90b      	cbnz	r3, 8004668 <_puts_r+0x10>
 8004664:	f000 fa48 	bl	8004af8 <__sinit>
 8004668:	69ab      	ldr	r3, [r5, #24]
 800466a:	68ac      	ldr	r4, [r5, #8]
 800466c:	b913      	cbnz	r3, 8004674 <_puts_r+0x1c>
 800466e:	4628      	mov	r0, r5
 8004670:	f000 fa42 	bl	8004af8 <__sinit>
 8004674:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <_puts_r+0xd0>)
 8004676:	429c      	cmp	r4, r3
 8004678:	d120      	bne.n	80046bc <_puts_r+0x64>
 800467a:	686c      	ldr	r4, [r5, #4]
 800467c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800467e:	07db      	lsls	r3, r3, #31
 8004680:	d405      	bmi.n	800468e <_puts_r+0x36>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	0598      	lsls	r0, r3, #22
 8004686:	d402      	bmi.n	800468e <_puts_r+0x36>
 8004688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800468a:	f000 fad3 	bl	8004c34 <__retarget_lock_acquire_recursive>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	0719      	lsls	r1, r3, #28
 8004692:	d51d      	bpl.n	80046d0 <_puts_r+0x78>
 8004694:	6923      	ldr	r3, [r4, #16]
 8004696:	b1db      	cbz	r3, 80046d0 <_puts_r+0x78>
 8004698:	3e01      	subs	r6, #1
 800469a:	68a3      	ldr	r3, [r4, #8]
 800469c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046a0:	3b01      	subs	r3, #1
 80046a2:	60a3      	str	r3, [r4, #8]
 80046a4:	bb39      	cbnz	r1, 80046f6 <_puts_r+0x9e>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da38      	bge.n	800471c <_puts_r+0xc4>
 80046aa:	4622      	mov	r2, r4
 80046ac:	210a      	movs	r1, #10
 80046ae:	4628      	mov	r0, r5
 80046b0:	f000 f848 	bl	8004744 <__swbuf_r>
 80046b4:	3001      	adds	r0, #1
 80046b6:	d011      	beq.n	80046dc <_puts_r+0x84>
 80046b8:	250a      	movs	r5, #10
 80046ba:	e011      	b.n	80046e0 <_puts_r+0x88>
 80046bc:	4b1b      	ldr	r3, [pc, #108]	; (800472c <_puts_r+0xd4>)
 80046be:	429c      	cmp	r4, r3
 80046c0:	d101      	bne.n	80046c6 <_puts_r+0x6e>
 80046c2:	68ac      	ldr	r4, [r5, #8]
 80046c4:	e7da      	b.n	800467c <_puts_r+0x24>
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <_puts_r+0xd8>)
 80046c8:	429c      	cmp	r4, r3
 80046ca:	bf08      	it	eq
 80046cc:	68ec      	ldreq	r4, [r5, #12]
 80046ce:	e7d5      	b.n	800467c <_puts_r+0x24>
 80046d0:	4621      	mov	r1, r4
 80046d2:	4628      	mov	r0, r5
 80046d4:	f000 f888 	bl	80047e8 <__swsetup_r>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d0dd      	beq.n	8004698 <_puts_r+0x40>
 80046dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80046e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046e2:	07da      	lsls	r2, r3, #31
 80046e4:	d405      	bmi.n	80046f2 <_puts_r+0x9a>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	059b      	lsls	r3, r3, #22
 80046ea:	d402      	bmi.n	80046f2 <_puts_r+0x9a>
 80046ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ee:	f000 faa2 	bl	8004c36 <__retarget_lock_release_recursive>
 80046f2:	4628      	mov	r0, r5
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da04      	bge.n	8004704 <_puts_r+0xac>
 80046fa:	69a2      	ldr	r2, [r4, #24]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	dc06      	bgt.n	800470e <_puts_r+0xb6>
 8004700:	290a      	cmp	r1, #10
 8004702:	d004      	beq.n	800470e <_puts_r+0xb6>
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	6022      	str	r2, [r4, #0]
 800470a:	7019      	strb	r1, [r3, #0]
 800470c:	e7c5      	b.n	800469a <_puts_r+0x42>
 800470e:	4622      	mov	r2, r4
 8004710:	4628      	mov	r0, r5
 8004712:	f000 f817 	bl	8004744 <__swbuf_r>
 8004716:	3001      	adds	r0, #1
 8004718:	d1bf      	bne.n	800469a <_puts_r+0x42>
 800471a:	e7df      	b.n	80046dc <_puts_r+0x84>
 800471c:	250a      	movs	r5, #10
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	6022      	str	r2, [r4, #0]
 8004724:	701d      	strb	r5, [r3, #0]
 8004726:	e7db      	b.n	80046e0 <_puts_r+0x88>
 8004728:	08005084 	.word	0x08005084
 800472c:	080050a4 	.word	0x080050a4
 8004730:	08005064 	.word	0x08005064

08004734 <puts>:
 8004734:	4b02      	ldr	r3, [pc, #8]	; (8004740 <puts+0xc>)
 8004736:	4601      	mov	r1, r0
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	f7ff bf8d 	b.w	8004658 <_puts_r>
 800473e:	bf00      	nop
 8004740:	20000034 	.word	0x20000034

08004744 <__swbuf_r>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	460e      	mov	r6, r1
 8004748:	4614      	mov	r4, r2
 800474a:	4605      	mov	r5, r0
 800474c:	b118      	cbz	r0, 8004756 <__swbuf_r+0x12>
 800474e:	6983      	ldr	r3, [r0, #24]
 8004750:	b90b      	cbnz	r3, 8004756 <__swbuf_r+0x12>
 8004752:	f000 f9d1 	bl	8004af8 <__sinit>
 8004756:	4b21      	ldr	r3, [pc, #132]	; (80047dc <__swbuf_r+0x98>)
 8004758:	429c      	cmp	r4, r3
 800475a:	d12b      	bne.n	80047b4 <__swbuf_r+0x70>
 800475c:	686c      	ldr	r4, [r5, #4]
 800475e:	69a3      	ldr	r3, [r4, #24]
 8004760:	60a3      	str	r3, [r4, #8]
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	071a      	lsls	r2, r3, #28
 8004766:	d52f      	bpl.n	80047c8 <__swbuf_r+0x84>
 8004768:	6923      	ldr	r3, [r4, #16]
 800476a:	b36b      	cbz	r3, 80047c8 <__swbuf_r+0x84>
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	6820      	ldr	r0, [r4, #0]
 8004770:	b2f6      	uxtb	r6, r6
 8004772:	1ac0      	subs	r0, r0, r3
 8004774:	6963      	ldr	r3, [r4, #20]
 8004776:	4637      	mov	r7, r6
 8004778:	4283      	cmp	r3, r0
 800477a:	dc04      	bgt.n	8004786 <__swbuf_r+0x42>
 800477c:	4621      	mov	r1, r4
 800477e:	4628      	mov	r0, r5
 8004780:	f000 f926 	bl	80049d0 <_fflush_r>
 8004784:	bb30      	cbnz	r0, 80047d4 <__swbuf_r+0x90>
 8004786:	68a3      	ldr	r3, [r4, #8]
 8004788:	3001      	adds	r0, #1
 800478a:	3b01      	subs	r3, #1
 800478c:	60a3      	str	r3, [r4, #8]
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	6022      	str	r2, [r4, #0]
 8004794:	701e      	strb	r6, [r3, #0]
 8004796:	6963      	ldr	r3, [r4, #20]
 8004798:	4283      	cmp	r3, r0
 800479a:	d004      	beq.n	80047a6 <__swbuf_r+0x62>
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	07db      	lsls	r3, r3, #31
 80047a0:	d506      	bpl.n	80047b0 <__swbuf_r+0x6c>
 80047a2:	2e0a      	cmp	r6, #10
 80047a4:	d104      	bne.n	80047b0 <__swbuf_r+0x6c>
 80047a6:	4621      	mov	r1, r4
 80047a8:	4628      	mov	r0, r5
 80047aa:	f000 f911 	bl	80049d0 <_fflush_r>
 80047ae:	b988      	cbnz	r0, 80047d4 <__swbuf_r+0x90>
 80047b0:	4638      	mov	r0, r7
 80047b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <__swbuf_r+0x9c>)
 80047b6:	429c      	cmp	r4, r3
 80047b8:	d101      	bne.n	80047be <__swbuf_r+0x7a>
 80047ba:	68ac      	ldr	r4, [r5, #8]
 80047bc:	e7cf      	b.n	800475e <__swbuf_r+0x1a>
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <__swbuf_r+0xa0>)
 80047c0:	429c      	cmp	r4, r3
 80047c2:	bf08      	it	eq
 80047c4:	68ec      	ldreq	r4, [r5, #12]
 80047c6:	e7ca      	b.n	800475e <__swbuf_r+0x1a>
 80047c8:	4621      	mov	r1, r4
 80047ca:	4628      	mov	r0, r5
 80047cc:	f000 f80c 	bl	80047e8 <__swsetup_r>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d0cb      	beq.n	800476c <__swbuf_r+0x28>
 80047d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80047d8:	e7ea      	b.n	80047b0 <__swbuf_r+0x6c>
 80047da:	bf00      	nop
 80047dc:	08005084 	.word	0x08005084
 80047e0:	080050a4 	.word	0x080050a4
 80047e4:	08005064 	.word	0x08005064

080047e8 <__swsetup_r>:
 80047e8:	4b32      	ldr	r3, [pc, #200]	; (80048b4 <__swsetup_r+0xcc>)
 80047ea:	b570      	push	{r4, r5, r6, lr}
 80047ec:	681d      	ldr	r5, [r3, #0]
 80047ee:	4606      	mov	r6, r0
 80047f0:	460c      	mov	r4, r1
 80047f2:	b125      	cbz	r5, 80047fe <__swsetup_r+0x16>
 80047f4:	69ab      	ldr	r3, [r5, #24]
 80047f6:	b913      	cbnz	r3, 80047fe <__swsetup_r+0x16>
 80047f8:	4628      	mov	r0, r5
 80047fa:	f000 f97d 	bl	8004af8 <__sinit>
 80047fe:	4b2e      	ldr	r3, [pc, #184]	; (80048b8 <__swsetup_r+0xd0>)
 8004800:	429c      	cmp	r4, r3
 8004802:	d10f      	bne.n	8004824 <__swsetup_r+0x3c>
 8004804:	686c      	ldr	r4, [r5, #4]
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800480c:	0719      	lsls	r1, r3, #28
 800480e:	d42c      	bmi.n	800486a <__swsetup_r+0x82>
 8004810:	06dd      	lsls	r5, r3, #27
 8004812:	d411      	bmi.n	8004838 <__swsetup_r+0x50>
 8004814:	2309      	movs	r3, #9
 8004816:	6033      	str	r3, [r6, #0]
 8004818:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800481c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	e03e      	b.n	80048a2 <__swsetup_r+0xba>
 8004824:	4b25      	ldr	r3, [pc, #148]	; (80048bc <__swsetup_r+0xd4>)
 8004826:	429c      	cmp	r4, r3
 8004828:	d101      	bne.n	800482e <__swsetup_r+0x46>
 800482a:	68ac      	ldr	r4, [r5, #8]
 800482c:	e7eb      	b.n	8004806 <__swsetup_r+0x1e>
 800482e:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <__swsetup_r+0xd8>)
 8004830:	429c      	cmp	r4, r3
 8004832:	bf08      	it	eq
 8004834:	68ec      	ldreq	r4, [r5, #12]
 8004836:	e7e6      	b.n	8004806 <__swsetup_r+0x1e>
 8004838:	0758      	lsls	r0, r3, #29
 800483a:	d512      	bpl.n	8004862 <__swsetup_r+0x7a>
 800483c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800483e:	b141      	cbz	r1, 8004852 <__swsetup_r+0x6a>
 8004840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004844:	4299      	cmp	r1, r3
 8004846:	d002      	beq.n	800484e <__swsetup_r+0x66>
 8004848:	4630      	mov	r0, r6
 800484a:	f000 fa59 	bl	8004d00 <_free_r>
 800484e:	2300      	movs	r3, #0
 8004850:	6363      	str	r3, [r4, #52]	; 0x34
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	2300      	movs	r3, #0
 800485c:	6063      	str	r3, [r4, #4]
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	89a3      	ldrh	r3, [r4, #12]
 8004864:	f043 0308 	orr.w	r3, r3, #8
 8004868:	81a3      	strh	r3, [r4, #12]
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	b94b      	cbnz	r3, 8004882 <__swsetup_r+0x9a>
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004878:	d003      	beq.n	8004882 <__swsetup_r+0x9a>
 800487a:	4621      	mov	r1, r4
 800487c:	4630      	mov	r0, r6
 800487e:	f000 f9ff 	bl	8004c80 <__smakebuf_r>
 8004882:	89a0      	ldrh	r0, [r4, #12]
 8004884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004888:	f010 0301 	ands.w	r3, r0, #1
 800488c:	d00a      	beq.n	80048a4 <__swsetup_r+0xbc>
 800488e:	2300      	movs	r3, #0
 8004890:	60a3      	str	r3, [r4, #8]
 8004892:	6963      	ldr	r3, [r4, #20]
 8004894:	425b      	negs	r3, r3
 8004896:	61a3      	str	r3, [r4, #24]
 8004898:	6923      	ldr	r3, [r4, #16]
 800489a:	b943      	cbnz	r3, 80048ae <__swsetup_r+0xc6>
 800489c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048a0:	d1ba      	bne.n	8004818 <__swsetup_r+0x30>
 80048a2:	bd70      	pop	{r4, r5, r6, pc}
 80048a4:	0781      	lsls	r1, r0, #30
 80048a6:	bf58      	it	pl
 80048a8:	6963      	ldrpl	r3, [r4, #20]
 80048aa:	60a3      	str	r3, [r4, #8]
 80048ac:	e7f4      	b.n	8004898 <__swsetup_r+0xb0>
 80048ae:	2000      	movs	r0, #0
 80048b0:	e7f7      	b.n	80048a2 <__swsetup_r+0xba>
 80048b2:	bf00      	nop
 80048b4:	20000034 	.word	0x20000034
 80048b8:	08005084 	.word	0x08005084
 80048bc:	080050a4 	.word	0x080050a4
 80048c0:	08005064 	.word	0x08005064

080048c4 <__sflush_r>:
 80048c4:	898a      	ldrh	r2, [r1, #12]
 80048c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ca:	4605      	mov	r5, r0
 80048cc:	0710      	lsls	r0, r2, #28
 80048ce:	460c      	mov	r4, r1
 80048d0:	d458      	bmi.n	8004984 <__sflush_r+0xc0>
 80048d2:	684b      	ldr	r3, [r1, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	dc05      	bgt.n	80048e4 <__sflush_r+0x20>
 80048d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	dc02      	bgt.n	80048e4 <__sflush_r+0x20>
 80048de:	2000      	movs	r0, #0
 80048e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048e6:	2e00      	cmp	r6, #0
 80048e8:	d0f9      	beq.n	80048de <__sflush_r+0x1a>
 80048ea:	2300      	movs	r3, #0
 80048ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048f0:	682f      	ldr	r7, [r5, #0]
 80048f2:	602b      	str	r3, [r5, #0]
 80048f4:	d032      	beq.n	800495c <__sflush_r+0x98>
 80048f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	075a      	lsls	r2, r3, #29
 80048fc:	d505      	bpl.n	800490a <__sflush_r+0x46>
 80048fe:	6863      	ldr	r3, [r4, #4]
 8004900:	1ac0      	subs	r0, r0, r3
 8004902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004904:	b10b      	cbz	r3, 800490a <__sflush_r+0x46>
 8004906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004908:	1ac0      	subs	r0, r0, r3
 800490a:	2300      	movs	r3, #0
 800490c:	4602      	mov	r2, r0
 800490e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004910:	4628      	mov	r0, r5
 8004912:	6a21      	ldr	r1, [r4, #32]
 8004914:	47b0      	blx	r6
 8004916:	1c43      	adds	r3, r0, #1
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	d106      	bne.n	800492a <__sflush_r+0x66>
 800491c:	6829      	ldr	r1, [r5, #0]
 800491e:	291d      	cmp	r1, #29
 8004920:	d82c      	bhi.n	800497c <__sflush_r+0xb8>
 8004922:	4a2a      	ldr	r2, [pc, #168]	; (80049cc <__sflush_r+0x108>)
 8004924:	40ca      	lsrs	r2, r1
 8004926:	07d6      	lsls	r6, r2, #31
 8004928:	d528      	bpl.n	800497c <__sflush_r+0xb8>
 800492a:	2200      	movs	r2, #0
 800492c:	6062      	str	r2, [r4, #4]
 800492e:	6922      	ldr	r2, [r4, #16]
 8004930:	04d9      	lsls	r1, r3, #19
 8004932:	6022      	str	r2, [r4, #0]
 8004934:	d504      	bpl.n	8004940 <__sflush_r+0x7c>
 8004936:	1c42      	adds	r2, r0, #1
 8004938:	d101      	bne.n	800493e <__sflush_r+0x7a>
 800493a:	682b      	ldr	r3, [r5, #0]
 800493c:	b903      	cbnz	r3, 8004940 <__sflush_r+0x7c>
 800493e:	6560      	str	r0, [r4, #84]	; 0x54
 8004940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004942:	602f      	str	r7, [r5, #0]
 8004944:	2900      	cmp	r1, #0
 8004946:	d0ca      	beq.n	80048de <__sflush_r+0x1a>
 8004948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800494c:	4299      	cmp	r1, r3
 800494e:	d002      	beq.n	8004956 <__sflush_r+0x92>
 8004950:	4628      	mov	r0, r5
 8004952:	f000 f9d5 	bl	8004d00 <_free_r>
 8004956:	2000      	movs	r0, #0
 8004958:	6360      	str	r0, [r4, #52]	; 0x34
 800495a:	e7c1      	b.n	80048e0 <__sflush_r+0x1c>
 800495c:	6a21      	ldr	r1, [r4, #32]
 800495e:	2301      	movs	r3, #1
 8004960:	4628      	mov	r0, r5
 8004962:	47b0      	blx	r6
 8004964:	1c41      	adds	r1, r0, #1
 8004966:	d1c7      	bne.n	80048f8 <__sflush_r+0x34>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0c4      	beq.n	80048f8 <__sflush_r+0x34>
 800496e:	2b1d      	cmp	r3, #29
 8004970:	d001      	beq.n	8004976 <__sflush_r+0xb2>
 8004972:	2b16      	cmp	r3, #22
 8004974:	d101      	bne.n	800497a <__sflush_r+0xb6>
 8004976:	602f      	str	r7, [r5, #0]
 8004978:	e7b1      	b.n	80048de <__sflush_r+0x1a>
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004980:	81a3      	strh	r3, [r4, #12]
 8004982:	e7ad      	b.n	80048e0 <__sflush_r+0x1c>
 8004984:	690f      	ldr	r7, [r1, #16]
 8004986:	2f00      	cmp	r7, #0
 8004988:	d0a9      	beq.n	80048de <__sflush_r+0x1a>
 800498a:	0793      	lsls	r3, r2, #30
 800498c:	bf18      	it	ne
 800498e:	2300      	movne	r3, #0
 8004990:	680e      	ldr	r6, [r1, #0]
 8004992:	bf08      	it	eq
 8004994:	694b      	ldreq	r3, [r1, #20]
 8004996:	eba6 0807 	sub.w	r8, r6, r7
 800499a:	600f      	str	r7, [r1, #0]
 800499c:	608b      	str	r3, [r1, #8]
 800499e:	f1b8 0f00 	cmp.w	r8, #0
 80049a2:	dd9c      	ble.n	80048de <__sflush_r+0x1a>
 80049a4:	4643      	mov	r3, r8
 80049a6:	463a      	mov	r2, r7
 80049a8:	4628      	mov	r0, r5
 80049aa:	6a21      	ldr	r1, [r4, #32]
 80049ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049ae:	47b0      	blx	r6
 80049b0:	2800      	cmp	r0, #0
 80049b2:	dc06      	bgt.n	80049c2 <__sflush_r+0xfe>
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049be:	81a3      	strh	r3, [r4, #12]
 80049c0:	e78e      	b.n	80048e0 <__sflush_r+0x1c>
 80049c2:	4407      	add	r7, r0
 80049c4:	eba8 0800 	sub.w	r8, r8, r0
 80049c8:	e7e9      	b.n	800499e <__sflush_r+0xda>
 80049ca:	bf00      	nop
 80049cc:	20400001 	.word	0x20400001

080049d0 <_fflush_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	690b      	ldr	r3, [r1, #16]
 80049d4:	4605      	mov	r5, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	b913      	cbnz	r3, 80049e0 <_fflush_r+0x10>
 80049da:	2500      	movs	r5, #0
 80049dc:	4628      	mov	r0, r5
 80049de:	bd38      	pop	{r3, r4, r5, pc}
 80049e0:	b118      	cbz	r0, 80049ea <_fflush_r+0x1a>
 80049e2:	6983      	ldr	r3, [r0, #24]
 80049e4:	b90b      	cbnz	r3, 80049ea <_fflush_r+0x1a>
 80049e6:	f000 f887 	bl	8004af8 <__sinit>
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <_fflush_r+0x6c>)
 80049ec:	429c      	cmp	r4, r3
 80049ee:	d11b      	bne.n	8004a28 <_fflush_r+0x58>
 80049f0:	686c      	ldr	r4, [r5, #4]
 80049f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0ef      	beq.n	80049da <_fflush_r+0xa>
 80049fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049fc:	07d0      	lsls	r0, r2, #31
 80049fe:	d404      	bmi.n	8004a0a <_fflush_r+0x3a>
 8004a00:	0599      	lsls	r1, r3, #22
 8004a02:	d402      	bmi.n	8004a0a <_fflush_r+0x3a>
 8004a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a06:	f000 f915 	bl	8004c34 <__retarget_lock_acquire_recursive>
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	f7ff ff59 	bl	80048c4 <__sflush_r>
 8004a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a14:	4605      	mov	r5, r0
 8004a16:	07da      	lsls	r2, r3, #31
 8004a18:	d4e0      	bmi.n	80049dc <_fflush_r+0xc>
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	059b      	lsls	r3, r3, #22
 8004a1e:	d4dd      	bmi.n	80049dc <_fflush_r+0xc>
 8004a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a22:	f000 f908 	bl	8004c36 <__retarget_lock_release_recursive>
 8004a26:	e7d9      	b.n	80049dc <_fflush_r+0xc>
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <_fflush_r+0x70>)
 8004a2a:	429c      	cmp	r4, r3
 8004a2c:	d101      	bne.n	8004a32 <_fflush_r+0x62>
 8004a2e:	68ac      	ldr	r4, [r5, #8]
 8004a30:	e7df      	b.n	80049f2 <_fflush_r+0x22>
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <_fflush_r+0x74>)
 8004a34:	429c      	cmp	r4, r3
 8004a36:	bf08      	it	eq
 8004a38:	68ec      	ldreq	r4, [r5, #12]
 8004a3a:	e7da      	b.n	80049f2 <_fflush_r+0x22>
 8004a3c:	08005084 	.word	0x08005084
 8004a40:	080050a4 	.word	0x080050a4
 8004a44:	08005064 	.word	0x08005064

08004a48 <std>:
 8004a48:	2300      	movs	r3, #0
 8004a4a:	b510      	push	{r4, lr}
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a56:	6083      	str	r3, [r0, #8]
 8004a58:	8181      	strh	r1, [r0, #12]
 8004a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a5c:	81c2      	strh	r2, [r0, #14]
 8004a5e:	6183      	str	r3, [r0, #24]
 8004a60:	4619      	mov	r1, r3
 8004a62:	2208      	movs	r2, #8
 8004a64:	305c      	adds	r0, #92	; 0x5c
 8004a66:	f7ff fdef 	bl	8004648 <memset>
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <std+0x38>)
 8004a6c:	6224      	str	r4, [r4, #32]
 8004a6e:	6263      	str	r3, [r4, #36]	; 0x24
 8004a70:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <std+0x3c>)
 8004a72:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a74:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <std+0x40>)
 8004a76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <std+0x44>)
 8004a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	bf00      	nop
 8004a80:	08004e6d 	.word	0x08004e6d
 8004a84:	08004e8f 	.word	0x08004e8f
 8004a88:	08004ec7 	.word	0x08004ec7
 8004a8c:	08004eeb 	.word	0x08004eeb

08004a90 <_cleanup_r>:
 8004a90:	4901      	ldr	r1, [pc, #4]	; (8004a98 <_cleanup_r+0x8>)
 8004a92:	f000 b8af 	b.w	8004bf4 <_fwalk_reent>
 8004a96:	bf00      	nop
 8004a98:	080049d1 	.word	0x080049d1

08004a9c <__sfmoreglue>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	2568      	movs	r5, #104	; 0x68
 8004aa0:	1e4a      	subs	r2, r1, #1
 8004aa2:	4355      	muls	r5, r2
 8004aa4:	460e      	mov	r6, r1
 8004aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004aaa:	f000 f975 	bl	8004d98 <_malloc_r>
 8004aae:	4604      	mov	r4, r0
 8004ab0:	b140      	cbz	r0, 8004ac4 <__sfmoreglue+0x28>
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ab8:	300c      	adds	r0, #12
 8004aba:	60a0      	str	r0, [r4, #8]
 8004abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ac0:	f7ff fdc2 	bl	8004648 <memset>
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}

08004ac8 <__sfp_lock_acquire>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	; (8004ad0 <__sfp_lock_acquire+0x8>)
 8004aca:	f000 b8b3 	b.w	8004c34 <__retarget_lock_acquire_recursive>
 8004ace:	bf00      	nop
 8004ad0:	200043a8 	.word	0x200043a8

08004ad4 <__sfp_lock_release>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	; (8004adc <__sfp_lock_release+0x8>)
 8004ad6:	f000 b8ae 	b.w	8004c36 <__retarget_lock_release_recursive>
 8004ada:	bf00      	nop
 8004adc:	200043a8 	.word	0x200043a8

08004ae0 <__sinit_lock_acquire>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	; (8004ae8 <__sinit_lock_acquire+0x8>)
 8004ae2:	f000 b8a7 	b.w	8004c34 <__retarget_lock_acquire_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	200043a3 	.word	0x200043a3

08004aec <__sinit_lock_release>:
 8004aec:	4801      	ldr	r0, [pc, #4]	; (8004af4 <__sinit_lock_release+0x8>)
 8004aee:	f000 b8a2 	b.w	8004c36 <__retarget_lock_release_recursive>
 8004af2:	bf00      	nop
 8004af4:	200043a3 	.word	0x200043a3

08004af8 <__sinit>:
 8004af8:	b510      	push	{r4, lr}
 8004afa:	4604      	mov	r4, r0
 8004afc:	f7ff fff0 	bl	8004ae0 <__sinit_lock_acquire>
 8004b00:	69a3      	ldr	r3, [r4, #24]
 8004b02:	b11b      	cbz	r3, 8004b0c <__sinit+0x14>
 8004b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b08:	f7ff bff0 	b.w	8004aec <__sinit_lock_release>
 8004b0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b10:	6523      	str	r3, [r4, #80]	; 0x50
 8004b12:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <__sinit+0x68>)
 8004b14:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <__sinit+0x6c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b1a:	42a3      	cmp	r3, r4
 8004b1c:	bf08      	it	eq
 8004b1e:	2301      	moveq	r3, #1
 8004b20:	4620      	mov	r0, r4
 8004b22:	bf08      	it	eq
 8004b24:	61a3      	streq	r3, [r4, #24]
 8004b26:	f000 f81f 	bl	8004b68 <__sfp>
 8004b2a:	6060      	str	r0, [r4, #4]
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f000 f81b 	bl	8004b68 <__sfp>
 8004b32:	60a0      	str	r0, [r4, #8]
 8004b34:	4620      	mov	r0, r4
 8004b36:	f000 f817 	bl	8004b68 <__sfp>
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2104      	movs	r1, #4
 8004b3e:	60e0      	str	r0, [r4, #12]
 8004b40:	6860      	ldr	r0, [r4, #4]
 8004b42:	f7ff ff81 	bl	8004a48 <std>
 8004b46:	2201      	movs	r2, #1
 8004b48:	2109      	movs	r1, #9
 8004b4a:	68a0      	ldr	r0, [r4, #8]
 8004b4c:	f7ff ff7c 	bl	8004a48 <std>
 8004b50:	2202      	movs	r2, #2
 8004b52:	2112      	movs	r1, #18
 8004b54:	68e0      	ldr	r0, [r4, #12]
 8004b56:	f7ff ff77 	bl	8004a48 <std>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	61a3      	str	r3, [r4, #24]
 8004b5e:	e7d1      	b.n	8004b04 <__sinit+0xc>
 8004b60:	08005060 	.word	0x08005060
 8004b64:	08004a91 	.word	0x08004a91

08004b68 <__sfp>:
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	4607      	mov	r7, r0
 8004b6c:	f7ff ffac 	bl	8004ac8 <__sfp_lock_acquire>
 8004b70:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <__sfp+0x84>)
 8004b72:	681e      	ldr	r6, [r3, #0]
 8004b74:	69b3      	ldr	r3, [r6, #24]
 8004b76:	b913      	cbnz	r3, 8004b7e <__sfp+0x16>
 8004b78:	4630      	mov	r0, r6
 8004b7a:	f7ff ffbd 	bl	8004af8 <__sinit>
 8004b7e:	3648      	adds	r6, #72	; 0x48
 8004b80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	d503      	bpl.n	8004b90 <__sfp+0x28>
 8004b88:	6833      	ldr	r3, [r6, #0]
 8004b8a:	b30b      	cbz	r3, 8004bd0 <__sfp+0x68>
 8004b8c:	6836      	ldr	r6, [r6, #0]
 8004b8e:	e7f7      	b.n	8004b80 <__sfp+0x18>
 8004b90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b94:	b9d5      	cbnz	r5, 8004bcc <__sfp+0x64>
 8004b96:	4b16      	ldr	r3, [pc, #88]	; (8004bf0 <__sfp+0x88>)
 8004b98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b9c:	60e3      	str	r3, [r4, #12]
 8004b9e:	6665      	str	r5, [r4, #100]	; 0x64
 8004ba0:	f000 f847 	bl	8004c32 <__retarget_lock_init_recursive>
 8004ba4:	f7ff ff96 	bl	8004ad4 <__sfp_lock_release>
 8004ba8:	2208      	movs	r2, #8
 8004baa:	4629      	mov	r1, r5
 8004bac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004bb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004bb4:	6025      	str	r5, [r4, #0]
 8004bb6:	61a5      	str	r5, [r4, #24]
 8004bb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bbc:	f7ff fd44 	bl	8004648 <memset>
 8004bc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bc8:	4620      	mov	r0, r4
 8004bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bcc:	3468      	adds	r4, #104	; 0x68
 8004bce:	e7d9      	b.n	8004b84 <__sfp+0x1c>
 8004bd0:	2104      	movs	r1, #4
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f7ff ff62 	bl	8004a9c <__sfmoreglue>
 8004bd8:	4604      	mov	r4, r0
 8004bda:	6030      	str	r0, [r6, #0]
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d1d5      	bne.n	8004b8c <__sfp+0x24>
 8004be0:	f7ff ff78 	bl	8004ad4 <__sfp_lock_release>
 8004be4:	230c      	movs	r3, #12
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	e7ee      	b.n	8004bc8 <__sfp+0x60>
 8004bea:	bf00      	nop
 8004bec:	08005060 	.word	0x08005060
 8004bf0:	ffff0001 	.word	0xffff0001

08004bf4 <_fwalk_reent>:
 8004bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf8:	4606      	mov	r6, r0
 8004bfa:	4688      	mov	r8, r1
 8004bfc:	2700      	movs	r7, #0
 8004bfe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c06:	f1b9 0901 	subs.w	r9, r9, #1
 8004c0a:	d505      	bpl.n	8004c18 <_fwalk_reent+0x24>
 8004c0c:	6824      	ldr	r4, [r4, #0]
 8004c0e:	2c00      	cmp	r4, #0
 8004c10:	d1f7      	bne.n	8004c02 <_fwalk_reent+0xe>
 8004c12:	4638      	mov	r0, r7
 8004c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c18:	89ab      	ldrh	r3, [r5, #12]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d907      	bls.n	8004c2e <_fwalk_reent+0x3a>
 8004c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c22:	3301      	adds	r3, #1
 8004c24:	d003      	beq.n	8004c2e <_fwalk_reent+0x3a>
 8004c26:	4629      	mov	r1, r5
 8004c28:	4630      	mov	r0, r6
 8004c2a:	47c0      	blx	r8
 8004c2c:	4307      	orrs	r7, r0
 8004c2e:	3568      	adds	r5, #104	; 0x68
 8004c30:	e7e9      	b.n	8004c06 <_fwalk_reent+0x12>

08004c32 <__retarget_lock_init_recursive>:
 8004c32:	4770      	bx	lr

08004c34 <__retarget_lock_acquire_recursive>:
 8004c34:	4770      	bx	lr

08004c36 <__retarget_lock_release_recursive>:
 8004c36:	4770      	bx	lr

08004c38 <__swhatbuf_r>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	460e      	mov	r6, r1
 8004c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c40:	4614      	mov	r4, r2
 8004c42:	2900      	cmp	r1, #0
 8004c44:	461d      	mov	r5, r3
 8004c46:	b096      	sub	sp, #88	; 0x58
 8004c48:	da07      	bge.n	8004c5a <__swhatbuf_r+0x22>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	602b      	str	r3, [r5, #0]
 8004c4e:	89b3      	ldrh	r3, [r6, #12]
 8004c50:	061a      	lsls	r2, r3, #24
 8004c52:	d410      	bmi.n	8004c76 <__swhatbuf_r+0x3e>
 8004c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c58:	e00e      	b.n	8004c78 <__swhatbuf_r+0x40>
 8004c5a:	466a      	mov	r2, sp
 8004c5c:	f000 f96c 	bl	8004f38 <_fstat_r>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	dbf2      	blt.n	8004c4a <__swhatbuf_r+0x12>
 8004c64:	9a01      	ldr	r2, [sp, #4]
 8004c66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c6e:	425a      	negs	r2, r3
 8004c70:	415a      	adcs	r2, r3
 8004c72:	602a      	str	r2, [r5, #0]
 8004c74:	e7ee      	b.n	8004c54 <__swhatbuf_r+0x1c>
 8004c76:	2340      	movs	r3, #64	; 0x40
 8004c78:	2000      	movs	r0, #0
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	b016      	add	sp, #88	; 0x58
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}

08004c80 <__smakebuf_r>:
 8004c80:	898b      	ldrh	r3, [r1, #12]
 8004c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c84:	079d      	lsls	r5, r3, #30
 8004c86:	4606      	mov	r6, r0
 8004c88:	460c      	mov	r4, r1
 8004c8a:	d507      	bpl.n	8004c9c <__smakebuf_r+0x1c>
 8004c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	2301      	movs	r3, #1
 8004c96:	6163      	str	r3, [r4, #20]
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}
 8004c9c:	466a      	mov	r2, sp
 8004c9e:	ab01      	add	r3, sp, #4
 8004ca0:	f7ff ffca 	bl	8004c38 <__swhatbuf_r>
 8004ca4:	9900      	ldr	r1, [sp, #0]
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	4630      	mov	r0, r6
 8004caa:	f000 f875 	bl	8004d98 <_malloc_r>
 8004cae:	b948      	cbnz	r0, 8004cc4 <__smakebuf_r+0x44>
 8004cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb4:	059a      	lsls	r2, r3, #22
 8004cb6:	d4ef      	bmi.n	8004c98 <__smakebuf_r+0x18>
 8004cb8:	f023 0303 	bic.w	r3, r3, #3
 8004cbc:	f043 0302 	orr.w	r3, r3, #2
 8004cc0:	81a3      	strh	r3, [r4, #12]
 8004cc2:	e7e3      	b.n	8004c8c <__smakebuf_r+0xc>
 8004cc4:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <__smakebuf_r+0x7c>)
 8004cc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	6020      	str	r0, [r4, #0]
 8004ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	9b00      	ldr	r3, [sp, #0]
 8004cd4:	6120      	str	r0, [r4, #16]
 8004cd6:	6163      	str	r3, [r4, #20]
 8004cd8:	9b01      	ldr	r3, [sp, #4]
 8004cda:	b15b      	cbz	r3, 8004cf4 <__smakebuf_r+0x74>
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ce2:	f000 f93b 	bl	8004f5c <_isatty_r>
 8004ce6:	b128      	cbz	r0, 8004cf4 <__smakebuf_r+0x74>
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	89a0      	ldrh	r0, [r4, #12]
 8004cf6:	4305      	orrs	r5, r0
 8004cf8:	81a5      	strh	r5, [r4, #12]
 8004cfa:	e7cd      	b.n	8004c98 <__smakebuf_r+0x18>
 8004cfc:	08004a91 	.word	0x08004a91

08004d00 <_free_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4605      	mov	r5, r0
 8004d04:	2900      	cmp	r1, #0
 8004d06:	d043      	beq.n	8004d90 <_free_r+0x90>
 8004d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d0c:	1f0c      	subs	r4, r1, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bfb8      	it	lt
 8004d12:	18e4      	addlt	r4, r4, r3
 8004d14:	f000 f944 	bl	8004fa0 <__malloc_lock>
 8004d18:	4a1e      	ldr	r2, [pc, #120]	; (8004d94 <_free_r+0x94>)
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	b933      	cbnz	r3, 8004d2e <_free_r+0x2e>
 8004d20:	6063      	str	r3, [r4, #4]
 8004d22:	6014      	str	r4, [r2, #0]
 8004d24:	4628      	mov	r0, r5
 8004d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d2a:	f000 b93f 	b.w	8004fac <__malloc_unlock>
 8004d2e:	42a3      	cmp	r3, r4
 8004d30:	d90a      	bls.n	8004d48 <_free_r+0x48>
 8004d32:	6821      	ldr	r1, [r4, #0]
 8004d34:	1862      	adds	r2, r4, r1
 8004d36:	4293      	cmp	r3, r2
 8004d38:	bf01      	itttt	eq
 8004d3a:	681a      	ldreq	r2, [r3, #0]
 8004d3c:	685b      	ldreq	r3, [r3, #4]
 8004d3e:	1852      	addeq	r2, r2, r1
 8004d40:	6022      	streq	r2, [r4, #0]
 8004d42:	6063      	str	r3, [r4, #4]
 8004d44:	6004      	str	r4, [r0, #0]
 8004d46:	e7ed      	b.n	8004d24 <_free_r+0x24>
 8004d48:	461a      	mov	r2, r3
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	b10b      	cbz	r3, 8004d52 <_free_r+0x52>
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	d9fa      	bls.n	8004d48 <_free_r+0x48>
 8004d52:	6811      	ldr	r1, [r2, #0]
 8004d54:	1850      	adds	r0, r2, r1
 8004d56:	42a0      	cmp	r0, r4
 8004d58:	d10b      	bne.n	8004d72 <_free_r+0x72>
 8004d5a:	6820      	ldr	r0, [r4, #0]
 8004d5c:	4401      	add	r1, r0
 8004d5e:	1850      	adds	r0, r2, r1
 8004d60:	4283      	cmp	r3, r0
 8004d62:	6011      	str	r1, [r2, #0]
 8004d64:	d1de      	bne.n	8004d24 <_free_r+0x24>
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4401      	add	r1, r0
 8004d6c:	6011      	str	r1, [r2, #0]
 8004d6e:	6053      	str	r3, [r2, #4]
 8004d70:	e7d8      	b.n	8004d24 <_free_r+0x24>
 8004d72:	d902      	bls.n	8004d7a <_free_r+0x7a>
 8004d74:	230c      	movs	r3, #12
 8004d76:	602b      	str	r3, [r5, #0]
 8004d78:	e7d4      	b.n	8004d24 <_free_r+0x24>
 8004d7a:	6820      	ldr	r0, [r4, #0]
 8004d7c:	1821      	adds	r1, r4, r0
 8004d7e:	428b      	cmp	r3, r1
 8004d80:	bf01      	itttt	eq
 8004d82:	6819      	ldreq	r1, [r3, #0]
 8004d84:	685b      	ldreq	r3, [r3, #4]
 8004d86:	1809      	addeq	r1, r1, r0
 8004d88:	6021      	streq	r1, [r4, #0]
 8004d8a:	6063      	str	r3, [r4, #4]
 8004d8c:	6054      	str	r4, [r2, #4]
 8004d8e:	e7c9      	b.n	8004d24 <_free_r+0x24>
 8004d90:	bd38      	pop	{r3, r4, r5, pc}
 8004d92:	bf00      	nop
 8004d94:	200000e8 	.word	0x200000e8

08004d98 <_malloc_r>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	1ccd      	adds	r5, r1, #3
 8004d9c:	f025 0503 	bic.w	r5, r5, #3
 8004da0:	3508      	adds	r5, #8
 8004da2:	2d0c      	cmp	r5, #12
 8004da4:	bf38      	it	cc
 8004da6:	250c      	movcc	r5, #12
 8004da8:	2d00      	cmp	r5, #0
 8004daa:	4606      	mov	r6, r0
 8004dac:	db01      	blt.n	8004db2 <_malloc_r+0x1a>
 8004dae:	42a9      	cmp	r1, r5
 8004db0:	d903      	bls.n	8004dba <_malloc_r+0x22>
 8004db2:	230c      	movs	r3, #12
 8004db4:	6033      	str	r3, [r6, #0]
 8004db6:	2000      	movs	r0, #0
 8004db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dba:	f000 f8f1 	bl	8004fa0 <__malloc_lock>
 8004dbe:	4921      	ldr	r1, [pc, #132]	; (8004e44 <_malloc_r+0xac>)
 8004dc0:	680a      	ldr	r2, [r1, #0]
 8004dc2:	4614      	mov	r4, r2
 8004dc4:	b99c      	cbnz	r4, 8004dee <_malloc_r+0x56>
 8004dc6:	4f20      	ldr	r7, [pc, #128]	; (8004e48 <_malloc_r+0xb0>)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	b923      	cbnz	r3, 8004dd6 <_malloc_r+0x3e>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f000 f83c 	bl	8004e4c <_sbrk_r>
 8004dd4:	6038      	str	r0, [r7, #0]
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f000 f837 	bl	8004e4c <_sbrk_r>
 8004dde:	1c43      	adds	r3, r0, #1
 8004de0:	d123      	bne.n	8004e2a <_malloc_r+0x92>
 8004de2:	230c      	movs	r3, #12
 8004de4:	4630      	mov	r0, r6
 8004de6:	6033      	str	r3, [r6, #0]
 8004de8:	f000 f8e0 	bl	8004fac <__malloc_unlock>
 8004dec:	e7e3      	b.n	8004db6 <_malloc_r+0x1e>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	1b5b      	subs	r3, r3, r5
 8004df2:	d417      	bmi.n	8004e24 <_malloc_r+0x8c>
 8004df4:	2b0b      	cmp	r3, #11
 8004df6:	d903      	bls.n	8004e00 <_malloc_r+0x68>
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	441c      	add	r4, r3
 8004dfc:	6025      	str	r5, [r4, #0]
 8004dfe:	e004      	b.n	8004e0a <_malloc_r+0x72>
 8004e00:	6863      	ldr	r3, [r4, #4]
 8004e02:	42a2      	cmp	r2, r4
 8004e04:	bf0c      	ite	eq
 8004e06:	600b      	streq	r3, [r1, #0]
 8004e08:	6053      	strne	r3, [r2, #4]
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f000 f8ce 	bl	8004fac <__malloc_unlock>
 8004e10:	f104 000b 	add.w	r0, r4, #11
 8004e14:	1d23      	adds	r3, r4, #4
 8004e16:	f020 0007 	bic.w	r0, r0, #7
 8004e1a:	1ac2      	subs	r2, r0, r3
 8004e1c:	d0cc      	beq.n	8004db8 <_malloc_r+0x20>
 8004e1e:	1a1b      	subs	r3, r3, r0
 8004e20:	50a3      	str	r3, [r4, r2]
 8004e22:	e7c9      	b.n	8004db8 <_malloc_r+0x20>
 8004e24:	4622      	mov	r2, r4
 8004e26:	6864      	ldr	r4, [r4, #4]
 8004e28:	e7cc      	b.n	8004dc4 <_malloc_r+0x2c>
 8004e2a:	1cc4      	adds	r4, r0, #3
 8004e2c:	f024 0403 	bic.w	r4, r4, #3
 8004e30:	42a0      	cmp	r0, r4
 8004e32:	d0e3      	beq.n	8004dfc <_malloc_r+0x64>
 8004e34:	1a21      	subs	r1, r4, r0
 8004e36:	4630      	mov	r0, r6
 8004e38:	f000 f808 	bl	8004e4c <_sbrk_r>
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d1dd      	bne.n	8004dfc <_malloc_r+0x64>
 8004e40:	e7cf      	b.n	8004de2 <_malloc_r+0x4a>
 8004e42:	bf00      	nop
 8004e44:	200000e8 	.word	0x200000e8
 8004e48:	200000ec 	.word	0x200000ec

08004e4c <_sbrk_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4d05      	ldr	r5, [pc, #20]	; (8004e68 <_sbrk_r+0x1c>)
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	f7fc fb6e 	bl	8001538 <_sbrk>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_sbrk_r+0x1a>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_sbrk_r+0x1a>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	200043ac 	.word	0x200043ac

08004e6c <__sread>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	460c      	mov	r4, r1
 8004e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e74:	f000 f8a0 	bl	8004fb8 <_read_r>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	bfab      	itete	ge
 8004e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e80:	181b      	addge	r3, r3, r0
 8004e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e86:	bfac      	ite	ge
 8004e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e8a:	81a3      	strhlt	r3, [r4, #12]
 8004e8c:	bd10      	pop	{r4, pc}

08004e8e <__swrite>:
 8004e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e92:	461f      	mov	r7, r3
 8004e94:	898b      	ldrh	r3, [r1, #12]
 8004e96:	4605      	mov	r5, r0
 8004e98:	05db      	lsls	r3, r3, #23
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	d505      	bpl.n	8004eac <__swrite+0x1e>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea8:	f000 f868 	bl	8004f7c <_lseek_r>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	4632      	mov	r2, r6
 8004eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	463b      	mov	r3, r7
 8004eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec2:	f000 b817 	b.w	8004ef4 <_write_r>

08004ec6 <__sseek>:
 8004ec6:	b510      	push	{r4, lr}
 8004ec8:	460c      	mov	r4, r1
 8004eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ece:	f000 f855 	bl	8004f7c <_lseek_r>
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	89a3      	ldrh	r3, [r4, #12]
 8004ed6:	bf15      	itete	ne
 8004ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ee2:	81a3      	strheq	r3, [r4, #12]
 8004ee4:	bf18      	it	ne
 8004ee6:	81a3      	strhne	r3, [r4, #12]
 8004ee8:	bd10      	pop	{r4, pc}

08004eea <__sclose>:
 8004eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eee:	f000 b813 	b.w	8004f18 <_close_r>
	...

08004ef4 <_write_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	4608      	mov	r0, r1
 8004efa:	4611      	mov	r1, r2
 8004efc:	2200      	movs	r2, #0
 8004efe:	4d05      	ldr	r5, [pc, #20]	; (8004f14 <_write_r+0x20>)
 8004f00:	602a      	str	r2, [r5, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f7fb fe36 	bl	8000b74 <_write>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_write_r+0x1e>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_write_r+0x1e>
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	200043ac 	.word	0x200043ac

08004f18 <_close_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	4d05      	ldr	r5, [pc, #20]	; (8004f34 <_close_r+0x1c>)
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	f7fc fad7 	bl	80014d6 <_close>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_close_r+0x1a>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_close_r+0x1a>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	200043ac 	.word	0x200043ac

08004f38 <_fstat_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	4d06      	ldr	r5, [pc, #24]	; (8004f58 <_fstat_r+0x20>)
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	f7fc fad1 	bl	80014ec <_fstat>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	d102      	bne.n	8004f54 <_fstat_r+0x1c>
 8004f4e:	682b      	ldr	r3, [r5, #0]
 8004f50:	b103      	cbz	r3, 8004f54 <_fstat_r+0x1c>
 8004f52:	6023      	str	r3, [r4, #0]
 8004f54:	bd38      	pop	{r3, r4, r5, pc}
 8004f56:	bf00      	nop
 8004f58:	200043ac 	.word	0x200043ac

08004f5c <_isatty_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	2300      	movs	r3, #0
 8004f60:	4d05      	ldr	r5, [pc, #20]	; (8004f78 <_isatty_r+0x1c>)
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	f7fc facf 	bl	800150a <_isatty>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_isatty_r+0x1a>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_isatty_r+0x1a>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	200043ac 	.word	0x200043ac

08004f7c <_lseek_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4604      	mov	r4, r0
 8004f80:	4608      	mov	r0, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	2200      	movs	r2, #0
 8004f86:	4d05      	ldr	r5, [pc, #20]	; (8004f9c <_lseek_r+0x20>)
 8004f88:	602a      	str	r2, [r5, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f7fc fac7 	bl	800151e <_lseek>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_lseek_r+0x1e>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_lseek_r+0x1e>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	200043ac 	.word	0x200043ac

08004fa0 <__malloc_lock>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	; (8004fa8 <__malloc_lock+0x8>)
 8004fa2:	f7ff be47 	b.w	8004c34 <__retarget_lock_acquire_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	200043a4 	.word	0x200043a4

08004fac <__malloc_unlock>:
 8004fac:	4801      	ldr	r0, [pc, #4]	; (8004fb4 <__malloc_unlock+0x8>)
 8004fae:	f7ff be42 	b.w	8004c36 <__retarget_lock_release_recursive>
 8004fb2:	bf00      	nop
 8004fb4:	200043a4 	.word	0x200043a4

08004fb8 <_read_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4604      	mov	r4, r0
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4d05      	ldr	r5, [pc, #20]	; (8004fd8 <_read_r+0x20>)
 8004fc4:	602a      	str	r2, [r5, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f7fc fa68 	bl	800149c <_read>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_read_r+0x1e>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_read_r+0x1e>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	200043ac 	.word	0x200043ac

08004fdc <_init>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr

08004fe8 <_fini>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr
